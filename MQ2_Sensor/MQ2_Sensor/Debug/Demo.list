
Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000806c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08008200  08008200  00009200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008670  08008670  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008670  08008670  00009670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008678  08008678  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008678  08008678  00009678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800867c  0800867c  0000967c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008680  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          00000238  200001d4  200001d4  0000a1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000040c  2000040c  0000a1d4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ab5  00000000  00000000  0000a1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017a4  00000000  00000000  00012cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  00014458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000608  00000000  00000000  00014c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002219b  00000000  00000000  00015250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009550  00000000  00000000  000373eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0e26  00000000  00000000  0004093b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00111761  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003508  00000000  00000000  001117a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00114cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081e4 	.word	0x080081e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080081e4 	.word	0x080081e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_fmul>:
 8000ea4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ea8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eac:	bf1e      	ittt	ne
 8000eae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb2:	ea92 0f0c 	teqne	r2, ip
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d06f      	beq.n	8000f9c <__aeabi_fmul+0xf8>
 8000ebc:	441a      	add	r2, r3
 8000ebe:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec2:	0240      	lsls	r0, r0, #9
 8000ec4:	bf18      	it	ne
 8000ec6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000eca:	d01e      	beq.n	8000f0a <__aeabi_fmul+0x66>
 8000ecc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ed0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ed4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ed8:	fba0 3101 	umull	r3, r1, r0, r1
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ee4:	bf3e      	ittt	cc
 8000ee6:	0049      	lslcc	r1, r1, #1
 8000ee8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000eec:	005b      	lslcc	r3, r3, #1
 8000eee:	ea40 0001 	orr.w	r0, r0, r1
 8000ef2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ef6:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef8:	d81d      	bhi.n	8000f36 <__aeabi_fmul+0x92>
 8000efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000efe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f02:	bf08      	it	eq
 8000f04:	f020 0001 	biceq.w	r0, r0, #1
 8000f08:	4770      	bx	lr
 8000f0a:	f090 0f00 	teq	r0, #0
 8000f0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f12:	bf08      	it	eq
 8000f14:	0249      	lsleq	r1, r1, #9
 8000f16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000f1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000f20:	bfc2      	ittt	gt
 8000f22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2a:	4770      	bxgt	lr
 8000f2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	3a01      	subs	r2, #1
 8000f36:	dc5d      	bgt.n	8000ff4 <__aeabi_fmul+0x150>
 8000f38:	f112 0f19 	cmn.w	r2, #25
 8000f3c:	bfdc      	itt	le
 8000f3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000f42:	4770      	bxle	lr
 8000f44:	f1c2 0200 	rsb	r2, r2, #0
 8000f48:	0041      	lsls	r1, r0, #1
 8000f4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f4e:	f1c2 0220 	rsb	r2, r2, #32
 8000f52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f5a:	f140 0000 	adc.w	r0, r0, #0
 8000f5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f62:	bf08      	it	eq
 8000f64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f68:	4770      	bx	lr
 8000f6a:	f092 0f00 	teq	r2, #0
 8000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0040      	lsleq	r0, r0, #1
 8000f76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f7a:	3a01      	subeq	r2, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fmul+0xce>
 8000f7e:	ea40 000c 	orr.w	r0, r0, ip
 8000f82:	f093 0f00 	teq	r3, #0
 8000f86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0049      	lsleq	r1, r1, #1
 8000f8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f92:	3b01      	subeq	r3, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fmul+0xe6>
 8000f96:	ea41 010c 	orr.w	r1, r1, ip
 8000f9a:	e78f      	b.n	8000ebc <__aeabi_fmul+0x18>
 8000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	bf18      	it	ne
 8000fa6:	ea93 0f0c 	teqne	r3, ip
 8000faa:	d00a      	beq.n	8000fc2 <__aeabi_fmul+0x11e>
 8000fac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb0:	bf18      	it	ne
 8000fb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	d1d8      	bne.n	8000f6a <__aeabi_fmul+0xc6>
 8000fb8:	ea80 0001 	eor.w	r0, r0, r1
 8000fbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fc0:	4770      	bx	lr
 8000fc2:	f090 0f00 	teq	r0, #0
 8000fc6:	bf17      	itett	ne
 8000fc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000fcc:	4608      	moveq	r0, r1
 8000fce:	f091 0f00 	teqne	r1, #0
 8000fd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000fd6:	d014      	beq.n	8001002 <__aeabi_fmul+0x15e>
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d101      	bne.n	8000fe2 <__aeabi_fmul+0x13e>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	d10f      	bne.n	8001002 <__aeabi_fmul+0x15e>
 8000fe2:	ea93 0f0c 	teq	r3, ip
 8000fe6:	d103      	bne.n	8000ff0 <__aeabi_fmul+0x14c>
 8000fe8:	024b      	lsls	r3, r1, #9
 8000fea:	bf18      	it	ne
 8000fec:	4608      	movne	r0, r1
 8000fee:	d108      	bne.n	8001002 <__aeabi_fmul+0x15e>
 8000ff0:	ea80 0001 	eor.w	r0, r0, r1
 8000ff4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ff8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ffc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001000:	4770      	bx	lr
 8001002:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8001006:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800100a:	4770      	bx	lr

0800100c <__aeabi_fdiv>:
 800100c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8001010:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001014:	bf1e      	ittt	ne
 8001016:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800101a:	ea92 0f0c 	teqne	r2, ip
 800101e:	ea93 0f0c 	teqne	r3, ip
 8001022:	d069      	beq.n	80010f8 <__aeabi_fdiv+0xec>
 8001024:	eba2 0203 	sub.w	r2, r2, r3
 8001028:	ea80 0c01 	eor.w	ip, r0, r1
 800102c:	0249      	lsls	r1, r1, #9
 800102e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001032:	d037      	beq.n	80010a4 <__aeabi_fdiv+0x98>
 8001034:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001038:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800103c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001040:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8001044:	428b      	cmp	r3, r1
 8001046:	bf38      	it	cc
 8001048:	005b      	lslcc	r3, r3, #1
 800104a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800104e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001052:	428b      	cmp	r3, r1
 8001054:	bf24      	itt	cs
 8001056:	1a5b      	subcs	r3, r3, r1
 8001058:	ea40 000c 	orrcs.w	r0, r0, ip
 800105c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001060:	bf24      	itt	cs
 8001062:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001066:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800106a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800106e:	bf24      	itt	cs
 8001070:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001074:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001078:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800107c:	bf24      	itt	cs
 800107e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001082:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	bf18      	it	ne
 800108a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800108e:	d1e0      	bne.n	8001052 <__aeabi_fdiv+0x46>
 8001090:	2afd      	cmp	r2, #253	@ 0xfd
 8001092:	f63f af50 	bhi.w	8000f36 <__aeabi_fmul+0x92>
 8001096:	428b      	cmp	r3, r1
 8001098:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800109c:	bf08      	it	eq
 800109e:	f020 0001 	biceq.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80010a8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80010ac:	327f      	adds	r2, #127	@ 0x7f
 80010ae:	bfc2      	ittt	gt
 80010b0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80010b4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80010b8:	4770      	bxgt	lr
 80010ba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	3a01      	subs	r2, #1
 80010c4:	e737      	b.n	8000f36 <__aeabi_fmul+0x92>
 80010c6:	f092 0f00 	teq	r2, #0
 80010ca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80010ce:	bf02      	ittt	eq
 80010d0:	0040      	lsleq	r0, r0, #1
 80010d2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80010d6:	3a01      	subeq	r2, #1
 80010d8:	d0f9      	beq.n	80010ce <__aeabi_fdiv+0xc2>
 80010da:	ea40 000c 	orr.w	r0, r0, ip
 80010de:	f093 0f00 	teq	r3, #0
 80010e2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80010e6:	bf02      	ittt	eq
 80010e8:	0049      	lsleq	r1, r1, #1
 80010ea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010ee:	3b01      	subeq	r3, #1
 80010f0:	d0f9      	beq.n	80010e6 <__aeabi_fdiv+0xda>
 80010f2:	ea41 010c 	orr.w	r1, r1, ip
 80010f6:	e795      	b.n	8001024 <__aeabi_fdiv+0x18>
 80010f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010fc:	ea92 0f0c 	teq	r2, ip
 8001100:	d108      	bne.n	8001114 <__aeabi_fdiv+0x108>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	f47f af7d 	bne.w	8001002 <__aeabi_fmul+0x15e>
 8001108:	ea93 0f0c 	teq	r3, ip
 800110c:	f47f af70 	bne.w	8000ff0 <__aeabi_fmul+0x14c>
 8001110:	4608      	mov	r0, r1
 8001112:	e776      	b.n	8001002 <__aeabi_fmul+0x15e>
 8001114:	ea93 0f0c 	teq	r3, ip
 8001118:	d104      	bne.n	8001124 <__aeabi_fdiv+0x118>
 800111a:	024b      	lsls	r3, r1, #9
 800111c:	f43f af4c 	beq.w	8000fb8 <__aeabi_fmul+0x114>
 8001120:	4608      	mov	r0, r1
 8001122:	e76e      	b.n	8001002 <__aeabi_fmul+0x15e>
 8001124:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001128:	bf18      	it	ne
 800112a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800112e:	d1ca      	bne.n	80010c6 <__aeabi_fdiv+0xba>
 8001130:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001134:	f47f af5c 	bne.w	8000ff0 <__aeabi_fmul+0x14c>
 8001138:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800113c:	f47f af3c 	bne.w	8000fb8 <__aeabi_fmul+0x114>
 8001140:	e75f      	b.n	8001002 <__aeabi_fmul+0x15e>
 8001142:	bf00      	nop

08001144 <__aeabi_uldivmod>:
 8001144:	b953      	cbnz	r3, 800115c <__aeabi_uldivmod+0x18>
 8001146:	b94a      	cbnz	r2, 800115c <__aeabi_uldivmod+0x18>
 8001148:	2900      	cmp	r1, #0
 800114a:	bf08      	it	eq
 800114c:	2800      	cmpeq	r0, #0
 800114e:	bf1c      	itt	ne
 8001150:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001154:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001158:	f000 b9a0 	b.w	800149c <__aeabi_idiv0>
 800115c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001164:	f000 f83c 	bl	80011e0 <__udivmoddi4>
 8001168:	f8dd e004 	ldr.w	lr, [sp, #4]
 800116c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001170:	b004      	add	sp, #16
 8001172:	4770      	bx	lr

08001174 <__aeabi_d2lz>:
 8001174:	b538      	push	{r3, r4, r5, lr}
 8001176:	2200      	movs	r2, #0
 8001178:	2300      	movs	r3, #0
 800117a:	4604      	mov	r4, r0
 800117c:	460d      	mov	r5, r1
 800117e:	f7ff fcad 	bl	8000adc <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x1c>
 8001184:	4620      	mov	r0, r4
 8001186:	4629      	mov	r1, r5
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4620      	mov	r0, r4
 8001192:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <__aeabi_d2ulz+0x34>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff fa23 	bl	80005f8 <__aeabi_dmul>
 80011b2:	f7ff fcf9 	bl	8000ba8 <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f9a4 	bl	8000504 <__aeabi_ui2d>
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <__aeabi_d2ulz+0x38>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f7ff fa1a 	bl	80005f8 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7ff f85c 	bl	8000288 <__aeabi_dsub>
 80011d0:	f7ff fcea 	bl	8000ba8 <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <__udivmoddi4>:
 80011e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011e4:	9d08      	ldr	r5, [sp, #32]
 80011e6:	460c      	mov	r4, r1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d14e      	bne.n	800128a <__udivmoddi4+0xaa>
 80011ec:	4694      	mov	ip, r2
 80011ee:	458c      	cmp	ip, r1
 80011f0:	4686      	mov	lr, r0
 80011f2:	fab2 f282 	clz	r2, r2
 80011f6:	d962      	bls.n	80012be <__udivmoddi4+0xde>
 80011f8:	b14a      	cbz	r2, 800120e <__udivmoddi4+0x2e>
 80011fa:	f1c2 0320 	rsb	r3, r2, #32
 80011fe:	4091      	lsls	r1, r2
 8001200:	fa20 f303 	lsr.w	r3, r0, r3
 8001204:	fa0c fc02 	lsl.w	ip, ip, r2
 8001208:	4319      	orrs	r1, r3
 800120a:	fa00 fe02 	lsl.w	lr, r0, r2
 800120e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001212:	fa1f f68c 	uxth.w	r6, ip
 8001216:	fbb1 f4f7 	udiv	r4, r1, r7
 800121a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800121e:	fb07 1114 	mls	r1, r7, r4, r1
 8001222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001226:	fb04 f106 	mul.w	r1, r4, r6
 800122a:	4299      	cmp	r1, r3
 800122c:	d90a      	bls.n	8001244 <__udivmoddi4+0x64>
 800122e:	eb1c 0303 	adds.w	r3, ip, r3
 8001232:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8001236:	f080 8112 	bcs.w	800145e <__udivmoddi4+0x27e>
 800123a:	4299      	cmp	r1, r3
 800123c:	f240 810f 	bls.w	800145e <__udivmoddi4+0x27e>
 8001240:	3c02      	subs	r4, #2
 8001242:	4463      	add	r3, ip
 8001244:	1a59      	subs	r1, r3, r1
 8001246:	fa1f f38e 	uxth.w	r3, lr
 800124a:	fbb1 f0f7 	udiv	r0, r1, r7
 800124e:	fb07 1110 	mls	r1, r7, r0, r1
 8001252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001256:	fb00 f606 	mul.w	r6, r0, r6
 800125a:	429e      	cmp	r6, r3
 800125c:	d90a      	bls.n	8001274 <__udivmoddi4+0x94>
 800125e:	eb1c 0303 	adds.w	r3, ip, r3
 8001262:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8001266:	f080 80fc 	bcs.w	8001462 <__udivmoddi4+0x282>
 800126a:	429e      	cmp	r6, r3
 800126c:	f240 80f9 	bls.w	8001462 <__udivmoddi4+0x282>
 8001270:	4463      	add	r3, ip
 8001272:	3802      	subs	r0, #2
 8001274:	1b9b      	subs	r3, r3, r6
 8001276:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800127a:	2100      	movs	r1, #0
 800127c:	b11d      	cbz	r5, 8001286 <__udivmoddi4+0xa6>
 800127e:	40d3      	lsrs	r3, r2
 8001280:	2200      	movs	r2, #0
 8001282:	e9c5 3200 	strd	r3, r2, [r5]
 8001286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800128a:	428b      	cmp	r3, r1
 800128c:	d905      	bls.n	800129a <__udivmoddi4+0xba>
 800128e:	b10d      	cbz	r5, 8001294 <__udivmoddi4+0xb4>
 8001290:	e9c5 0100 	strd	r0, r1, [r5]
 8001294:	2100      	movs	r1, #0
 8001296:	4608      	mov	r0, r1
 8001298:	e7f5      	b.n	8001286 <__udivmoddi4+0xa6>
 800129a:	fab3 f183 	clz	r1, r3
 800129e:	2900      	cmp	r1, #0
 80012a0:	d146      	bne.n	8001330 <__udivmoddi4+0x150>
 80012a2:	42a3      	cmp	r3, r4
 80012a4:	d302      	bcc.n	80012ac <__udivmoddi4+0xcc>
 80012a6:	4290      	cmp	r0, r2
 80012a8:	f0c0 80f0 	bcc.w	800148c <__udivmoddi4+0x2ac>
 80012ac:	1a86      	subs	r6, r0, r2
 80012ae:	eb64 0303 	sbc.w	r3, r4, r3
 80012b2:	2001      	movs	r0, #1
 80012b4:	2d00      	cmp	r5, #0
 80012b6:	d0e6      	beq.n	8001286 <__udivmoddi4+0xa6>
 80012b8:	e9c5 6300 	strd	r6, r3, [r5]
 80012bc:	e7e3      	b.n	8001286 <__udivmoddi4+0xa6>
 80012be:	2a00      	cmp	r2, #0
 80012c0:	f040 8090 	bne.w	80013e4 <__udivmoddi4+0x204>
 80012c4:	eba1 040c 	sub.w	r4, r1, ip
 80012c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012cc:	fa1f f78c 	uxth.w	r7, ip
 80012d0:	2101      	movs	r1, #1
 80012d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80012d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012da:	fb08 4416 	mls	r4, r8, r6, r4
 80012de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012e2:	fb07 f006 	mul.w	r0, r7, r6
 80012e6:	4298      	cmp	r0, r3
 80012e8:	d908      	bls.n	80012fc <__udivmoddi4+0x11c>
 80012ea:	eb1c 0303 	adds.w	r3, ip, r3
 80012ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80012f2:	d202      	bcs.n	80012fa <__udivmoddi4+0x11a>
 80012f4:	4298      	cmp	r0, r3
 80012f6:	f200 80cd 	bhi.w	8001494 <__udivmoddi4+0x2b4>
 80012fa:	4626      	mov	r6, r4
 80012fc:	1a1c      	subs	r4, r3, r0
 80012fe:	fa1f f38e 	uxth.w	r3, lr
 8001302:	fbb4 f0f8 	udiv	r0, r4, r8
 8001306:	fb08 4410 	mls	r4, r8, r0, r4
 800130a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800130e:	fb00 f707 	mul.w	r7, r0, r7
 8001312:	429f      	cmp	r7, r3
 8001314:	d908      	bls.n	8001328 <__udivmoddi4+0x148>
 8001316:	eb1c 0303 	adds.w	r3, ip, r3
 800131a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800131e:	d202      	bcs.n	8001326 <__udivmoddi4+0x146>
 8001320:	429f      	cmp	r7, r3
 8001322:	f200 80b0 	bhi.w	8001486 <__udivmoddi4+0x2a6>
 8001326:	4620      	mov	r0, r4
 8001328:	1bdb      	subs	r3, r3, r7
 800132a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800132e:	e7a5      	b.n	800127c <__udivmoddi4+0x9c>
 8001330:	f1c1 0620 	rsb	r6, r1, #32
 8001334:	408b      	lsls	r3, r1
 8001336:	fa22 f706 	lsr.w	r7, r2, r6
 800133a:	431f      	orrs	r7, r3
 800133c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001340:	fa04 f301 	lsl.w	r3, r4, r1
 8001344:	ea43 030c 	orr.w	r3, r3, ip
 8001348:	40f4      	lsrs	r4, r6
 800134a:	fa00 f801 	lsl.w	r8, r0, r1
 800134e:	0c38      	lsrs	r0, r7, #16
 8001350:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001354:	fbb4 fef0 	udiv	lr, r4, r0
 8001358:	fa1f fc87 	uxth.w	ip, r7
 800135c:	fb00 441e 	mls	r4, r0, lr, r4
 8001360:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001364:	fb0e f90c 	mul.w	r9, lr, ip
 8001368:	45a1      	cmp	r9, r4
 800136a:	fa02 f201 	lsl.w	r2, r2, r1
 800136e:	d90a      	bls.n	8001386 <__udivmoddi4+0x1a6>
 8001370:	193c      	adds	r4, r7, r4
 8001372:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8001376:	f080 8084 	bcs.w	8001482 <__udivmoddi4+0x2a2>
 800137a:	45a1      	cmp	r9, r4
 800137c:	f240 8081 	bls.w	8001482 <__udivmoddi4+0x2a2>
 8001380:	f1ae 0e02 	sub.w	lr, lr, #2
 8001384:	443c      	add	r4, r7
 8001386:	eba4 0409 	sub.w	r4, r4, r9
 800138a:	fa1f f983 	uxth.w	r9, r3
 800138e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001392:	fb00 4413 	mls	r4, r0, r3, r4
 8001396:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800139a:	fb03 fc0c 	mul.w	ip, r3, ip
 800139e:	45a4      	cmp	ip, r4
 80013a0:	d907      	bls.n	80013b2 <__udivmoddi4+0x1d2>
 80013a2:	193c      	adds	r4, r7, r4
 80013a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80013a8:	d267      	bcs.n	800147a <__udivmoddi4+0x29a>
 80013aa:	45a4      	cmp	ip, r4
 80013ac:	d965      	bls.n	800147a <__udivmoddi4+0x29a>
 80013ae:	3b02      	subs	r3, #2
 80013b0:	443c      	add	r4, r7
 80013b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80013b6:	fba0 9302 	umull	r9, r3, r0, r2
 80013ba:	eba4 040c 	sub.w	r4, r4, ip
 80013be:	429c      	cmp	r4, r3
 80013c0:	46ce      	mov	lr, r9
 80013c2:	469c      	mov	ip, r3
 80013c4:	d351      	bcc.n	800146a <__udivmoddi4+0x28a>
 80013c6:	d04e      	beq.n	8001466 <__udivmoddi4+0x286>
 80013c8:	b155      	cbz	r5, 80013e0 <__udivmoddi4+0x200>
 80013ca:	ebb8 030e 	subs.w	r3, r8, lr
 80013ce:	eb64 040c 	sbc.w	r4, r4, ip
 80013d2:	fa04 f606 	lsl.w	r6, r4, r6
 80013d6:	40cb      	lsrs	r3, r1
 80013d8:	431e      	orrs	r6, r3
 80013da:	40cc      	lsrs	r4, r1
 80013dc:	e9c5 6400 	strd	r6, r4, [r5]
 80013e0:	2100      	movs	r1, #0
 80013e2:	e750      	b.n	8001286 <__udivmoddi4+0xa6>
 80013e4:	f1c2 0320 	rsb	r3, r2, #32
 80013e8:	fa20 f103 	lsr.w	r1, r0, r3
 80013ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80013f0:	fa24 f303 	lsr.w	r3, r4, r3
 80013f4:	4094      	lsls	r4, r2
 80013f6:	430c      	orrs	r4, r1
 80013f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8001400:	fa1f f78c 	uxth.w	r7, ip
 8001404:	fbb3 f0f8 	udiv	r0, r3, r8
 8001408:	fb08 3110 	mls	r1, r8, r0, r3
 800140c:	0c23      	lsrs	r3, r4, #16
 800140e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001412:	fb00 f107 	mul.w	r1, r0, r7
 8001416:	4299      	cmp	r1, r3
 8001418:	d908      	bls.n	800142c <__udivmoddi4+0x24c>
 800141a:	eb1c 0303 	adds.w	r3, ip, r3
 800141e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001422:	d22c      	bcs.n	800147e <__udivmoddi4+0x29e>
 8001424:	4299      	cmp	r1, r3
 8001426:	d92a      	bls.n	800147e <__udivmoddi4+0x29e>
 8001428:	3802      	subs	r0, #2
 800142a:	4463      	add	r3, ip
 800142c:	1a5b      	subs	r3, r3, r1
 800142e:	b2a4      	uxth	r4, r4
 8001430:	fbb3 f1f8 	udiv	r1, r3, r8
 8001434:	fb08 3311 	mls	r3, r8, r1, r3
 8001438:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800143c:	fb01 f307 	mul.w	r3, r1, r7
 8001440:	42a3      	cmp	r3, r4
 8001442:	d908      	bls.n	8001456 <__udivmoddi4+0x276>
 8001444:	eb1c 0404 	adds.w	r4, ip, r4
 8001448:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800144c:	d213      	bcs.n	8001476 <__udivmoddi4+0x296>
 800144e:	42a3      	cmp	r3, r4
 8001450:	d911      	bls.n	8001476 <__udivmoddi4+0x296>
 8001452:	3902      	subs	r1, #2
 8001454:	4464      	add	r4, ip
 8001456:	1ae4      	subs	r4, r4, r3
 8001458:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800145c:	e739      	b.n	80012d2 <__udivmoddi4+0xf2>
 800145e:	4604      	mov	r4, r0
 8001460:	e6f0      	b.n	8001244 <__udivmoddi4+0x64>
 8001462:	4608      	mov	r0, r1
 8001464:	e706      	b.n	8001274 <__udivmoddi4+0x94>
 8001466:	45c8      	cmp	r8, r9
 8001468:	d2ae      	bcs.n	80013c8 <__udivmoddi4+0x1e8>
 800146a:	ebb9 0e02 	subs.w	lr, r9, r2
 800146e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001472:	3801      	subs	r0, #1
 8001474:	e7a8      	b.n	80013c8 <__udivmoddi4+0x1e8>
 8001476:	4631      	mov	r1, r6
 8001478:	e7ed      	b.n	8001456 <__udivmoddi4+0x276>
 800147a:	4603      	mov	r3, r0
 800147c:	e799      	b.n	80013b2 <__udivmoddi4+0x1d2>
 800147e:	4630      	mov	r0, r6
 8001480:	e7d4      	b.n	800142c <__udivmoddi4+0x24c>
 8001482:	46d6      	mov	lr, sl
 8001484:	e77f      	b.n	8001386 <__udivmoddi4+0x1a6>
 8001486:	4463      	add	r3, ip
 8001488:	3802      	subs	r0, #2
 800148a:	e74d      	b.n	8001328 <__udivmoddi4+0x148>
 800148c:	4606      	mov	r6, r0
 800148e:	4623      	mov	r3, r4
 8001490:	4608      	mov	r0, r1
 8001492:	e70f      	b.n	80012b4 <__udivmoddi4+0xd4>
 8001494:	3e02      	subs	r6, #2
 8001496:	4463      	add	r3, ip
 8001498:	e730      	b.n	80012fc <__udivmoddi4+0x11c>
 800149a:	bf00      	nop

0800149c <__aeabi_idiv0>:
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop

080014a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a6:	f000 fb67 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014aa:	f000 f863 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ae:	f000 f947 	bl	8001740 <MX_GPIO_Init>
  MX_ADC1_Init();
 80014b2:	f000 f8c9 	bl	8001648 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80014b6:	f000 f919 	bl	80016ec <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80014ba:	4826      	ldr	r0, [pc, #152]	@ (8001554 <main+0xb4>)
 80014bc:	f000 fc32 	bl	8001d24 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014c4:	4823      	ldr	r0, [pc, #140]	@ (8001554 <main+0xb4>)
 80014c6:	f000 fd31 	bl	8001f2c <HAL_ADC_PollForConversion>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d139      	bne.n	8001544 <main+0xa4>
	  {
	       // Get the ADC value
		  adc_value = HAL_ADC_GetValue(&hadc1);
 80014d0:	4820      	ldr	r0, [pc, #128]	@ (8001554 <main+0xb4>)
 80014d2:	f000 fdb6 	bl	8002042 <HAL_ADC_GetValue>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001558 <main+0xb8>)
 80014da:	6013      	str	r3, [r2, #0]
	       // Convert ADC value to string
		  float voltage = (adc_value / 4095.0f) * 3.3f;  // 3.3V reference voltage
 80014dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <main+0xb8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fc87 	bl	8000df4 <__aeabi_ui2f>
 80014e6:	4603      	mov	r3, r0
 80014e8:	491c      	ldr	r1, [pc, #112]	@ (800155c <main+0xbc>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fd8e 	bl	800100c <__aeabi_fdiv>
 80014f0:	4603      	mov	r3, r0
 80014f2:	491b      	ldr	r1, [pc, #108]	@ (8001560 <main+0xc0>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fcd5 	bl	8000ea4 <__aeabi_fmul>
 80014fa:	4603      	mov	r3, r0
 80014fc:	607b      	str	r3, [r7, #4]
		  sprintf(Msg, "Gas Level %ld ppm and Voltage: %.2fV\r\n", adc_value,voltage);
 80014fe:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <main+0xb8>)
 8001500:	681c      	ldr	r4, [r3, #0]
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff f820 	bl	8000548 <__aeabi_f2d>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	e9cd 2300 	strd	r2, r3, [sp]
 8001510:	4622      	mov	r2, r4
 8001512:	4914      	ldr	r1, [pc, #80]	@ (8001564 <main+0xc4>)
 8001514:	4814      	ldr	r0, [pc, #80]	@ (8001568 <main+0xc8>)
 8001516:	f003 fa45 	bl	80049a4 <siprintf>
		  if(adc_value>2000){
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <main+0xb8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001522:	d904      	bls.n	800152e <main+0x8e>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001524:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001528:	4810      	ldr	r0, [pc, #64]	@ (800156c <main+0xcc>)
 800152a:	f001 fa4b 	bl	80029c4 <HAL_GPIO_TogglePin>
		  }
//	       sprintf(Msg, "Gas Level: %lu\r\n", adc_value);
	       // Transmit over UART
	       HAL_UART_Transmit(&huart2, (uint8_t*)Msg, strlen(Msg), HAL_MAX_DELAY);
 800152e:	480e      	ldr	r0, [pc, #56]	@ (8001568 <main+0xc8>)
 8001530:	f7fe fe9e 	bl	8000270 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	b29a      	uxth	r2, r3
 8001538:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800153c:	490a      	ldr	r1, [pc, #40]	@ (8001568 <main+0xc8>)
 800153e:	480c      	ldr	r0, [pc, #48]	@ (8001570 <main+0xd0>)
 8001540:	f001 ff46 	bl	80033d0 <HAL_UART_Transmit>
	    }
	    HAL_ADC_Stop(&hadc1);
 8001544:	4803      	ldr	r0, [pc, #12]	@ (8001554 <main+0xb4>)
 8001546:	f000 fcbf 	bl	8001ec8 <HAL_ADC_Stop>
        HAL_Delay(1000); // Delay 1 second
 800154a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800154e:	f000 fb81 	bl	8001c54 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001552:	e7b2      	b.n	80014ba <main+0x1a>
 8001554:	200001f0 	.word	0x200001f0
 8001558:	20000280 	.word	0x20000280
 800155c:	457ff000 	.word	0x457ff000
 8001560:	40533333 	.word	0x40533333
 8001564:	08008200 	.word	0x08008200
 8001568:	20000284 	.word	0x20000284
 800156c:	40020c00 	.word	0x40020c00
 8001570:	20000238 	.word	0x20000238

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b094      	sub	sp, #80	@ 0x50
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0320 	add.w	r3, r7, #32
 800157e:	2230      	movs	r2, #48	@ 0x30
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f003 fa71 	bl	8004a6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	4b28      	ldr	r3, [pc, #160]	@ (8001640 <SystemClock_Config+0xcc>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a0:	4a27      	ldr	r2, [pc, #156]	@ (8001640 <SystemClock_Config+0xcc>)
 80015a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a8:	4b25      	ldr	r3, [pc, #148]	@ (8001640 <SystemClock_Config+0xcc>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <SystemClock_Config+0xd0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a21      	ldr	r2, [pc, #132]	@ (8001644 <SystemClock_Config+0xd0>)
 80015be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <SystemClock_Config+0xd0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d0:	2302      	movs	r3, #2
 80015d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d4:	2301      	movs	r3, #1
 80015d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d8:	2310      	movs	r3, #16
 80015da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015dc:	2302      	movs	r3, #2
 80015de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015e0:	2300      	movs	r3, #0
 80015e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015e4:	2308      	movs	r3, #8
 80015e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80015e8:	2332      	movs	r3, #50	@ 0x32
 80015ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015ec:	2304      	movs	r3, #4
 80015ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015f0:	2307      	movs	r3, #7
 80015f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f4:	f107 0320 	add.w	r3, r7, #32
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 f9fd 	bl	80029f8 <HAL_RCC_OscConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001604:	f000 f8e0 	bl	80017c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001608:	230f      	movs	r3, #15
 800160a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160c:	2302      	movs	r3, #2
 800160e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001614:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800161a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f001 fc5e 	bl	8002ee8 <HAL_RCC_ClockConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001632:	f000 f8c9 	bl	80017c8 <Error_Handler>
  }
}
 8001636:	bf00      	nop
 8001638:	3750      	adds	r7, #80	@ 0x50
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40007000 	.word	0x40007000

08001648 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800164e:	463b      	mov	r3, r7
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800165a:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <MX_ADC1_Init+0x98>)
 800165c:	4a21      	ldr	r2, [pc, #132]	@ (80016e4 <MX_ADC1_Init+0x9c>)
 800165e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001660:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <MX_ADC1_Init+0x98>)
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001666:	4b1e      	ldr	r3, [pc, #120]	@ (80016e0 <MX_ADC1_Init+0x98>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800166c:	4b1c      	ldr	r3, [pc, #112]	@ (80016e0 <MX_ADC1_Init+0x98>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001672:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <MX_ADC1_Init+0x98>)
 8001674:	2200      	movs	r2, #0
 8001676:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001678:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <MX_ADC1_Init+0x98>)
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001680:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <MX_ADC1_Init+0x98>)
 8001682:	2200      	movs	r2, #0
 8001684:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001686:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <MX_ADC1_Init+0x98>)
 8001688:	4a17      	ldr	r2, [pc, #92]	@ (80016e8 <MX_ADC1_Init+0xa0>)
 800168a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800168c:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <MX_ADC1_Init+0x98>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001692:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <MX_ADC1_Init+0x98>)
 8001694:	2201      	movs	r2, #1
 8001696:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <MX_ADC1_Init+0x98>)
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <MX_ADC1_Init+0x98>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016a6:	480e      	ldr	r0, [pc, #56]	@ (80016e0 <MX_ADC1_Init+0x98>)
 80016a8:	f000 faf8 	bl	8001c9c <HAL_ADC_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80016b2:	f000 f889 	bl	80017c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016ba:	2301      	movs	r3, #1
 80016bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c2:	463b      	mov	r3, r7
 80016c4:	4619      	mov	r1, r3
 80016c6:	4806      	ldr	r0, [pc, #24]	@ (80016e0 <MX_ADC1_Init+0x98>)
 80016c8:	f000 fcc8 	bl	800205c <HAL_ADC_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80016d2:	f000 f879 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200001f0 	.word	0x200001f0
 80016e4:	40012000 	.word	0x40012000
 80016e8:	0f000001 	.word	0x0f000001

080016ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <MX_USART2_UART_Init+0x4c>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	@ (800173c <MX_USART2_UART_Init+0x50>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <MX_USART2_UART_Init+0x4c>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <MX_USART2_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <MX_USART2_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <MX_USART2_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <MX_USART2_UART_Init+0x4c>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <MX_USART2_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <MX_USART2_UART_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	@ (8001738 <MX_USART2_UART_Init+0x4c>)
 8001724:	f001 fe04 	bl	8003330 <HAL_UART_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800172e:	f000 f84b 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000238 	.word	0x20000238
 800173c:	40004400 	.word	0x40004400

08001740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <MX_GPIO_Init+0x80>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a18      	ldr	r2, [pc, #96]	@ (80017c0 <MX_GPIO_Init+0x80>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <MX_GPIO_Init+0x80>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <MX_GPIO_Init+0x80>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a11      	ldr	r2, [pc, #68]	@ (80017c0 <MX_GPIO_Init+0x80>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <MX_GPIO_Init+0x80>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001794:	480b      	ldr	r0, [pc, #44]	@ (80017c4 <MX_GPIO_Init+0x84>)
 8001796:	f001 f8fd 	bl	8002994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800179a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800179e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	4619      	mov	r1, r3
 80017b2:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <MX_GPIO_Init+0x84>)
 80017b4:	f000 ff54 	bl	8002660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020c00 	.word	0x40020c00

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
}
 80017ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <Error_Handler+0x8>

080017d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <HAL_MspInit+0x4c>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001820 <HAL_MspInit+0x4c>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001820 <HAL_MspInit+0x4c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <HAL_MspInit+0x4c>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	4a08      	ldr	r2, [pc, #32]	@ (8001820 <HAL_MspInit+0x4c>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001804:	6413      	str	r3, [r2, #64]	@ 0x40
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_MspInit+0x4c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001812:	2007      	movs	r0, #7
 8001814:	f000 fef0 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800

08001824 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	@ 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a17      	ldr	r2, [pc, #92]	@ (80018a0 <HAL_ADC_MspInit+0x7c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d127      	bne.n	8001896 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <HAL_ADC_MspInit+0x80>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	4a15      	ldr	r2, [pc, #84]	@ (80018a4 <HAL_ADC_MspInit+0x80>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001854:	6453      	str	r3, [r2, #68]	@ 0x44
 8001856:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <HAL_ADC_MspInit+0x80>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <HAL_ADC_MspInit+0x80>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a0e      	ldr	r2, [pc, #56]	@ (80018a4 <HAL_ADC_MspInit+0x80>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <HAL_ADC_MspInit+0x80>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800187e:	2301      	movs	r3, #1
 8001880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001882:	2303      	movs	r3, #3
 8001884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <HAL_ADC_MspInit+0x84>)
 8001892:	f000 fee5 	bl	8002660 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40012000 	.word	0x40012000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000

080018ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	@ 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a19      	ldr	r2, [pc, #100]	@ (8001930 <HAL_UART_MspInit+0x84>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d12b      	bne.n	8001926 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <HAL_UART_MspInit+0x88>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	4a17      	ldr	r2, [pc, #92]	@ (8001934 <HAL_UART_MspInit+0x88>)
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <HAL_UART_MspInit+0x88>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <HAL_UART_MspInit+0x88>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a10      	ldr	r2, [pc, #64]	@ (8001934 <HAL_UART_MspInit+0x88>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <HAL_UART_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001906:	230c      	movs	r3, #12
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001916:	2307      	movs	r3, #7
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	@ (8001938 <HAL_UART_MspInit+0x8c>)
 8001922:	f000 fe9d 	bl	8002660 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	@ 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40004400 	.word	0x40004400
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <NMI_Handler+0x4>

08001944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <MemManage_Handler+0x4>

08001954 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <UsageFault_Handler+0x4>

08001964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198c:	f000 f946 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}

08001994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return 1;
 8001998:	2301      	movs	r3, #1
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <_kill>:

int _kill(int pid, int sig)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ac:	f003 f8b0 	bl	8004b10 <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2216      	movs	r2, #22
 80019b4:	601a      	str	r2, [r3, #0]
  return -1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_exit>:

void _exit (int status)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019ca:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffe7 	bl	80019a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <_exit+0x12>

080019d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e00a      	b.n	8001a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ea:	f3af 8000 	nop.w
 80019ee:	4601      	mov	r1, r0
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60ba      	str	r2, [r7, #8]
 80019f6:	b2ca      	uxtb	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbf0      	blt.n	80019ea <_read+0x12>
  }

  return len;
 8001a08:	687b      	ldr	r3, [r7, #4]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e009      	b.n	8001a38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf1      	blt.n	8001a24 <_write+0x12>
  }
  return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_close>:

int _close(int file)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a70:	605a      	str	r2, [r3, #4]
  return 0;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <_isatty>:

int _isatty(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
	...

08001aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab4:	4a14      	ldr	r2, [pc, #80]	@ (8001b08 <_sbrk+0x5c>)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <_sbrk+0x60>)
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac0:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <_sbrk+0x64>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <_sbrk+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d207      	bcs.n	8001aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001adc:	f003 f818 	bl	8004b10 <__errno>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aea:	e009      	b.n	8001b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af2:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <_sbrk+0x64>)
 8001afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afe:	68fb      	ldr	r3, [r7, #12]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20020000 	.word	0x20020000
 8001b0c:	00000400 	.word	0x00000400
 8001b10:	200002b8 	.word	0x200002b8
 8001b14:	20000410 	.word	0x20000410

08001b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b28:	f7ff fff6 	bl	8001b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b2c:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b2e:	490d      	ldr	r1, [pc, #52]	@ (8001b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b44:	4c0a      	ldr	r4, [pc, #40]	@ (8001b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b52:	f002 ffe3 	bl	8004b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b56:	f7ff fca3 	bl	80014a0 <main>
  bx  lr    
 8001b5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b68:	08008680 	.word	0x08008680
  ldr r2, =_sbss
 8001b6c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b70:	2000040c 	.word	0x2000040c

08001b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <HAL_Init+0x40>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb8 <HAL_Init+0x40>)
 8001b8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	@ (8001bb8 <HAL_Init+0x40>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 fd29 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 f808 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bac:	f7ff fe12 	bl	80017d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <HAL_InitTick+0x54>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <HAL_InitTick+0x58>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fd33 	bl	8002646 <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d80a      	bhi.n	8001c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bf8:	f000 fd09 	bl	800260e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	@ (8001c18 <HAL_InitTick+0x5c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000008 	.word	0x20000008
 8001c18:	20000004 	.word	0x20000004

08001c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_IncTick+0x1c>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <HAL_IncTick+0x20>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a03      	ldr	r2, [pc, #12]	@ (8001c3c <HAL_IncTick+0x20>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	200002bc 	.word	0x200002bc

08001c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return uwTick;
 8001c44:	4b02      	ldr	r3, [pc, #8]	@ (8001c50 <HAL_GetTick+0x10>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	200002bc 	.word	0x200002bc

08001c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff fff0 	bl	8001c40 <HAL_GetTick>
 8001c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c6c:	d005      	beq.n	8001c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <HAL_Delay+0x44>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c7a:	bf00      	nop
 8001c7c:	f7ff ffe0 	bl	8001c40 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d8f7      	bhi.n	8001c7c <HAL_Delay+0x28>
  {
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000008 	.word	0x20000008

08001c9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e033      	b.n	8001d1a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff fdb2 	bl	8001824 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d118      	bne.n	8001d0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ce2:	f023 0302 	bic.w	r3, r3, #2
 8001ce6:	f043 0202 	orr.w	r2, r3, #2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fad6 	bl	80022a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	f023 0303 	bic.w	r3, r3, #3
 8001d02:	f043 0201 	orr.w	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d0a:	e001      	b.n	8001d10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_Start+0x1a>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e0b2      	b.n	8001ea4 <HAL_ADC_Start+0x180>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d018      	beq.n	8001d86 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d64:	4b52      	ldr	r3, [pc, #328]	@ (8001eb0 <HAL_ADC_Start+0x18c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a52      	ldr	r2, [pc, #328]	@ (8001eb4 <HAL_ADC_Start+0x190>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0c9a      	lsrs	r2, r3, #18
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d78:	e002      	b.n	8001d80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f9      	bne.n	8001d7a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d17a      	bne.n	8001e8a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dbe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dd2:	d106      	bne.n	8001de2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd8:	f023 0206 	bic.w	r2, r3, #6
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	645a      	str	r2, [r3, #68]	@ 0x44
 8001de0:	e002      	b.n	8001de8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001df0:	4b31      	ldr	r3, [pc, #196]	@ (8001eb8 <HAL_ADC_Start+0x194>)
 8001df2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001dfc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d12a      	bne.n	8001e60 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a2b      	ldr	r2, [pc, #172]	@ (8001ebc <HAL_ADC_Start+0x198>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d015      	beq.n	8001e40 <HAL_ADC_Start+0x11c>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a29      	ldr	r2, [pc, #164]	@ (8001ec0 <HAL_ADC_Start+0x19c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d105      	bne.n	8001e2a <HAL_ADC_Start+0x106>
 8001e1e:	4b26      	ldr	r3, [pc, #152]	@ (8001eb8 <HAL_ADC_Start+0x194>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00a      	beq.n	8001e40 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a25      	ldr	r2, [pc, #148]	@ (8001ec4 <HAL_ADC_Start+0x1a0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d136      	bne.n	8001ea2 <HAL_ADC_Start+0x17e>
 8001e34:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_ADC_Start+0x194>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d130      	bne.n	8001ea2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d129      	bne.n	8001ea2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	e020      	b.n	8001ea2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a15      	ldr	r2, [pc, #84]	@ (8001ebc <HAL_ADC_Start+0x198>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d11b      	bne.n	8001ea2 <HAL_ADC_Start+0x17e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d114      	bne.n	8001ea2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	e00b      	b.n	8001ea2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f043 0210 	orr.w	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f043 0201 	orr.w	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	431bde83 	.word	0x431bde83
 8001eb8:	40012300 	.word	0x40012300
 8001ebc:	40012000 	.word	0x40012000
 8001ec0:	40012100 	.word	0x40012100
 8001ec4:	40012200 	.word	0x40012200

08001ec8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_Stop+0x16>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e021      	b.n	8001f22 <HAL_ADC_Stop+0x5a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d109      	bne.n	8001f18 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f48:	d113      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f58:	d10b      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	f043 0220 	orr.w	r2, r3, #32
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e063      	b.n	800203a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f72:	f7ff fe65 	bl	8001c40 <HAL_GetTick>
 8001f76:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f78:	e021      	b.n	8001fbe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f80:	d01d      	beq.n	8001fbe <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <HAL_ADC_PollForConversion+0x6c>
 8001f88:	f7ff fe5a 	bl	8001c40 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d212      	bcs.n	8001fbe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d00b      	beq.n	8001fbe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f043 0204 	orr.w	r2, r3, #4
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e03d      	b.n	800203a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d1d6      	bne.n	8001f7a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0212 	mvn.w	r2, #18
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d123      	bne.n	8002038 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d11f      	bne.n	8002038 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002002:	2b00      	cmp	r3, #0
 8002004:	d006      	beq.n	8002014 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002010:	2b00      	cmp	r3, #0
 8002012:	d111      	bne.n	8002038 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
	...

0800205c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1c>
 8002074:	2302      	movs	r3, #2
 8002076:	e105      	b.n	8002284 <HAL_ADC_ConfigChannel+0x228>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b09      	cmp	r3, #9
 8002086:	d925      	bls.n	80020d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68d9      	ldr	r1, [r3, #12]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	3b1e      	subs	r3, #30
 800209e:	2207      	movs	r2, #7
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43da      	mvns	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	400a      	ands	r2, r1
 80020ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68d9      	ldr	r1, [r3, #12]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	4603      	mov	r3, r0
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4403      	add	r3, r0
 80020c6:	3b1e      	subs	r3, #30
 80020c8:	409a      	lsls	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	e022      	b.n	800211a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6919      	ldr	r1, [r3, #16]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	2207      	movs	r2, #7
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	400a      	ands	r2, r1
 80020f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6919      	ldr	r1, [r3, #16]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	4618      	mov	r0, r3
 800210a:	4603      	mov	r3, r0
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4403      	add	r3, r0
 8002110:	409a      	lsls	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b06      	cmp	r3, #6
 8002120:	d824      	bhi.n	800216c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3b05      	subs	r3, #5
 8002134:	221f      	movs	r2, #31
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	400a      	ands	r2, r1
 8002142:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	3b05      	subs	r3, #5
 800215e:	fa00 f203 	lsl.w	r2, r0, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	635a      	str	r2, [r3, #52]	@ 0x34
 800216a:	e04c      	b.n	8002206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b0c      	cmp	r3, #12
 8002172:	d824      	bhi.n	80021be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	3b23      	subs	r3, #35	@ 0x23
 8002186:	221f      	movs	r2, #31
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43da      	mvns	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	400a      	ands	r2, r1
 8002194:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	3b23      	subs	r3, #35	@ 0x23
 80021b0:	fa00 f203 	lsl.w	r2, r0, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80021bc:	e023      	b.n	8002206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	3b41      	subs	r3, #65	@ 0x41
 80021d0:	221f      	movs	r2, #31
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	400a      	ands	r2, r1
 80021de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	3b41      	subs	r3, #65	@ 0x41
 80021fa:	fa00 f203 	lsl.w	r2, r0, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002206:	4b22      	ldr	r3, [pc, #136]	@ (8002290 <HAL_ADC_ConfigChannel+0x234>)
 8002208:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a21      	ldr	r2, [pc, #132]	@ (8002294 <HAL_ADC_ConfigChannel+0x238>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d109      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1cc>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b12      	cmp	r3, #18
 800221a:	d105      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a19      	ldr	r2, [pc, #100]	@ (8002294 <HAL_ADC_ConfigChannel+0x238>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d123      	bne.n	800227a <HAL_ADC_ConfigChannel+0x21e>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b10      	cmp	r3, #16
 8002238:	d003      	beq.n	8002242 <HAL_ADC_ConfigChannel+0x1e6>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b11      	cmp	r3, #17
 8002240:	d11b      	bne.n	800227a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b10      	cmp	r3, #16
 8002254:	d111      	bne.n	800227a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <HAL_ADC_ConfigChannel+0x23c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a10      	ldr	r2, [pc, #64]	@ (800229c <HAL_ADC_ConfigChannel+0x240>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	0c9a      	lsrs	r2, r3, #18
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800226c:	e002      	b.n	8002274 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	3b01      	subs	r3, #1
 8002272:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f9      	bne.n	800226e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40012300 	.word	0x40012300
 8002294:	40012000 	.word	0x40012000
 8002298:	20000000 	.word	0x20000000
 800229c:	431bde83 	.word	0x431bde83

080022a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a8:	4b79      	ldr	r3, [pc, #484]	@ (8002490 <ADC_Init+0x1f0>)
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	021a      	lsls	r2, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80022f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800231a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6899      	ldr	r1, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002332:	4a58      	ldr	r2, [pc, #352]	@ (8002494 <ADC_Init+0x1f4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d022      	beq.n	800237e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002346:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6899      	ldr	r1, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6899      	ldr	r1, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	e00f      	b.n	800239e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800238c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800239c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0202 	bic.w	r2, r2, #2
 80023ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7e1b      	ldrb	r3, [r3, #24]
 80023b8:	005a      	lsls	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01b      	beq.n	8002404 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80023ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6859      	ldr	r1, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	3b01      	subs	r3, #1
 80023f8:	035a      	lsls	r2, r3, #13
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	e007      	b.n	8002414 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002412:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002422:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	3b01      	subs	r3, #1
 8002430:	051a      	lsls	r2, r3, #20
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6899      	ldr	r1, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002456:	025a      	lsls	r2, r3, #9
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800246e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6899      	ldr	r1, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	029a      	lsls	r2, r3, #10
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40012300 	.word	0x40012300
 8002494:	0f000001 	.word	0x0f000001

08002498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a8:	4b0c      	ldr	r3, [pc, #48]	@ (80024dc <__NVIC_SetPriorityGrouping+0x44>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024b4:	4013      	ands	r3, r2
 80024b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ca:	4a04      	ldr	r2, [pc, #16]	@ (80024dc <__NVIC_SetPriorityGrouping+0x44>)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	60d3      	str	r3, [r2, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e4:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <__NVIC_GetPriorityGrouping+0x18>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	f003 0307 	and.w	r3, r3, #7
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	6039      	str	r1, [r7, #0]
 8002506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250c:	2b00      	cmp	r3, #0
 800250e:	db0a      	blt.n	8002526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	b2da      	uxtb	r2, r3
 8002514:	490c      	ldr	r1, [pc, #48]	@ (8002548 <__NVIC_SetPriority+0x4c>)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	0112      	lsls	r2, r2, #4
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	440b      	add	r3, r1
 8002520:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002524:	e00a      	b.n	800253c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4908      	ldr	r1, [pc, #32]	@ (800254c <__NVIC_SetPriority+0x50>)
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	3b04      	subs	r3, #4
 8002534:	0112      	lsls	r2, r2, #4
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	440b      	add	r3, r1
 800253a:	761a      	strb	r2, [r3, #24]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000e100 	.word	0xe000e100
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	@ 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f1c3 0307 	rsb	r3, r3, #7
 800256a:	2b04      	cmp	r3, #4
 800256c:	bf28      	it	cs
 800256e:	2304      	movcs	r3, #4
 8002570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3304      	adds	r3, #4
 8002576:	2b06      	cmp	r3, #6
 8002578:	d902      	bls.n	8002580 <NVIC_EncodePriority+0x30>
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3b03      	subs	r3, #3
 800257e:	e000      	b.n	8002582 <NVIC_EncodePriority+0x32>
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	401a      	ands	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002598:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fa01 f303 	lsl.w	r3, r1, r3
 80025a2:	43d9      	mvns	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	4313      	orrs	r3, r2
         );
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3724      	adds	r7, #36	@ 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025d8:	f7ff ff90 	bl	80024fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	@ (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff49 	bl	8002498 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff5e 	bl	80024e0 <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff90 	bl	8002550 <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff5f 	bl	80024fc <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ffb0 	bl	80025b4 <SysTick_Config>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	@ 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	e16b      	b.n	8002954 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800267c:	2201      	movs	r2, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	429a      	cmp	r2, r3
 8002696:	f040 815a 	bne.w	800294e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d005      	beq.n	80026b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d130      	bne.n	8002714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	2203      	movs	r2, #3
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4013      	ands	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e8:	2201      	movs	r2, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 0201 	and.w	r2, r3, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	2b03      	cmp	r3, #3
 800271e:	d017      	beq.n	8002750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2203      	movs	r2, #3
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d123      	bne.n	80027a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	08da      	lsrs	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3208      	adds	r2, #8
 8002764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	08da      	lsrs	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3208      	adds	r2, #8
 800279e:	69b9      	ldr	r1, [r7, #24]
 80027a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0203 	and.w	r2, r3, #3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80b4 	beq.w	800294e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002968 <HAL_GPIO_Init+0x308>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002968 <HAL_GPIO_Init+0x308>)
 80027f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002968 <HAL_GPIO_Init+0x308>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002802:	4a5a      	ldr	r2, [pc, #360]	@ (800296c <HAL_GPIO_Init+0x30c>)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	3302      	adds	r3, #2
 800280a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	220f      	movs	r2, #15
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a51      	ldr	r2, [pc, #324]	@ (8002970 <HAL_GPIO_Init+0x310>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d02b      	beq.n	8002886 <HAL_GPIO_Init+0x226>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a50      	ldr	r2, [pc, #320]	@ (8002974 <HAL_GPIO_Init+0x314>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d025      	beq.n	8002882 <HAL_GPIO_Init+0x222>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4f      	ldr	r2, [pc, #316]	@ (8002978 <HAL_GPIO_Init+0x318>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d01f      	beq.n	800287e <HAL_GPIO_Init+0x21e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4e      	ldr	r2, [pc, #312]	@ (800297c <HAL_GPIO_Init+0x31c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d019      	beq.n	800287a <HAL_GPIO_Init+0x21a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4d      	ldr	r2, [pc, #308]	@ (8002980 <HAL_GPIO_Init+0x320>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0x216>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4c      	ldr	r2, [pc, #304]	@ (8002984 <HAL_GPIO_Init+0x324>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00d      	beq.n	8002872 <HAL_GPIO_Init+0x212>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4b      	ldr	r2, [pc, #300]	@ (8002988 <HAL_GPIO_Init+0x328>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <HAL_GPIO_Init+0x20e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4a      	ldr	r2, [pc, #296]	@ (800298c <HAL_GPIO_Init+0x32c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_GPIO_Init+0x20a>
 8002866:	2307      	movs	r3, #7
 8002868:	e00e      	b.n	8002888 <HAL_GPIO_Init+0x228>
 800286a:	2308      	movs	r3, #8
 800286c:	e00c      	b.n	8002888 <HAL_GPIO_Init+0x228>
 800286e:	2306      	movs	r3, #6
 8002870:	e00a      	b.n	8002888 <HAL_GPIO_Init+0x228>
 8002872:	2305      	movs	r3, #5
 8002874:	e008      	b.n	8002888 <HAL_GPIO_Init+0x228>
 8002876:	2304      	movs	r3, #4
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x228>
 800287a:	2303      	movs	r3, #3
 800287c:	e004      	b.n	8002888 <HAL_GPIO_Init+0x228>
 800287e:	2302      	movs	r3, #2
 8002880:	e002      	b.n	8002888 <HAL_GPIO_Init+0x228>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_GPIO_Init+0x228>
 8002886:	2300      	movs	r3, #0
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	f002 0203 	and.w	r2, r2, #3
 800288e:	0092      	lsls	r2, r2, #2
 8002890:	4093      	lsls	r3, r2
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002898:	4934      	ldr	r1, [pc, #208]	@ (800296c <HAL_GPIO_Init+0x30c>)
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3302      	adds	r3, #2
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002990 <HAL_GPIO_Init+0x330>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ca:	4a31      	ldr	r2, [pc, #196]	@ (8002990 <HAL_GPIO_Init+0x330>)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002990 <HAL_GPIO_Init+0x330>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f4:	4a26      	ldr	r2, [pc, #152]	@ (8002990 <HAL_GPIO_Init+0x330>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028fa:	4b25      	ldr	r3, [pc, #148]	@ (8002990 <HAL_GPIO_Init+0x330>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800291e:	4a1c      	ldr	r2, [pc, #112]	@ (8002990 <HAL_GPIO_Init+0x330>)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002924:	4b1a      	ldr	r3, [pc, #104]	@ (8002990 <HAL_GPIO_Init+0x330>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002948:	4a11      	ldr	r2, [pc, #68]	@ (8002990 <HAL_GPIO_Init+0x330>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3301      	adds	r3, #1
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	2b0f      	cmp	r3, #15
 8002958:	f67f ae90 	bls.w	800267c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	3724      	adds	r7, #36	@ 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	40023800 	.word	0x40023800
 800296c:	40013800 	.word	0x40013800
 8002970:	40020000 	.word	0x40020000
 8002974:	40020400 	.word	0x40020400
 8002978:	40020800 	.word	0x40020800
 800297c:	40020c00 	.word	0x40020c00
 8002980:	40021000 	.word	0x40021000
 8002984:	40021400 	.word	0x40021400
 8002988:	40021800 	.word	0x40021800
 800298c:	40021c00 	.word	0x40021c00
 8002990:	40013c00 	.word	0x40013c00

08002994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
 80029a0:	4613      	mov	r3, r2
 80029a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a4:	787b      	ldrb	r3, [r7, #1]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029b0:	e003      	b.n	80029ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029b2:	887b      	ldrh	r3, [r7, #2]
 80029b4:	041a      	lsls	r2, r3, #16
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	619a      	str	r2, [r3, #24]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	041a      	lsls	r2, r3, #16
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	43d9      	mvns	r1, r3
 80029e2:	887b      	ldrh	r3, [r7, #2]
 80029e4:	400b      	ands	r3, r1
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	619a      	str	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e267      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d075      	beq.n	8002b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a16:	4b88      	ldr	r3, [pc, #544]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d00c      	beq.n	8002a3c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a22:	4b85      	ldr	r3, [pc, #532]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d112      	bne.n	8002a54 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2e:	4b82      	ldr	r3, [pc, #520]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a3a:	d10b      	bne.n	8002a54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d05b      	beq.n	8002b00 <HAL_RCC_OscConfig+0x108>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d157      	bne.n	8002b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e242      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a5c:	d106      	bne.n	8002a6c <HAL_RCC_OscConfig+0x74>
 8002a5e:	4b76      	ldr	r3, [pc, #472]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a75      	ldr	r2, [pc, #468]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e01d      	b.n	8002aa8 <HAL_RCC_OscConfig+0xb0>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x98>
 8002a76:	4b70      	ldr	r3, [pc, #448]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a6f      	ldr	r2, [pc, #444]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b6d      	ldr	r3, [pc, #436]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6c      	ldr	r2, [pc, #432]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCC_OscConfig+0xb0>
 8002a90:	4b69      	ldr	r3, [pc, #420]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a68      	ldr	r2, [pc, #416]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b66      	ldr	r3, [pc, #408]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a65      	ldr	r2, [pc, #404]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7ff f8c6 	bl	8001c40 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7ff f8c2 	bl	8001c40 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	@ 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e207      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	4b5b      	ldr	r3, [pc, #364]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0xc0>
 8002ad6:	e014      	b.n	8002b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7ff f8b2 	bl	8001c40 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7ff f8ae 	bl	8001c40 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	@ 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e1f3      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af2:	4b51      	ldr	r3, [pc, #324]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0xe8>
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d063      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1a:	4b47      	ldr	r3, [pc, #284]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d11c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b26:	4b44      	ldr	r3, [pc, #272]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d116      	bne.n	8002b60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	4b41      	ldr	r3, [pc, #260]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_RCC_OscConfig+0x152>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e1c7      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4937      	ldr	r1, [pc, #220]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5e:	e03a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d020      	beq.n	8002baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b68:	4b34      	ldr	r3, [pc, #208]	@ (8002c3c <HAL_RCC_OscConfig+0x244>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6e:	f7ff f867 	bl	8001c40 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b76:	f7ff f863 	bl	8001c40 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e1a8      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	4b2b      	ldr	r3, [pc, #172]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b94:	4b28      	ldr	r3, [pc, #160]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4925      	ldr	r1, [pc, #148]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]
 8002ba8:	e015      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002baa:	4b24      	ldr	r3, [pc, #144]	@ (8002c3c <HAL_RCC_OscConfig+0x244>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7ff f846 	bl	8001c40 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb8:	f7ff f842 	bl	8001c40 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e187      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bca:	4b1b      	ldr	r3, [pc, #108]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d036      	beq.n	8002c50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d016      	beq.n	8002c18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bea:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <HAL_RCC_OscConfig+0x248>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7ff f826 	bl	8001c40 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf8:	f7ff f822 	bl	8001c40 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e167      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c38 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x200>
 8002c16:	e01b      	b.n	8002c50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c18:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <HAL_RCC_OscConfig+0x248>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1e:	f7ff f80f 	bl	8001c40 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c24:	e00e      	b.n	8002c44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c26:	f7ff f80b 	bl	8001c40 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d907      	bls.n	8002c44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e150      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	42470000 	.word	0x42470000
 8002c40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c44:	4b88      	ldr	r3, [pc, #544]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ea      	bne.n	8002c26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8097 	beq.w	8002d8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c62:	4b81      	ldr	r3, [pc, #516]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	4b7d      	ldr	r3, [pc, #500]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	4a7c      	ldr	r2, [pc, #496]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c7e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8e:	4b77      	ldr	r3, [pc, #476]	@ (8002e6c <HAL_RCC_OscConfig+0x474>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d118      	bne.n	8002ccc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9a:	4b74      	ldr	r3, [pc, #464]	@ (8002e6c <HAL_RCC_OscConfig+0x474>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a73      	ldr	r2, [pc, #460]	@ (8002e6c <HAL_RCC_OscConfig+0x474>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe ffcb 	bl	8001c40 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cae:	f7fe ffc7 	bl	8001c40 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e10c      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e6c <HAL_RCC_OscConfig+0x474>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x2ea>
 8002cd4:	4b64      	ldr	r3, [pc, #400]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd8:	4a63      	ldr	r2, [pc, #396]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce0:	e01c      	b.n	8002d1c <HAL_RCC_OscConfig+0x324>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b05      	cmp	r3, #5
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x30c>
 8002cea:	4b5f      	ldr	r3, [pc, #380]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cee:	4a5e      	ldr	r2, [pc, #376]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf6:	4b5c      	ldr	r3, [pc, #368]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfa:	4a5b      	ldr	r2, [pc, #364]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0x324>
 8002d04:	4b58      	ldr	r3, [pc, #352]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d08:	4a57      	ldr	r2, [pc, #348]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d10:	4b55      	ldr	r3, [pc, #340]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d14:	4a54      	ldr	r2, [pc, #336]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d16:	f023 0304 	bic.w	r3, r3, #4
 8002d1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d015      	beq.n	8002d50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe ff8c 	bl	8001c40 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2c:	f7fe ff88 	bl	8001c40 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0cb      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d42:	4b49      	ldr	r3, [pc, #292]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0ee      	beq.n	8002d2c <HAL_RCC_OscConfig+0x334>
 8002d4e:	e014      	b.n	8002d7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d50:	f7fe ff76 	bl	8001c40 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d58:	f7fe ff72 	bl	8001c40 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0b5      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ee      	bne.n	8002d58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d105      	bne.n	8002d8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d80:	4b39      	ldr	r3, [pc, #228]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	4a38      	ldr	r2, [pc, #224]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a1 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d96:	4b34      	ldr	r3, [pc, #208]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d05c      	beq.n	8002e5c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d141      	bne.n	8002e2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b31      	ldr	r3, [pc, #196]	@ (8002e70 <HAL_RCC_OscConfig+0x478>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe ff46 	bl	8001c40 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db8:	f7fe ff42 	bl	8001c40 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e087      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	4b27      	ldr	r3, [pc, #156]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	019b      	lsls	r3, r3, #6
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dec:	085b      	lsrs	r3, r3, #1
 8002dee:	3b01      	subs	r3, #1
 8002df0:	041b      	lsls	r3, r3, #16
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df8:	061b      	lsls	r3, r3, #24
 8002dfa:	491b      	ldr	r1, [pc, #108]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e00:	4b1b      	ldr	r3, [pc, #108]	@ (8002e70 <HAL_RCC_OscConfig+0x478>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7fe ff1b 	bl	8001c40 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7fe ff17 	bl	8001c40 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e05c      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e20:	4b11      	ldr	r3, [pc, #68]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x416>
 8002e2c:	e054      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2e:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <HAL_RCC_OscConfig+0x478>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fe ff04 	bl	8001c40 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe ff00 	bl	8001c40 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e045      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <HAL_RCC_OscConfig+0x470>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x444>
 8002e5a:	e03d      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d107      	bne.n	8002e74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e038      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_RCC_OscConfig+0x4ec>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d028      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d121      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d11a      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d111      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ece:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0cc      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002efc:	4b68      	ldr	r3, [pc, #416]	@ (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d90c      	bls.n	8002f24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b65      	ldr	r3, [pc, #404]	@ (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b63      	ldr	r3, [pc, #396]	@ (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0b8      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d020      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f3c:	4b59      	ldr	r3, [pc, #356]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a58      	ldr	r2, [pc, #352]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f54:	4b53      	ldr	r3, [pc, #332]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4a52      	ldr	r2, [pc, #328]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f60:	4b50      	ldr	r3, [pc, #320]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	494d      	ldr	r1, [pc, #308]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d044      	beq.n	8003008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b47      	ldr	r3, [pc, #284]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d119      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e07f      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d003      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d107      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e06f      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e067      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fc6:	4b37      	ldr	r3, [pc, #220]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f023 0203 	bic.w	r2, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4934      	ldr	r1, [pc, #208]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd8:	f7fe fe32 	bl	8001c40 <HAL_GetTick>
 8002fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe0:	f7fe fe2e 	bl	8001c40 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e04f      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff6:	4b2b      	ldr	r3, [pc, #172]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 020c 	and.w	r2, r3, #12
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	429a      	cmp	r2, r3
 8003006:	d1eb      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003008:	4b25      	ldr	r3, [pc, #148]	@ (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d20c      	bcs.n	8003030 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003016:	4b22      	ldr	r3, [pc, #136]	@ (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b20      	ldr	r3, [pc, #128]	@ (80030a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e032      	b.n	8003096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800303c:	4b19      	ldr	r3, [pc, #100]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4916      	ldr	r1, [pc, #88]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800305a:	4b12      	ldr	r3, [pc, #72]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	490e      	ldr	r1, [pc, #56]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800306e:	f000 f821 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8003072:	4602      	mov	r2, r0
 8003074:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	490a      	ldr	r1, [pc, #40]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	5ccb      	ldrb	r3, [r1, r3]
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	4a09      	ldr	r2, [pc, #36]	@ (80030ac <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800308a:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <HAL_RCC_ClockConfig+0x1c8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fd94 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40023c00 	.word	0x40023c00
 80030a4:	40023800 	.word	0x40023800
 80030a8:	08008228 	.word	0x08008228
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000004 	.word	0x20000004

080030b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b8:	b094      	sub	sp, #80	@ 0x50
 80030ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030cc:	4b7c      	ldr	r3, [pc, #496]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d00d      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x40>
 80030d8:	2b08      	cmp	r3, #8
 80030da:	f200 80e7 	bhi.w	80032ac <HAL_RCC_GetSysClockFreq+0x1f8>
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x34>
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d003      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x3a>
 80030e6:	e0e1      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030e8:	4b76      	ldr	r3, [pc, #472]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x210>)
 80030ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030ec:	e0e1      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ee:	4b76      	ldr	r3, [pc, #472]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x214>)
 80030f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030f2:	e0de      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030f4:	4b72      	ldr	r3, [pc, #456]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030fe:	4b70      	ldr	r3, [pc, #448]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d065      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800310a:	4b6d      	ldr	r3, [pc, #436]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x20c>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	099b      	lsrs	r3, r3, #6
 8003110:	2200      	movs	r2, #0
 8003112:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003114:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311c:	633b      	str	r3, [r7, #48]	@ 0x30
 800311e:	2300      	movs	r3, #0
 8003120:	637b      	str	r3, [r7, #52]	@ 0x34
 8003122:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003126:	4622      	mov	r2, r4
 8003128:	462b      	mov	r3, r5
 800312a:	f04f 0000 	mov.w	r0, #0
 800312e:	f04f 0100 	mov.w	r1, #0
 8003132:	0159      	lsls	r1, r3, #5
 8003134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003138:	0150      	lsls	r0, r2, #5
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4621      	mov	r1, r4
 8003140:	1a51      	subs	r1, r2, r1
 8003142:	6139      	str	r1, [r7, #16]
 8003144:	4629      	mov	r1, r5
 8003146:	eb63 0301 	sbc.w	r3, r3, r1
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003158:	4659      	mov	r1, fp
 800315a:	018b      	lsls	r3, r1, #6
 800315c:	4651      	mov	r1, sl
 800315e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003162:	4651      	mov	r1, sl
 8003164:	018a      	lsls	r2, r1, #6
 8003166:	46d4      	mov	ip, sl
 8003168:	ebb2 080c 	subs.w	r8, r2, ip
 800316c:	4659      	mov	r1, fp
 800316e:	eb63 0901 	sbc.w	r9, r3, r1
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800317e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003186:	4690      	mov	r8, r2
 8003188:	4699      	mov	r9, r3
 800318a:	4623      	mov	r3, r4
 800318c:	eb18 0303 	adds.w	r3, r8, r3
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	462b      	mov	r3, r5
 8003194:	eb49 0303 	adc.w	r3, r9, r3
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031a6:	4629      	mov	r1, r5
 80031a8:	024b      	lsls	r3, r1, #9
 80031aa:	4620      	mov	r0, r4
 80031ac:	4629      	mov	r1, r5
 80031ae:	4604      	mov	r4, r0
 80031b0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80031b4:	4601      	mov	r1, r0
 80031b6:	024a      	lsls	r2, r1, #9
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031be:	2200      	movs	r2, #0
 80031c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031c8:	f7fd ffbc 	bl	8001144 <__aeabi_uldivmod>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4613      	mov	r3, r2
 80031d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031d4:	e05c      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d6:	4b3a      	ldr	r3, [pc, #232]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	099b      	lsrs	r3, r3, #6
 80031dc:	2200      	movs	r2, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	4611      	mov	r1, r2
 80031e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031e6:	623b      	str	r3, [r7, #32]
 80031e8:	2300      	movs	r3, #0
 80031ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031f0:	4642      	mov	r2, r8
 80031f2:	464b      	mov	r3, r9
 80031f4:	f04f 0000 	mov.w	r0, #0
 80031f8:	f04f 0100 	mov.w	r1, #0
 80031fc:	0159      	lsls	r1, r3, #5
 80031fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003202:	0150      	lsls	r0, r2, #5
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	46c4      	mov	ip, r8
 800320a:	ebb2 0a0c 	subs.w	sl, r2, ip
 800320e:	4640      	mov	r0, r8
 8003210:	4649      	mov	r1, r9
 8003212:	468c      	mov	ip, r1
 8003214:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003224:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003228:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800322c:	ebb2 040a 	subs.w	r4, r2, sl
 8003230:	eb63 050b 	sbc.w	r5, r3, fp
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	00eb      	lsls	r3, r5, #3
 800323e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003242:	00e2      	lsls	r2, r4, #3
 8003244:	4614      	mov	r4, r2
 8003246:	461d      	mov	r5, r3
 8003248:	4603      	mov	r3, r0
 800324a:	18e3      	adds	r3, r4, r3
 800324c:	603b      	str	r3, [r7, #0]
 800324e:	460b      	mov	r3, r1
 8003250:	eb45 0303 	adc.w	r3, r5, r3
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003262:	4629      	mov	r1, r5
 8003264:	028b      	lsls	r3, r1, #10
 8003266:	4620      	mov	r0, r4
 8003268:	4629      	mov	r1, r5
 800326a:	4604      	mov	r4, r0
 800326c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003270:	4601      	mov	r1, r0
 8003272:	028a      	lsls	r2, r1, #10
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800327a:	2200      	movs	r2, #0
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	61fa      	str	r2, [r7, #28]
 8003280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003284:	f7fd ff5e 	bl	8001144 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003290:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	3301      	adds	r3, #1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80032a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032aa:	e002      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ac:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x210>)
 80032ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3750      	adds	r7, #80	@ 0x50
 80032b8:	46bd      	mov	sp, r7
 80032ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	00f42400 	.word	0x00f42400
 80032c8:	007a1200 	.word	0x007a1200

080032cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d0:	4b02      	ldr	r3, [pc, #8]	@ (80032dc <HAL_RCC_GetHCLKFreq+0x10>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	20000000 	.word	0x20000000

080032e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032e4:	f7ff fff2 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 80032e8:	4602      	mov	r2, r0
 80032ea:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	0a9b      	lsrs	r3, r3, #10
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	4903      	ldr	r1, [pc, #12]	@ (8003304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032f6:	5ccb      	ldrb	r3, [r1, r3]
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	08008238 	.word	0x08008238

08003308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800330c:	f7ff ffde 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0b5b      	lsrs	r3, r3, #13
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4903      	ldr	r1, [pc, #12]	@ (800332c <HAL_RCC_GetPCLK2Freq+0x24>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	08008238 	.word	0x08008238

08003330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e042      	b.n	80033c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fe faa8 	bl	80018ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2224      	movs	r2, #36	@ 0x24
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f971 	bl	800365c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	@ 0x28
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d175      	bne.n	80034dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_UART_Transmit+0x2c>
 80033f6:	88fb      	ldrh	r3, [r7, #6]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e06e      	b.n	80034de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2221      	movs	r2, #33	@ 0x21
 800340a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800340e:	f7fe fc17 	bl	8001c40 <HAL_GetTick>
 8003412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	88fa      	ldrh	r2, [r7, #6]
 8003418:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	88fa      	ldrh	r2, [r7, #6]
 800341e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003428:	d108      	bne.n	800343c <HAL_UART_Transmit+0x6c>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d104      	bne.n	800343c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	e003      	b.n	8003444 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003440:	2300      	movs	r3, #0
 8003442:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003444:	e02e      	b.n	80034a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2200      	movs	r2, #0
 800344e:	2180      	movs	r1, #128	@ 0x80
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f848 	bl	80034e6 <UART_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e03a      	b.n	80034de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10b      	bne.n	8003486 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800347c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	3302      	adds	r3, #2
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	e007      	b.n	8003496 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	781a      	ldrb	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	3301      	adds	r3, #1
 8003494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1cb      	bne.n	8003446 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2200      	movs	r2, #0
 80034b6:	2140      	movs	r1, #64	@ 0x40
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f814 	bl	80034e6 <UART_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e006      	b.n	80034de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	4613      	mov	r3, r2
 80034f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f6:	e03b      	b.n	8003570 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034fe:	d037      	beq.n	8003570 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003500:	f7fe fb9e 	bl	8001c40 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	6a3a      	ldr	r2, [r7, #32]
 800350c:	429a      	cmp	r2, r3
 800350e:	d302      	bcc.n	8003516 <UART_WaitOnFlagUntilTimeout+0x30>
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e03a      	b.n	8003590 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d023      	beq.n	8003570 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b80      	cmp	r3, #128	@ 0x80
 800352c:	d020      	beq.n	8003570 <UART_WaitOnFlagUntilTimeout+0x8a>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b40      	cmp	r3, #64	@ 0x40
 8003532:	d01d      	beq.n	8003570 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b08      	cmp	r3, #8
 8003540:	d116      	bne.n	8003570 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f81d 	bl	8003598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2208      	movs	r2, #8
 8003562:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e00f      	b.n	8003590 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	4013      	ands	r3, r2
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	429a      	cmp	r2, r3
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	429a      	cmp	r2, r3
 800358c:	d0b4      	beq.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b095      	sub	sp, #84	@ 0x54
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	330c      	adds	r3, #12
 80035a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035aa:	e853 3f00 	ldrex	r3, [r3]
 80035ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	330c      	adds	r3, #12
 80035be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80035c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035c8:	e841 2300 	strex	r3, r2, [r1]
 80035cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e5      	bne.n	80035a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3314      	adds	r3, #20
 80035da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	e853 3f00 	ldrex	r3, [r3]
 80035e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3314      	adds	r3, #20
 80035f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035fc:	e841 2300 	strex	r3, r2, [r1]
 8003600:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e5      	bne.n	80035d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360c:	2b01      	cmp	r3, #1
 800360e:	d119      	bne.n	8003644 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f023 0310 	bic.w	r3, r3, #16
 8003626:	647b      	str	r3, [r7, #68]	@ 0x44
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003630:	61ba      	str	r2, [r7, #24]
 8003632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	6979      	ldr	r1, [r7, #20]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	613b      	str	r3, [r7, #16]
   return(result);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e5      	bne.n	8003610 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003652:	bf00      	nop
 8003654:	3754      	adds	r7, #84	@ 0x54
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800365c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003660:	b0c0      	sub	sp, #256	@ 0x100
 8003662:	af00      	add	r7, sp, #0
 8003664:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003678:	68d9      	ldr	r1, [r3, #12]
 800367a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	ea40 0301 	orr.w	r3, r0, r1
 8003684:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	431a      	orrs	r2, r3
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	431a      	orrs	r2, r3
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80036b4:	f021 010c 	bic.w	r1, r1, #12
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036c2:	430b      	orrs	r3, r1
 80036c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d6:	6999      	ldr	r1, [r3, #24]
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	ea40 0301 	orr.w	r3, r0, r1
 80036e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4b91      	ldr	r3, [pc, #580]	@ (8003930 <UART_SetConfig+0x2d4>)
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d005      	beq.n	80036fc <UART_SetConfig+0xa0>
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4b8f      	ldr	r3, [pc, #572]	@ (8003934 <UART_SetConfig+0x2d8>)
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d104      	bne.n	8003706 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036fc:	f7ff fe04 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 8003700:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003704:	e003      	b.n	800370e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003706:	f7ff fdeb 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 800370a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800370e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003718:	f040 8110 	bne.w	800393c <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800371c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003720:	2200      	movs	r2, #0
 8003722:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003726:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800372a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800372e:	4622      	mov	r2, r4
 8003730:	462b      	mov	r3, r5
 8003732:	1891      	adds	r1, r2, r2
 8003734:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003736:	415b      	adcs	r3, r3
 8003738:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800373a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800373e:	4620      	mov	r0, r4
 8003740:	4629      	mov	r1, r5
 8003742:	4604      	mov	r4, r0
 8003744:	eb12 0804 	adds.w	r8, r2, r4
 8003748:	460c      	mov	r4, r1
 800374a:	eb43 0904 	adc.w	r9, r3, r4
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800375a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800375e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003762:	4690      	mov	r8, r2
 8003764:	4699      	mov	r9, r3
 8003766:	4603      	mov	r3, r0
 8003768:	eb18 0303 	adds.w	r3, r8, r3
 800376c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003770:	460b      	mov	r3, r1
 8003772:	eb49 0303 	adc.w	r3, r9, r3
 8003776:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800377a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003786:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800378a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800378e:	460b      	mov	r3, r1
 8003790:	18db      	adds	r3, r3, r3
 8003792:	653b      	str	r3, [r7, #80]	@ 0x50
 8003794:	4613      	mov	r3, r2
 8003796:	eb42 0303 	adc.w	r3, r2, r3
 800379a:	657b      	str	r3, [r7, #84]	@ 0x54
 800379c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037a4:	f7fd fcce 	bl	8001144 <__aeabi_uldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4b62      	ldr	r3, [pc, #392]	@ (8003938 <UART_SetConfig+0x2dc>)
 80037ae:	fba3 2302 	umull	r2, r3, r3, r2
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	011c      	lsls	r4, r3, #4
 80037b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80037c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	1891      	adds	r1, r2, r2
 80037ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80037d0:	415b      	adcs	r3, r3
 80037d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037d8:	4645      	mov	r5, r8
 80037da:	eb12 0a05 	adds.w	sl, r2, r5
 80037de:	4640      	mov	r0, r8
 80037e0:	4649      	mov	r1, r9
 80037e2:	460d      	mov	r5, r1
 80037e4:	eb43 0b05 	adc.w	fp, r3, r5
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037fc:	4692      	mov	sl, r2
 80037fe:	469b      	mov	fp, r3
 8003800:	4603      	mov	r3, r0
 8003802:	eb1a 0303 	adds.w	r3, sl, r3
 8003806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800380a:	460b      	mov	r3, r1
 800380c:	eb4b 0303 	adc.w	r3, fp, r3
 8003810:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003820:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003824:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003828:	460b      	mov	r3, r1
 800382a:	18db      	adds	r3, r3, r3
 800382c:	643b      	str	r3, [r7, #64]	@ 0x40
 800382e:	4613      	mov	r3, r2
 8003830:	eb42 0303 	adc.w	r3, r2, r3
 8003834:	647b      	str	r3, [r7, #68]	@ 0x44
 8003836:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800383a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800383e:	f7fd fc81 	bl	8001144 <__aeabi_uldivmod>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4611      	mov	r1, r2
 8003848:	4b3b      	ldr	r3, [pc, #236]	@ (8003938 <UART_SetConfig+0x2dc>)
 800384a:	fba3 2301 	umull	r2, r3, r3, r1
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	2264      	movs	r2, #100	@ 0x64
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	1acb      	subs	r3, r1, r3
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800385e:	4b36      	ldr	r3, [pc, #216]	@ (8003938 <UART_SetConfig+0x2dc>)
 8003860:	fba3 2302 	umull	r2, r3, r3, r2
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800386c:	441c      	add	r4, r3
 800386e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003872:	2200      	movs	r2, #0
 8003874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003878:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800387c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003880:	4642      	mov	r2, r8
 8003882:	464b      	mov	r3, r9
 8003884:	1891      	adds	r1, r2, r2
 8003886:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003888:	415b      	adcs	r3, r3
 800388a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800388c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003890:	4641      	mov	r1, r8
 8003892:	1851      	adds	r1, r2, r1
 8003894:	6339      	str	r1, [r7, #48]	@ 0x30
 8003896:	4649      	mov	r1, r9
 8003898:	414b      	adcs	r3, r1
 800389a:	637b      	str	r3, [r7, #52]	@ 0x34
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038a8:	4659      	mov	r1, fp
 80038aa:	00cb      	lsls	r3, r1, #3
 80038ac:	4655      	mov	r5, sl
 80038ae:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80038b2:	4651      	mov	r1, sl
 80038b4:	00ca      	lsls	r2, r1, #3
 80038b6:	4610      	mov	r0, r2
 80038b8:	4619      	mov	r1, r3
 80038ba:	4603      	mov	r3, r0
 80038bc:	4642      	mov	r2, r8
 80038be:	189b      	adds	r3, r3, r2
 80038c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038c4:	464b      	mov	r3, r9
 80038c6:	460a      	mov	r2, r1
 80038c8:	eb42 0303 	adc.w	r3, r2, r3
 80038cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038e4:	460b      	mov	r3, r1
 80038e6:	18db      	adds	r3, r3, r3
 80038e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ea:	4613      	mov	r3, r2
 80038ec:	eb42 0303 	adc.w	r3, r2, r3
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038fa:	f7fd fc23 	bl	8001144 <__aeabi_uldivmod>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4b0d      	ldr	r3, [pc, #52]	@ (8003938 <UART_SetConfig+0x2dc>)
 8003904:	fba3 1302 	umull	r1, r3, r3, r2
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	2164      	movs	r1, #100	@ 0x64
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	3332      	adds	r3, #50	@ 0x32
 8003916:	4a08      	ldr	r2, [pc, #32]	@ (8003938 <UART_SetConfig+0x2dc>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	f003 0207 	and.w	r2, r3, #7
 8003922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4422      	add	r2, r4
 800392a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800392c:	e10a      	b.n	8003b44 <UART_SetConfig+0x4e8>
 800392e:	bf00      	nop
 8003930:	40011000 	.word	0x40011000
 8003934:	40011400 	.word	0x40011400
 8003938:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800393c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003940:	2200      	movs	r2, #0
 8003942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003946:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800394a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800394e:	4642      	mov	r2, r8
 8003950:	464b      	mov	r3, r9
 8003952:	1891      	adds	r1, r2, r2
 8003954:	6239      	str	r1, [r7, #32]
 8003956:	415b      	adcs	r3, r3
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
 800395a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800395e:	4641      	mov	r1, r8
 8003960:	1854      	adds	r4, r2, r1
 8003962:	46cc      	mov	ip, r9
 8003964:	eb43 050c 	adc.w	r5, r3, ip
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	00eb      	lsls	r3, r5, #3
 8003972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003976:	00e2      	lsls	r2, r4, #3
 8003978:	4614      	mov	r4, r2
 800397a:	461d      	mov	r5, r3
 800397c:	4640      	mov	r0, r8
 800397e:	4649      	mov	r1, r9
 8003980:	4603      	mov	r3, r0
 8003982:	18e3      	adds	r3, r4, r3
 8003984:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003988:	460b      	mov	r3, r1
 800398a:	eb45 0303 	adc.w	r3, r5, r3
 800398e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800399e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039ae:	4629      	mov	r1, r5
 80039b0:	008b      	lsls	r3, r1, #2
 80039b2:	4620      	mov	r0, r4
 80039b4:	4629      	mov	r1, r5
 80039b6:	4604      	mov	r4, r0
 80039b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80039bc:	4601      	mov	r1, r0
 80039be:	008a      	lsls	r2, r1, #2
 80039c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80039c4:	f7fd fbbe 	bl	8001144 <__aeabi_uldivmod>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4b60      	ldr	r3, [pc, #384]	@ (8003b50 <UART_SetConfig+0x4f4>)
 80039ce:	fba3 2302 	umull	r2, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	011c      	lsls	r4, r3, #4
 80039d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039e8:	4642      	mov	r2, r8
 80039ea:	464b      	mov	r3, r9
 80039ec:	1891      	adds	r1, r2, r2
 80039ee:	61b9      	str	r1, [r7, #24]
 80039f0:	415b      	adcs	r3, r3
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f8:	4641      	mov	r1, r8
 80039fa:	1851      	adds	r1, r2, r1
 80039fc:	6139      	str	r1, [r7, #16]
 80039fe:	4649      	mov	r1, r9
 8003a00:	414b      	adcs	r3, r1
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a10:	4659      	mov	r1, fp
 8003a12:	00cb      	lsls	r3, r1, #3
 8003a14:	4655      	mov	r5, sl
 8003a16:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003a1a:	4651      	mov	r1, sl
 8003a1c:	00ca      	lsls	r2, r1, #3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	4619      	mov	r1, r3
 8003a22:	4603      	mov	r3, r0
 8003a24:	4642      	mov	r2, r8
 8003a26:	189b      	adds	r3, r3, r2
 8003a28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a2c:	464b      	mov	r3, r9
 8003a2e:	460a      	mov	r2, r1
 8003a30:	eb42 0303 	adc.w	r3, r2, r3
 8003a34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a50:	4649      	mov	r1, r9
 8003a52:	008b      	lsls	r3, r1, #2
 8003a54:	4645      	mov	r5, r8
 8003a56:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8003a5a:	4641      	mov	r1, r8
 8003a5c:	008a      	lsls	r2, r1, #2
 8003a5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a62:	f7fd fb6f 	bl	8001144 <__aeabi_uldivmod>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4b38      	ldr	r3, [pc, #224]	@ (8003b50 <UART_SetConfig+0x4f4>)
 8003a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	2264      	movs	r2, #100	@ 0x64
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	1acb      	subs	r3, r1, r3
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	3332      	adds	r3, #50	@ 0x32
 8003a80:	4a33      	ldr	r2, [pc, #204]	@ (8003b50 <UART_SetConfig+0x4f4>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a8c:	441c      	add	r4, r3
 8003a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a92:	2200      	movs	r2, #0
 8003a94:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a96:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	1891      	adds	r1, r2, r2
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	415b      	adcs	r3, r3
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aac:	4641      	mov	r1, r8
 8003aae:	1851      	adds	r1, r2, r1
 8003ab0:	6039      	str	r1, [r7, #0]
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	414b      	adcs	r3, r1
 8003ab6:	607b      	str	r3, [r7, #4]
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	00cb      	lsls	r3, r1, #3
 8003ac8:	4655      	mov	r5, sl
 8003aca:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003ace:	4651      	mov	r1, sl
 8003ad0:	00ca      	lsls	r2, r1, #3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4642      	mov	r2, r8
 8003ada:	189b      	adds	r3, r3, r2
 8003adc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ade:	464b      	mov	r3, r9
 8003ae0:	460a      	mov	r2, r1
 8003ae2:	eb42 0303 	adc.w	r3, r2, r3
 8003ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003af2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b00:	4649      	mov	r1, r9
 8003b02:	008b      	lsls	r3, r1, #2
 8003b04:	4645      	mov	r5, r8
 8003b06:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8003b0a:	4641      	mov	r1, r8
 8003b0c:	008a      	lsls	r2, r1, #2
 8003b0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b12:	f7fd fb17 	bl	8001144 <__aeabi_uldivmod>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b50 <UART_SetConfig+0x4f4>)
 8003b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	2164      	movs	r1, #100	@ 0x64
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	3332      	adds	r3, #50	@ 0x32
 8003b2e:	4a08      	ldr	r2, [pc, #32]	@ (8003b50 <UART_SetConfig+0x4f4>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	f003 020f 	and.w	r2, r3, #15
 8003b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4422      	add	r2, r4
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	bf00      	nop
 8003b46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b50:	51eb851f 	.word	0x51eb851f

08003b54 <__cvt>:
 8003b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b58:	b088      	sub	sp, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	461d      	mov	r5, r3
 8003b5e:	4614      	mov	r4, r2
 8003b60:	bfbc      	itt	lt
 8003b62:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003b66:	4614      	movlt	r4, r2
 8003b68:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003b6a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003b6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003b70:	bfb6      	itet	lt
 8003b72:	461d      	movlt	r5, r3
 8003b74:	2300      	movge	r3, #0
 8003b76:	232d      	movlt	r3, #45	@ 0x2d
 8003b78:	7013      	strb	r3, [r2, #0]
 8003b7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003b7c:	f023 0820 	bic.w	r8, r3, #32
 8003b80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b84:	d005      	beq.n	8003b92 <__cvt+0x3e>
 8003b86:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003b8a:	d100      	bne.n	8003b8e <__cvt+0x3a>
 8003b8c:	3601      	adds	r6, #1
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e000      	b.n	8003b94 <__cvt+0x40>
 8003b92:	2303      	movs	r3, #3
 8003b94:	aa07      	add	r2, sp, #28
 8003b96:	9204      	str	r2, [sp, #16]
 8003b98:	aa06      	add	r2, sp, #24
 8003b9a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003b9e:	e9cd 3600 	strd	r3, r6, [sp]
 8003ba2:	4622      	mov	r2, r4
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	f001 f86f 	bl	8004c88 <_dtoa_r>
 8003baa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003bae:	4607      	mov	r7, r0
 8003bb0:	d119      	bne.n	8003be6 <__cvt+0x92>
 8003bb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003bb4:	07db      	lsls	r3, r3, #31
 8003bb6:	d50e      	bpl.n	8003bd6 <__cvt+0x82>
 8003bb8:	eb00 0906 	add.w	r9, r0, r6
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	f7fc ff80 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bc8:	b108      	cbz	r0, 8003bce <__cvt+0x7a>
 8003bca:	f8cd 901c 	str.w	r9, [sp, #28]
 8003bce:	2230      	movs	r2, #48	@ 0x30
 8003bd0:	9b07      	ldr	r3, [sp, #28]
 8003bd2:	454b      	cmp	r3, r9
 8003bd4:	d31e      	bcc.n	8003c14 <__cvt+0xc0>
 8003bd6:	9b07      	ldr	r3, [sp, #28]
 8003bd8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003bda:	1bdb      	subs	r3, r3, r7
 8003bdc:	4638      	mov	r0, r7
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	b008      	add	sp, #32
 8003be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003bea:	eb00 0906 	add.w	r9, r0, r6
 8003bee:	d1e5      	bne.n	8003bbc <__cvt+0x68>
 8003bf0:	7803      	ldrb	r3, [r0, #0]
 8003bf2:	2b30      	cmp	r3, #48	@ 0x30
 8003bf4:	d10a      	bne.n	8003c0c <__cvt+0xb8>
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	f7fc ff63 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c02:	b918      	cbnz	r0, 8003c0c <__cvt+0xb8>
 8003c04:	f1c6 0601 	rsb	r6, r6, #1
 8003c08:	f8ca 6000 	str.w	r6, [sl]
 8003c0c:	f8da 3000 	ldr.w	r3, [sl]
 8003c10:	4499      	add	r9, r3
 8003c12:	e7d3      	b.n	8003bbc <__cvt+0x68>
 8003c14:	1c59      	adds	r1, r3, #1
 8003c16:	9107      	str	r1, [sp, #28]
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	e7d9      	b.n	8003bd0 <__cvt+0x7c>

08003c1c <__exponent>:
 8003c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c1e:	2900      	cmp	r1, #0
 8003c20:	bfba      	itte	lt
 8003c22:	4249      	neglt	r1, r1
 8003c24:	232d      	movlt	r3, #45	@ 0x2d
 8003c26:	232b      	movge	r3, #43	@ 0x2b
 8003c28:	2909      	cmp	r1, #9
 8003c2a:	7002      	strb	r2, [r0, #0]
 8003c2c:	7043      	strb	r3, [r0, #1]
 8003c2e:	dd29      	ble.n	8003c84 <__exponent+0x68>
 8003c30:	f10d 0307 	add.w	r3, sp, #7
 8003c34:	461d      	mov	r5, r3
 8003c36:	270a      	movs	r7, #10
 8003c38:	461a      	mov	r2, r3
 8003c3a:	fbb1 f6f7 	udiv	r6, r1, r7
 8003c3e:	fb07 1416 	mls	r4, r7, r6, r1
 8003c42:	3430      	adds	r4, #48	@ 0x30
 8003c44:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003c48:	460c      	mov	r4, r1
 8003c4a:	2c63      	cmp	r4, #99	@ 0x63
 8003c4c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003c50:	4631      	mov	r1, r6
 8003c52:	dcf1      	bgt.n	8003c38 <__exponent+0x1c>
 8003c54:	3130      	adds	r1, #48	@ 0x30
 8003c56:	1e94      	subs	r4, r2, #2
 8003c58:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c5c:	1c41      	adds	r1, r0, #1
 8003c5e:	4623      	mov	r3, r4
 8003c60:	42ab      	cmp	r3, r5
 8003c62:	d30a      	bcc.n	8003c7a <__exponent+0x5e>
 8003c64:	f10d 0309 	add.w	r3, sp, #9
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	42ac      	cmp	r4, r5
 8003c6c:	bf88      	it	hi
 8003c6e:	2300      	movhi	r3, #0
 8003c70:	3302      	adds	r3, #2
 8003c72:	4403      	add	r3, r0
 8003c74:	1a18      	subs	r0, r3, r0
 8003c76:	b003      	add	sp, #12
 8003c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c7a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003c7e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003c82:	e7ed      	b.n	8003c60 <__exponent+0x44>
 8003c84:	2330      	movs	r3, #48	@ 0x30
 8003c86:	3130      	adds	r1, #48	@ 0x30
 8003c88:	7083      	strb	r3, [r0, #2]
 8003c8a:	70c1      	strb	r1, [r0, #3]
 8003c8c:	1d03      	adds	r3, r0, #4
 8003c8e:	e7f1      	b.n	8003c74 <__exponent+0x58>

08003c90 <_printf_float>:
 8003c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c94:	b091      	sub	sp, #68	@ 0x44
 8003c96:	460c      	mov	r4, r1
 8003c98:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003c9c:	4616      	mov	r6, r2
 8003c9e:	461f      	mov	r7, r3
 8003ca0:	4605      	mov	r5, r0
 8003ca2:	f000 feeb 	bl	8004a7c <_localeconv_r>
 8003ca6:	6803      	ldr	r3, [r0, #0]
 8003ca8:	9308      	str	r3, [sp, #32]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc fae0 	bl	8000270 <strlen>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	930e      	str	r3, [sp, #56]	@ 0x38
 8003cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8003cb8:	9009      	str	r0, [sp, #36]	@ 0x24
 8003cba:	3307      	adds	r3, #7
 8003cbc:	f023 0307 	bic.w	r3, r3, #7
 8003cc0:	f103 0208 	add.w	r2, r3, #8
 8003cc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003cc8:	f8d4 b000 	ldr.w	fp, [r4]
 8003ccc:	f8c8 2000 	str.w	r2, [r8]
 8003cd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cd4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003cd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003cda:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003cde:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003ce2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003ce6:	4b9d      	ldr	r3, [pc, #628]	@ (8003f5c <_printf_float+0x2cc>)
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003cec:	f7fc ff1e 	bl	8000b2c <__aeabi_dcmpun>
 8003cf0:	bb70      	cbnz	r0, 8003d50 <_printf_float+0xc0>
 8003cf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003cf6:	4b99      	ldr	r3, [pc, #612]	@ (8003f5c <_printf_float+0x2cc>)
 8003cf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003cfc:	f7fc fef8 	bl	8000af0 <__aeabi_dcmple>
 8003d00:	bb30      	cbnz	r0, 8003d50 <_printf_float+0xc0>
 8003d02:	2200      	movs	r2, #0
 8003d04:	2300      	movs	r3, #0
 8003d06:	4640      	mov	r0, r8
 8003d08:	4649      	mov	r1, r9
 8003d0a:	f7fc fee7 	bl	8000adc <__aeabi_dcmplt>
 8003d0e:	b110      	cbz	r0, 8003d16 <_printf_float+0x86>
 8003d10:	232d      	movs	r3, #45	@ 0x2d
 8003d12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d16:	4a92      	ldr	r2, [pc, #584]	@ (8003f60 <_printf_float+0x2d0>)
 8003d18:	4b92      	ldr	r3, [pc, #584]	@ (8003f64 <_printf_float+0x2d4>)
 8003d1a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003d1e:	bf94      	ite	ls
 8003d20:	4690      	movls	r8, r2
 8003d22:	4698      	movhi	r8, r3
 8003d24:	2303      	movs	r3, #3
 8003d26:	6123      	str	r3, [r4, #16]
 8003d28:	f02b 0304 	bic.w	r3, fp, #4
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	f04f 0900 	mov.w	r9, #0
 8003d32:	9700      	str	r7, [sp, #0]
 8003d34:	4633      	mov	r3, r6
 8003d36:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003d38:	4621      	mov	r1, r4
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f000 f9d4 	bl	80040e8 <_printf_common>
 8003d40:	3001      	adds	r0, #1
 8003d42:	f040 808f 	bne.w	8003e64 <_printf_float+0x1d4>
 8003d46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d4a:	b011      	add	sp, #68	@ 0x44
 8003d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d50:	4642      	mov	r2, r8
 8003d52:	464b      	mov	r3, r9
 8003d54:	4640      	mov	r0, r8
 8003d56:	4649      	mov	r1, r9
 8003d58:	f7fc fee8 	bl	8000b2c <__aeabi_dcmpun>
 8003d5c:	b140      	cbz	r0, 8003d70 <_printf_float+0xe0>
 8003d5e:	464b      	mov	r3, r9
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bfbc      	itt	lt
 8003d64:	232d      	movlt	r3, #45	@ 0x2d
 8003d66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003d6a:	4a7f      	ldr	r2, [pc, #508]	@ (8003f68 <_printf_float+0x2d8>)
 8003d6c:	4b7f      	ldr	r3, [pc, #508]	@ (8003f6c <_printf_float+0x2dc>)
 8003d6e:	e7d4      	b.n	8003d1a <_printf_float+0x8a>
 8003d70:	6863      	ldr	r3, [r4, #4]
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003d78:	d13f      	bne.n	8003dfa <_printf_float+0x16a>
 8003d7a:	2306      	movs	r3, #6
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003d82:	2200      	movs	r2, #0
 8003d84:	6023      	str	r3, [r4, #0]
 8003d86:	9206      	str	r2, [sp, #24]
 8003d88:	aa0e      	add	r2, sp, #56	@ 0x38
 8003d8a:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003d8e:	aa0d      	add	r2, sp, #52	@ 0x34
 8003d90:	9203      	str	r2, [sp, #12]
 8003d92:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003d96:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d9a:	6863      	ldr	r3, [r4, #4]
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	4642      	mov	r2, r8
 8003da0:	464b      	mov	r3, r9
 8003da2:	4628      	mov	r0, r5
 8003da4:	910a      	str	r1, [sp, #40]	@ 0x28
 8003da6:	f7ff fed5 	bl	8003b54 <__cvt>
 8003daa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003dac:	2947      	cmp	r1, #71	@ 0x47
 8003dae:	4680      	mov	r8, r0
 8003db0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003db2:	d128      	bne.n	8003e06 <_printf_float+0x176>
 8003db4:	1cc8      	adds	r0, r1, #3
 8003db6:	db02      	blt.n	8003dbe <_printf_float+0x12e>
 8003db8:	6863      	ldr	r3, [r4, #4]
 8003dba:	4299      	cmp	r1, r3
 8003dbc:	dd40      	ble.n	8003e40 <_printf_float+0x1b0>
 8003dbe:	f1aa 0a02 	sub.w	sl, sl, #2
 8003dc2:	fa5f fa8a 	uxtb.w	sl, sl
 8003dc6:	3901      	subs	r1, #1
 8003dc8:	4652      	mov	r2, sl
 8003dca:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003dce:	910d      	str	r1, [sp, #52]	@ 0x34
 8003dd0:	f7ff ff24 	bl	8003c1c <__exponent>
 8003dd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003dd6:	1813      	adds	r3, r2, r0
 8003dd8:	2a01      	cmp	r2, #1
 8003dda:	4681      	mov	r9, r0
 8003ddc:	6123      	str	r3, [r4, #16]
 8003dde:	dc02      	bgt.n	8003de6 <_printf_float+0x156>
 8003de0:	6822      	ldr	r2, [r4, #0]
 8003de2:	07d2      	lsls	r2, r2, #31
 8003de4:	d501      	bpl.n	8003dea <_printf_float+0x15a>
 8003de6:	3301      	adds	r3, #1
 8003de8:	6123      	str	r3, [r4, #16]
 8003dea:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d09f      	beq.n	8003d32 <_printf_float+0xa2>
 8003df2:	232d      	movs	r3, #45	@ 0x2d
 8003df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003df8:	e79b      	b.n	8003d32 <_printf_float+0xa2>
 8003dfa:	2947      	cmp	r1, #71	@ 0x47
 8003dfc:	d1bf      	bne.n	8003d7e <_printf_float+0xee>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1bd      	bne.n	8003d7e <_printf_float+0xee>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e7ba      	b.n	8003d7c <_printf_float+0xec>
 8003e06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e0a:	d9dc      	bls.n	8003dc6 <_printf_float+0x136>
 8003e0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003e10:	d118      	bne.n	8003e44 <_printf_float+0x1b4>
 8003e12:	2900      	cmp	r1, #0
 8003e14:	6863      	ldr	r3, [r4, #4]
 8003e16:	dd0b      	ble.n	8003e30 <_printf_float+0x1a0>
 8003e18:	6121      	str	r1, [r4, #16]
 8003e1a:	b913      	cbnz	r3, 8003e22 <_printf_float+0x192>
 8003e1c:	6822      	ldr	r2, [r4, #0]
 8003e1e:	07d0      	lsls	r0, r2, #31
 8003e20:	d502      	bpl.n	8003e28 <_printf_float+0x198>
 8003e22:	3301      	adds	r3, #1
 8003e24:	440b      	add	r3, r1
 8003e26:	6123      	str	r3, [r4, #16]
 8003e28:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003e2a:	f04f 0900 	mov.w	r9, #0
 8003e2e:	e7dc      	b.n	8003dea <_printf_float+0x15a>
 8003e30:	b913      	cbnz	r3, 8003e38 <_printf_float+0x1a8>
 8003e32:	6822      	ldr	r2, [r4, #0]
 8003e34:	07d2      	lsls	r2, r2, #31
 8003e36:	d501      	bpl.n	8003e3c <_printf_float+0x1ac>
 8003e38:	3302      	adds	r3, #2
 8003e3a:	e7f4      	b.n	8003e26 <_printf_float+0x196>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e7f2      	b.n	8003e26 <_printf_float+0x196>
 8003e40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003e44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e46:	4299      	cmp	r1, r3
 8003e48:	db05      	blt.n	8003e56 <_printf_float+0x1c6>
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	6121      	str	r1, [r4, #16]
 8003e4e:	07d8      	lsls	r0, r3, #31
 8003e50:	d5ea      	bpl.n	8003e28 <_printf_float+0x198>
 8003e52:	1c4b      	adds	r3, r1, #1
 8003e54:	e7e7      	b.n	8003e26 <_printf_float+0x196>
 8003e56:	2900      	cmp	r1, #0
 8003e58:	bfd4      	ite	le
 8003e5a:	f1c1 0202 	rsble	r2, r1, #2
 8003e5e:	2201      	movgt	r2, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	e7e0      	b.n	8003e26 <_printf_float+0x196>
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	055a      	lsls	r2, r3, #21
 8003e68:	d407      	bmi.n	8003e7a <_printf_float+0x1ea>
 8003e6a:	6923      	ldr	r3, [r4, #16]
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	4631      	mov	r1, r6
 8003e70:	4628      	mov	r0, r5
 8003e72:	47b8      	blx	r7
 8003e74:	3001      	adds	r0, #1
 8003e76:	d12b      	bne.n	8003ed0 <_printf_float+0x240>
 8003e78:	e765      	b.n	8003d46 <_printf_float+0xb6>
 8003e7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e7e:	f240 80dd 	bls.w	800403c <_printf_float+0x3ac>
 8003e82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e86:	2200      	movs	r2, #0
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f7fc fe1d 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d033      	beq.n	8003efa <_printf_float+0x26a>
 8003e92:	4a37      	ldr	r2, [pc, #220]	@ (8003f70 <_printf_float+0x2e0>)
 8003e94:	2301      	movs	r3, #1
 8003e96:	4631      	mov	r1, r6
 8003e98:	4628      	mov	r0, r5
 8003e9a:	47b8      	blx	r7
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	f43f af52 	beq.w	8003d46 <_printf_float+0xb6>
 8003ea2:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003ea6:	4543      	cmp	r3, r8
 8003ea8:	db02      	blt.n	8003eb0 <_printf_float+0x220>
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	07d8      	lsls	r0, r3, #31
 8003eae:	d50f      	bpl.n	8003ed0 <_printf_float+0x240>
 8003eb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003eb4:	4631      	mov	r1, r6
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	47b8      	blx	r7
 8003eba:	3001      	adds	r0, #1
 8003ebc:	f43f af43 	beq.w	8003d46 <_printf_float+0xb6>
 8003ec0:	f04f 0900 	mov.w	r9, #0
 8003ec4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003ec8:	f104 0a1a 	add.w	sl, r4, #26
 8003ecc:	45c8      	cmp	r8, r9
 8003ece:	dc09      	bgt.n	8003ee4 <_printf_float+0x254>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	079b      	lsls	r3, r3, #30
 8003ed4:	f100 8103 	bmi.w	80040de <_printf_float+0x44e>
 8003ed8:	68e0      	ldr	r0, [r4, #12]
 8003eda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003edc:	4298      	cmp	r0, r3
 8003ede:	bfb8      	it	lt
 8003ee0:	4618      	movlt	r0, r3
 8003ee2:	e732      	b.n	8003d4a <_printf_float+0xba>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	4652      	mov	r2, sl
 8003ee8:	4631      	mov	r1, r6
 8003eea:	4628      	mov	r0, r5
 8003eec:	47b8      	blx	r7
 8003eee:	3001      	adds	r0, #1
 8003ef0:	f43f af29 	beq.w	8003d46 <_printf_float+0xb6>
 8003ef4:	f109 0901 	add.w	r9, r9, #1
 8003ef8:	e7e8      	b.n	8003ecc <_printf_float+0x23c>
 8003efa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	dc39      	bgt.n	8003f74 <_printf_float+0x2e4>
 8003f00:	4a1b      	ldr	r2, [pc, #108]	@ (8003f70 <_printf_float+0x2e0>)
 8003f02:	2301      	movs	r3, #1
 8003f04:	4631      	mov	r1, r6
 8003f06:	4628      	mov	r0, r5
 8003f08:	47b8      	blx	r7
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	f43f af1b 	beq.w	8003d46 <_printf_float+0xb6>
 8003f10:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003f14:	ea59 0303 	orrs.w	r3, r9, r3
 8003f18:	d102      	bne.n	8003f20 <_printf_float+0x290>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	07d9      	lsls	r1, r3, #31
 8003f1e:	d5d7      	bpl.n	8003ed0 <_printf_float+0x240>
 8003f20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f24:	4631      	mov	r1, r6
 8003f26:	4628      	mov	r0, r5
 8003f28:	47b8      	blx	r7
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	f43f af0b 	beq.w	8003d46 <_printf_float+0xb6>
 8003f30:	f04f 0a00 	mov.w	sl, #0
 8003f34:	f104 0b1a 	add.w	fp, r4, #26
 8003f38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f3a:	425b      	negs	r3, r3
 8003f3c:	4553      	cmp	r3, sl
 8003f3e:	dc01      	bgt.n	8003f44 <_printf_float+0x2b4>
 8003f40:	464b      	mov	r3, r9
 8003f42:	e793      	b.n	8003e6c <_printf_float+0x1dc>
 8003f44:	2301      	movs	r3, #1
 8003f46:	465a      	mov	r2, fp
 8003f48:	4631      	mov	r1, r6
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	47b8      	blx	r7
 8003f4e:	3001      	adds	r0, #1
 8003f50:	f43f aef9 	beq.w	8003d46 <_printf_float+0xb6>
 8003f54:	f10a 0a01 	add.w	sl, sl, #1
 8003f58:	e7ee      	b.n	8003f38 <_printf_float+0x2a8>
 8003f5a:	bf00      	nop
 8003f5c:	7fefffff 	.word	0x7fefffff
 8003f60:	08008240 	.word	0x08008240
 8003f64:	08008244 	.word	0x08008244
 8003f68:	08008248 	.word	0x08008248
 8003f6c:	0800824c 	.word	0x0800824c
 8003f70:	08008250 	.word	0x08008250
 8003f74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f76:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003f7a:	4553      	cmp	r3, sl
 8003f7c:	bfa8      	it	ge
 8003f7e:	4653      	movge	r3, sl
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	4699      	mov	r9, r3
 8003f84:	dc36      	bgt.n	8003ff4 <_printf_float+0x364>
 8003f86:	f04f 0b00 	mov.w	fp, #0
 8003f8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f8e:	f104 021a 	add.w	r2, r4, #26
 8003f92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f94:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f96:	eba3 0309 	sub.w	r3, r3, r9
 8003f9a:	455b      	cmp	r3, fp
 8003f9c:	dc31      	bgt.n	8004002 <_printf_float+0x372>
 8003f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fa0:	459a      	cmp	sl, r3
 8003fa2:	dc3a      	bgt.n	800401a <_printf_float+0x38a>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	07da      	lsls	r2, r3, #31
 8003fa8:	d437      	bmi.n	800401a <_printf_float+0x38a>
 8003faa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fac:	ebaa 0903 	sub.w	r9, sl, r3
 8003fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fb2:	ebaa 0303 	sub.w	r3, sl, r3
 8003fb6:	4599      	cmp	r9, r3
 8003fb8:	bfa8      	it	ge
 8003fba:	4699      	movge	r9, r3
 8003fbc:	f1b9 0f00 	cmp.w	r9, #0
 8003fc0:	dc33      	bgt.n	800402a <_printf_float+0x39a>
 8003fc2:	f04f 0800 	mov.w	r8, #0
 8003fc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fca:	f104 0b1a 	add.w	fp, r4, #26
 8003fce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fd0:	ebaa 0303 	sub.w	r3, sl, r3
 8003fd4:	eba3 0309 	sub.w	r3, r3, r9
 8003fd8:	4543      	cmp	r3, r8
 8003fda:	f77f af79 	ble.w	8003ed0 <_printf_float+0x240>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	465a      	mov	r2, fp
 8003fe2:	4631      	mov	r1, r6
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	47b8      	blx	r7
 8003fe8:	3001      	adds	r0, #1
 8003fea:	f43f aeac 	beq.w	8003d46 <_printf_float+0xb6>
 8003fee:	f108 0801 	add.w	r8, r8, #1
 8003ff2:	e7ec      	b.n	8003fce <_printf_float+0x33e>
 8003ff4:	4642      	mov	r2, r8
 8003ff6:	4631      	mov	r1, r6
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	47b8      	blx	r7
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d1c2      	bne.n	8003f86 <_printf_float+0x2f6>
 8004000:	e6a1      	b.n	8003d46 <_printf_float+0xb6>
 8004002:	2301      	movs	r3, #1
 8004004:	4631      	mov	r1, r6
 8004006:	4628      	mov	r0, r5
 8004008:	920a      	str	r2, [sp, #40]	@ 0x28
 800400a:	47b8      	blx	r7
 800400c:	3001      	adds	r0, #1
 800400e:	f43f ae9a 	beq.w	8003d46 <_printf_float+0xb6>
 8004012:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004014:	f10b 0b01 	add.w	fp, fp, #1
 8004018:	e7bb      	b.n	8003f92 <_printf_float+0x302>
 800401a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800401e:	4631      	mov	r1, r6
 8004020:	4628      	mov	r0, r5
 8004022:	47b8      	blx	r7
 8004024:	3001      	adds	r0, #1
 8004026:	d1c0      	bne.n	8003faa <_printf_float+0x31a>
 8004028:	e68d      	b.n	8003d46 <_printf_float+0xb6>
 800402a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800402c:	464b      	mov	r3, r9
 800402e:	4442      	add	r2, r8
 8004030:	4631      	mov	r1, r6
 8004032:	4628      	mov	r0, r5
 8004034:	47b8      	blx	r7
 8004036:	3001      	adds	r0, #1
 8004038:	d1c3      	bne.n	8003fc2 <_printf_float+0x332>
 800403a:	e684      	b.n	8003d46 <_printf_float+0xb6>
 800403c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004040:	f1ba 0f01 	cmp.w	sl, #1
 8004044:	dc01      	bgt.n	800404a <_printf_float+0x3ba>
 8004046:	07db      	lsls	r3, r3, #31
 8004048:	d536      	bpl.n	80040b8 <_printf_float+0x428>
 800404a:	2301      	movs	r3, #1
 800404c:	4642      	mov	r2, r8
 800404e:	4631      	mov	r1, r6
 8004050:	4628      	mov	r0, r5
 8004052:	47b8      	blx	r7
 8004054:	3001      	adds	r0, #1
 8004056:	f43f ae76 	beq.w	8003d46 <_printf_float+0xb6>
 800405a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800405e:	4631      	mov	r1, r6
 8004060:	4628      	mov	r0, r5
 8004062:	47b8      	blx	r7
 8004064:	3001      	adds	r0, #1
 8004066:	f43f ae6e 	beq.w	8003d46 <_printf_float+0xb6>
 800406a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800406e:	2200      	movs	r2, #0
 8004070:	2300      	movs	r3, #0
 8004072:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004076:	f7fc fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 800407a:	b9c0      	cbnz	r0, 80040ae <_printf_float+0x41e>
 800407c:	4653      	mov	r3, sl
 800407e:	f108 0201 	add.w	r2, r8, #1
 8004082:	4631      	mov	r1, r6
 8004084:	4628      	mov	r0, r5
 8004086:	47b8      	blx	r7
 8004088:	3001      	adds	r0, #1
 800408a:	d10c      	bne.n	80040a6 <_printf_float+0x416>
 800408c:	e65b      	b.n	8003d46 <_printf_float+0xb6>
 800408e:	2301      	movs	r3, #1
 8004090:	465a      	mov	r2, fp
 8004092:	4631      	mov	r1, r6
 8004094:	4628      	mov	r0, r5
 8004096:	47b8      	blx	r7
 8004098:	3001      	adds	r0, #1
 800409a:	f43f ae54 	beq.w	8003d46 <_printf_float+0xb6>
 800409e:	f108 0801 	add.w	r8, r8, #1
 80040a2:	45d0      	cmp	r8, sl
 80040a4:	dbf3      	blt.n	800408e <_printf_float+0x3fe>
 80040a6:	464b      	mov	r3, r9
 80040a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80040ac:	e6df      	b.n	8003e6e <_printf_float+0x1de>
 80040ae:	f04f 0800 	mov.w	r8, #0
 80040b2:	f104 0b1a 	add.w	fp, r4, #26
 80040b6:	e7f4      	b.n	80040a2 <_printf_float+0x412>
 80040b8:	2301      	movs	r3, #1
 80040ba:	4642      	mov	r2, r8
 80040bc:	e7e1      	b.n	8004082 <_printf_float+0x3f2>
 80040be:	2301      	movs	r3, #1
 80040c0:	464a      	mov	r2, r9
 80040c2:	4631      	mov	r1, r6
 80040c4:	4628      	mov	r0, r5
 80040c6:	47b8      	blx	r7
 80040c8:	3001      	adds	r0, #1
 80040ca:	f43f ae3c 	beq.w	8003d46 <_printf_float+0xb6>
 80040ce:	f108 0801 	add.w	r8, r8, #1
 80040d2:	68e3      	ldr	r3, [r4, #12]
 80040d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80040d6:	1a5b      	subs	r3, r3, r1
 80040d8:	4543      	cmp	r3, r8
 80040da:	dcf0      	bgt.n	80040be <_printf_float+0x42e>
 80040dc:	e6fc      	b.n	8003ed8 <_printf_float+0x248>
 80040de:	f04f 0800 	mov.w	r8, #0
 80040e2:	f104 0919 	add.w	r9, r4, #25
 80040e6:	e7f4      	b.n	80040d2 <_printf_float+0x442>

080040e8 <_printf_common>:
 80040e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040ec:	4616      	mov	r6, r2
 80040ee:	4698      	mov	r8, r3
 80040f0:	688a      	ldr	r2, [r1, #8]
 80040f2:	690b      	ldr	r3, [r1, #16]
 80040f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040f8:	4293      	cmp	r3, r2
 80040fa:	bfb8      	it	lt
 80040fc:	4613      	movlt	r3, r2
 80040fe:	6033      	str	r3, [r6, #0]
 8004100:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004104:	4607      	mov	r7, r0
 8004106:	460c      	mov	r4, r1
 8004108:	b10a      	cbz	r2, 800410e <_printf_common+0x26>
 800410a:	3301      	adds	r3, #1
 800410c:	6033      	str	r3, [r6, #0]
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	0699      	lsls	r1, r3, #26
 8004112:	bf42      	ittt	mi
 8004114:	6833      	ldrmi	r3, [r6, #0]
 8004116:	3302      	addmi	r3, #2
 8004118:	6033      	strmi	r3, [r6, #0]
 800411a:	6825      	ldr	r5, [r4, #0]
 800411c:	f015 0506 	ands.w	r5, r5, #6
 8004120:	d106      	bne.n	8004130 <_printf_common+0x48>
 8004122:	f104 0a19 	add.w	sl, r4, #25
 8004126:	68e3      	ldr	r3, [r4, #12]
 8004128:	6832      	ldr	r2, [r6, #0]
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	42ab      	cmp	r3, r5
 800412e:	dc26      	bgt.n	800417e <_printf_common+0x96>
 8004130:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004134:	6822      	ldr	r2, [r4, #0]
 8004136:	3b00      	subs	r3, #0
 8004138:	bf18      	it	ne
 800413a:	2301      	movne	r3, #1
 800413c:	0692      	lsls	r2, r2, #26
 800413e:	d42b      	bmi.n	8004198 <_printf_common+0xb0>
 8004140:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004144:	4641      	mov	r1, r8
 8004146:	4638      	mov	r0, r7
 8004148:	47c8      	blx	r9
 800414a:	3001      	adds	r0, #1
 800414c:	d01e      	beq.n	800418c <_printf_common+0xa4>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	6922      	ldr	r2, [r4, #16]
 8004152:	f003 0306 	and.w	r3, r3, #6
 8004156:	2b04      	cmp	r3, #4
 8004158:	bf02      	ittt	eq
 800415a:	68e5      	ldreq	r5, [r4, #12]
 800415c:	6833      	ldreq	r3, [r6, #0]
 800415e:	1aed      	subeq	r5, r5, r3
 8004160:	68a3      	ldr	r3, [r4, #8]
 8004162:	bf0c      	ite	eq
 8004164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004168:	2500      	movne	r5, #0
 800416a:	4293      	cmp	r3, r2
 800416c:	bfc4      	itt	gt
 800416e:	1a9b      	subgt	r3, r3, r2
 8004170:	18ed      	addgt	r5, r5, r3
 8004172:	2600      	movs	r6, #0
 8004174:	341a      	adds	r4, #26
 8004176:	42b5      	cmp	r5, r6
 8004178:	d11a      	bne.n	80041b0 <_printf_common+0xc8>
 800417a:	2000      	movs	r0, #0
 800417c:	e008      	b.n	8004190 <_printf_common+0xa8>
 800417e:	2301      	movs	r3, #1
 8004180:	4652      	mov	r2, sl
 8004182:	4641      	mov	r1, r8
 8004184:	4638      	mov	r0, r7
 8004186:	47c8      	blx	r9
 8004188:	3001      	adds	r0, #1
 800418a:	d103      	bne.n	8004194 <_printf_common+0xac>
 800418c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004194:	3501      	adds	r5, #1
 8004196:	e7c6      	b.n	8004126 <_printf_common+0x3e>
 8004198:	18e1      	adds	r1, r4, r3
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	2030      	movs	r0, #48	@ 0x30
 800419e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041a2:	4422      	add	r2, r4
 80041a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041ac:	3302      	adds	r3, #2
 80041ae:	e7c7      	b.n	8004140 <_printf_common+0x58>
 80041b0:	2301      	movs	r3, #1
 80041b2:	4622      	mov	r2, r4
 80041b4:	4641      	mov	r1, r8
 80041b6:	4638      	mov	r0, r7
 80041b8:	47c8      	blx	r9
 80041ba:	3001      	adds	r0, #1
 80041bc:	d0e6      	beq.n	800418c <_printf_common+0xa4>
 80041be:	3601      	adds	r6, #1
 80041c0:	e7d9      	b.n	8004176 <_printf_common+0x8e>
	...

080041c4 <_printf_i>:
 80041c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c8:	7e0f      	ldrb	r7, [r1, #24]
 80041ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041cc:	2f78      	cmp	r7, #120	@ 0x78
 80041ce:	4691      	mov	r9, r2
 80041d0:	4680      	mov	r8, r0
 80041d2:	460c      	mov	r4, r1
 80041d4:	469a      	mov	sl, r3
 80041d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041da:	d807      	bhi.n	80041ec <_printf_i+0x28>
 80041dc:	2f62      	cmp	r7, #98	@ 0x62
 80041de:	d80a      	bhi.n	80041f6 <_printf_i+0x32>
 80041e0:	2f00      	cmp	r7, #0
 80041e2:	f000 80d2 	beq.w	800438a <_printf_i+0x1c6>
 80041e6:	2f58      	cmp	r7, #88	@ 0x58
 80041e8:	f000 80b9 	beq.w	800435e <_printf_i+0x19a>
 80041ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041f4:	e03a      	b.n	800426c <_printf_i+0xa8>
 80041f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041fa:	2b15      	cmp	r3, #21
 80041fc:	d8f6      	bhi.n	80041ec <_printf_i+0x28>
 80041fe:	a101      	add	r1, pc, #4	@ (adr r1, 8004204 <_printf_i+0x40>)
 8004200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004204:	0800425d 	.word	0x0800425d
 8004208:	08004271 	.word	0x08004271
 800420c:	080041ed 	.word	0x080041ed
 8004210:	080041ed 	.word	0x080041ed
 8004214:	080041ed 	.word	0x080041ed
 8004218:	080041ed 	.word	0x080041ed
 800421c:	08004271 	.word	0x08004271
 8004220:	080041ed 	.word	0x080041ed
 8004224:	080041ed 	.word	0x080041ed
 8004228:	080041ed 	.word	0x080041ed
 800422c:	080041ed 	.word	0x080041ed
 8004230:	08004371 	.word	0x08004371
 8004234:	0800429b 	.word	0x0800429b
 8004238:	0800432b 	.word	0x0800432b
 800423c:	080041ed 	.word	0x080041ed
 8004240:	080041ed 	.word	0x080041ed
 8004244:	08004393 	.word	0x08004393
 8004248:	080041ed 	.word	0x080041ed
 800424c:	0800429b 	.word	0x0800429b
 8004250:	080041ed 	.word	0x080041ed
 8004254:	080041ed 	.word	0x080041ed
 8004258:	08004333 	.word	0x08004333
 800425c:	6833      	ldr	r3, [r6, #0]
 800425e:	1d1a      	adds	r2, r3, #4
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6032      	str	r2, [r6, #0]
 8004264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004268:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800426c:	2301      	movs	r3, #1
 800426e:	e09d      	b.n	80043ac <_printf_i+0x1e8>
 8004270:	6833      	ldr	r3, [r6, #0]
 8004272:	6820      	ldr	r0, [r4, #0]
 8004274:	1d19      	adds	r1, r3, #4
 8004276:	6031      	str	r1, [r6, #0]
 8004278:	0606      	lsls	r6, r0, #24
 800427a:	d501      	bpl.n	8004280 <_printf_i+0xbc>
 800427c:	681d      	ldr	r5, [r3, #0]
 800427e:	e003      	b.n	8004288 <_printf_i+0xc4>
 8004280:	0645      	lsls	r5, r0, #25
 8004282:	d5fb      	bpl.n	800427c <_printf_i+0xb8>
 8004284:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004288:	2d00      	cmp	r5, #0
 800428a:	da03      	bge.n	8004294 <_printf_i+0xd0>
 800428c:	232d      	movs	r3, #45	@ 0x2d
 800428e:	426d      	negs	r5, r5
 8004290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004294:	4859      	ldr	r0, [pc, #356]	@ (80043fc <_printf_i+0x238>)
 8004296:	230a      	movs	r3, #10
 8004298:	e011      	b.n	80042be <_printf_i+0xfa>
 800429a:	6821      	ldr	r1, [r4, #0]
 800429c:	6833      	ldr	r3, [r6, #0]
 800429e:	0608      	lsls	r0, r1, #24
 80042a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80042a4:	d402      	bmi.n	80042ac <_printf_i+0xe8>
 80042a6:	0649      	lsls	r1, r1, #25
 80042a8:	bf48      	it	mi
 80042aa:	b2ad      	uxthmi	r5, r5
 80042ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80042ae:	4853      	ldr	r0, [pc, #332]	@ (80043fc <_printf_i+0x238>)
 80042b0:	6033      	str	r3, [r6, #0]
 80042b2:	bf14      	ite	ne
 80042b4:	230a      	movne	r3, #10
 80042b6:	2308      	moveq	r3, #8
 80042b8:	2100      	movs	r1, #0
 80042ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042be:	6866      	ldr	r6, [r4, #4]
 80042c0:	60a6      	str	r6, [r4, #8]
 80042c2:	2e00      	cmp	r6, #0
 80042c4:	bfa2      	ittt	ge
 80042c6:	6821      	ldrge	r1, [r4, #0]
 80042c8:	f021 0104 	bicge.w	r1, r1, #4
 80042cc:	6021      	strge	r1, [r4, #0]
 80042ce:	b90d      	cbnz	r5, 80042d4 <_printf_i+0x110>
 80042d0:	2e00      	cmp	r6, #0
 80042d2:	d04b      	beq.n	800436c <_printf_i+0x1a8>
 80042d4:	4616      	mov	r6, r2
 80042d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80042da:	fb03 5711 	mls	r7, r3, r1, r5
 80042de:	5dc7      	ldrb	r7, [r0, r7]
 80042e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042e4:	462f      	mov	r7, r5
 80042e6:	42bb      	cmp	r3, r7
 80042e8:	460d      	mov	r5, r1
 80042ea:	d9f4      	bls.n	80042d6 <_printf_i+0x112>
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d10b      	bne.n	8004308 <_printf_i+0x144>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	07df      	lsls	r7, r3, #31
 80042f4:	d508      	bpl.n	8004308 <_printf_i+0x144>
 80042f6:	6923      	ldr	r3, [r4, #16]
 80042f8:	6861      	ldr	r1, [r4, #4]
 80042fa:	4299      	cmp	r1, r3
 80042fc:	bfde      	ittt	le
 80042fe:	2330      	movle	r3, #48	@ 0x30
 8004300:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004304:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004308:	1b92      	subs	r2, r2, r6
 800430a:	6122      	str	r2, [r4, #16]
 800430c:	f8cd a000 	str.w	sl, [sp]
 8004310:	464b      	mov	r3, r9
 8004312:	aa03      	add	r2, sp, #12
 8004314:	4621      	mov	r1, r4
 8004316:	4640      	mov	r0, r8
 8004318:	f7ff fee6 	bl	80040e8 <_printf_common>
 800431c:	3001      	adds	r0, #1
 800431e:	d14a      	bne.n	80043b6 <_printf_i+0x1f2>
 8004320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004324:	b004      	add	sp, #16
 8004326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	f043 0320 	orr.w	r3, r3, #32
 8004330:	6023      	str	r3, [r4, #0]
 8004332:	4833      	ldr	r0, [pc, #204]	@ (8004400 <_printf_i+0x23c>)
 8004334:	2778      	movs	r7, #120	@ 0x78
 8004336:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	6831      	ldr	r1, [r6, #0]
 800433e:	061f      	lsls	r7, r3, #24
 8004340:	f851 5b04 	ldr.w	r5, [r1], #4
 8004344:	d402      	bmi.n	800434c <_printf_i+0x188>
 8004346:	065f      	lsls	r7, r3, #25
 8004348:	bf48      	it	mi
 800434a:	b2ad      	uxthmi	r5, r5
 800434c:	6031      	str	r1, [r6, #0]
 800434e:	07d9      	lsls	r1, r3, #31
 8004350:	bf44      	itt	mi
 8004352:	f043 0320 	orrmi.w	r3, r3, #32
 8004356:	6023      	strmi	r3, [r4, #0]
 8004358:	b11d      	cbz	r5, 8004362 <_printf_i+0x19e>
 800435a:	2310      	movs	r3, #16
 800435c:	e7ac      	b.n	80042b8 <_printf_i+0xf4>
 800435e:	4827      	ldr	r0, [pc, #156]	@ (80043fc <_printf_i+0x238>)
 8004360:	e7e9      	b.n	8004336 <_printf_i+0x172>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	f023 0320 	bic.w	r3, r3, #32
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	e7f6      	b.n	800435a <_printf_i+0x196>
 800436c:	4616      	mov	r6, r2
 800436e:	e7bd      	b.n	80042ec <_printf_i+0x128>
 8004370:	6833      	ldr	r3, [r6, #0]
 8004372:	6825      	ldr	r5, [r4, #0]
 8004374:	6961      	ldr	r1, [r4, #20]
 8004376:	1d18      	adds	r0, r3, #4
 8004378:	6030      	str	r0, [r6, #0]
 800437a:	062e      	lsls	r6, r5, #24
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	d501      	bpl.n	8004384 <_printf_i+0x1c0>
 8004380:	6019      	str	r1, [r3, #0]
 8004382:	e002      	b.n	800438a <_printf_i+0x1c6>
 8004384:	0668      	lsls	r0, r5, #25
 8004386:	d5fb      	bpl.n	8004380 <_printf_i+0x1bc>
 8004388:	8019      	strh	r1, [r3, #0]
 800438a:	2300      	movs	r3, #0
 800438c:	6123      	str	r3, [r4, #16]
 800438e:	4616      	mov	r6, r2
 8004390:	e7bc      	b.n	800430c <_printf_i+0x148>
 8004392:	6833      	ldr	r3, [r6, #0]
 8004394:	1d1a      	adds	r2, r3, #4
 8004396:	6032      	str	r2, [r6, #0]
 8004398:	681e      	ldr	r6, [r3, #0]
 800439a:	6862      	ldr	r2, [r4, #4]
 800439c:	2100      	movs	r1, #0
 800439e:	4630      	mov	r0, r6
 80043a0:	f7fb ff16 	bl	80001d0 <memchr>
 80043a4:	b108      	cbz	r0, 80043aa <_printf_i+0x1e6>
 80043a6:	1b80      	subs	r0, r0, r6
 80043a8:	6060      	str	r0, [r4, #4]
 80043aa:	6863      	ldr	r3, [r4, #4]
 80043ac:	6123      	str	r3, [r4, #16]
 80043ae:	2300      	movs	r3, #0
 80043b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043b4:	e7aa      	b.n	800430c <_printf_i+0x148>
 80043b6:	6923      	ldr	r3, [r4, #16]
 80043b8:	4632      	mov	r2, r6
 80043ba:	4649      	mov	r1, r9
 80043bc:	4640      	mov	r0, r8
 80043be:	47d0      	blx	sl
 80043c0:	3001      	adds	r0, #1
 80043c2:	d0ad      	beq.n	8004320 <_printf_i+0x15c>
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	079b      	lsls	r3, r3, #30
 80043c8:	d413      	bmi.n	80043f2 <_printf_i+0x22e>
 80043ca:	68e0      	ldr	r0, [r4, #12]
 80043cc:	9b03      	ldr	r3, [sp, #12]
 80043ce:	4298      	cmp	r0, r3
 80043d0:	bfb8      	it	lt
 80043d2:	4618      	movlt	r0, r3
 80043d4:	e7a6      	b.n	8004324 <_printf_i+0x160>
 80043d6:	2301      	movs	r3, #1
 80043d8:	4632      	mov	r2, r6
 80043da:	4649      	mov	r1, r9
 80043dc:	4640      	mov	r0, r8
 80043de:	47d0      	blx	sl
 80043e0:	3001      	adds	r0, #1
 80043e2:	d09d      	beq.n	8004320 <_printf_i+0x15c>
 80043e4:	3501      	adds	r5, #1
 80043e6:	68e3      	ldr	r3, [r4, #12]
 80043e8:	9903      	ldr	r1, [sp, #12]
 80043ea:	1a5b      	subs	r3, r3, r1
 80043ec:	42ab      	cmp	r3, r5
 80043ee:	dcf2      	bgt.n	80043d6 <_printf_i+0x212>
 80043f0:	e7eb      	b.n	80043ca <_printf_i+0x206>
 80043f2:	2500      	movs	r5, #0
 80043f4:	f104 0619 	add.w	r6, r4, #25
 80043f8:	e7f5      	b.n	80043e6 <_printf_i+0x222>
 80043fa:	bf00      	nop
 80043fc:	08008252 	.word	0x08008252
 8004400:	08008263 	.word	0x08008263

08004404 <_scanf_float>:
 8004404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	b087      	sub	sp, #28
 800440a:	4617      	mov	r7, r2
 800440c:	9303      	str	r3, [sp, #12]
 800440e:	688b      	ldr	r3, [r1, #8]
 8004410:	1e5a      	subs	r2, r3, #1
 8004412:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004416:	bf81      	itttt	hi
 8004418:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800441c:	eb03 0b05 	addhi.w	fp, r3, r5
 8004420:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004424:	608b      	strhi	r3, [r1, #8]
 8004426:	680b      	ldr	r3, [r1, #0]
 8004428:	460a      	mov	r2, r1
 800442a:	f04f 0500 	mov.w	r5, #0
 800442e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004432:	f842 3b1c 	str.w	r3, [r2], #28
 8004436:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800443a:	4680      	mov	r8, r0
 800443c:	460c      	mov	r4, r1
 800443e:	bf98      	it	ls
 8004440:	f04f 0b00 	movls.w	fp, #0
 8004444:	9201      	str	r2, [sp, #4]
 8004446:	4616      	mov	r6, r2
 8004448:	46aa      	mov	sl, r5
 800444a:	46a9      	mov	r9, r5
 800444c:	9502      	str	r5, [sp, #8]
 800444e:	68a2      	ldr	r2, [r4, #8]
 8004450:	b152      	cbz	r2, 8004468 <_scanf_float+0x64>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b4e      	cmp	r3, #78	@ 0x4e
 8004458:	d864      	bhi.n	8004524 <_scanf_float+0x120>
 800445a:	2b40      	cmp	r3, #64	@ 0x40
 800445c:	d83c      	bhi.n	80044d8 <_scanf_float+0xd4>
 800445e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004462:	b2c8      	uxtb	r0, r1
 8004464:	280e      	cmp	r0, #14
 8004466:	d93a      	bls.n	80044de <_scanf_float+0xda>
 8004468:	f1b9 0f00 	cmp.w	r9, #0
 800446c:	d003      	beq.n	8004476 <_scanf_float+0x72>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800447a:	f1ba 0f01 	cmp.w	sl, #1
 800447e:	f200 8117 	bhi.w	80046b0 <_scanf_float+0x2ac>
 8004482:	9b01      	ldr	r3, [sp, #4]
 8004484:	429e      	cmp	r6, r3
 8004486:	f200 8108 	bhi.w	800469a <_scanf_float+0x296>
 800448a:	2001      	movs	r0, #1
 800448c:	b007      	add	sp, #28
 800448e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004492:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004496:	2a0d      	cmp	r2, #13
 8004498:	d8e6      	bhi.n	8004468 <_scanf_float+0x64>
 800449a:	a101      	add	r1, pc, #4	@ (adr r1, 80044a0 <_scanf_float+0x9c>)
 800449c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80044a0:	080045e7 	.word	0x080045e7
 80044a4:	08004469 	.word	0x08004469
 80044a8:	08004469 	.word	0x08004469
 80044ac:	08004469 	.word	0x08004469
 80044b0:	08004647 	.word	0x08004647
 80044b4:	0800461f 	.word	0x0800461f
 80044b8:	08004469 	.word	0x08004469
 80044bc:	08004469 	.word	0x08004469
 80044c0:	080045f5 	.word	0x080045f5
 80044c4:	08004469 	.word	0x08004469
 80044c8:	08004469 	.word	0x08004469
 80044cc:	08004469 	.word	0x08004469
 80044d0:	08004469 	.word	0x08004469
 80044d4:	080045ad 	.word	0x080045ad
 80044d8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80044dc:	e7db      	b.n	8004496 <_scanf_float+0x92>
 80044de:	290e      	cmp	r1, #14
 80044e0:	d8c2      	bhi.n	8004468 <_scanf_float+0x64>
 80044e2:	a001      	add	r0, pc, #4	@ (adr r0, 80044e8 <_scanf_float+0xe4>)
 80044e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80044e8:	0800459d 	.word	0x0800459d
 80044ec:	08004469 	.word	0x08004469
 80044f0:	0800459d 	.word	0x0800459d
 80044f4:	08004633 	.word	0x08004633
 80044f8:	08004469 	.word	0x08004469
 80044fc:	08004545 	.word	0x08004545
 8004500:	08004583 	.word	0x08004583
 8004504:	08004583 	.word	0x08004583
 8004508:	08004583 	.word	0x08004583
 800450c:	08004583 	.word	0x08004583
 8004510:	08004583 	.word	0x08004583
 8004514:	08004583 	.word	0x08004583
 8004518:	08004583 	.word	0x08004583
 800451c:	08004583 	.word	0x08004583
 8004520:	08004583 	.word	0x08004583
 8004524:	2b6e      	cmp	r3, #110	@ 0x6e
 8004526:	d809      	bhi.n	800453c <_scanf_float+0x138>
 8004528:	2b60      	cmp	r3, #96	@ 0x60
 800452a:	d8b2      	bhi.n	8004492 <_scanf_float+0x8e>
 800452c:	2b54      	cmp	r3, #84	@ 0x54
 800452e:	d07b      	beq.n	8004628 <_scanf_float+0x224>
 8004530:	2b59      	cmp	r3, #89	@ 0x59
 8004532:	d199      	bne.n	8004468 <_scanf_float+0x64>
 8004534:	2d07      	cmp	r5, #7
 8004536:	d197      	bne.n	8004468 <_scanf_float+0x64>
 8004538:	2508      	movs	r5, #8
 800453a:	e02c      	b.n	8004596 <_scanf_float+0x192>
 800453c:	2b74      	cmp	r3, #116	@ 0x74
 800453e:	d073      	beq.n	8004628 <_scanf_float+0x224>
 8004540:	2b79      	cmp	r3, #121	@ 0x79
 8004542:	e7f6      	b.n	8004532 <_scanf_float+0x12e>
 8004544:	6821      	ldr	r1, [r4, #0]
 8004546:	05c8      	lsls	r0, r1, #23
 8004548:	d51b      	bpl.n	8004582 <_scanf_float+0x17e>
 800454a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800454e:	6021      	str	r1, [r4, #0]
 8004550:	f109 0901 	add.w	r9, r9, #1
 8004554:	f1bb 0f00 	cmp.w	fp, #0
 8004558:	d003      	beq.n	8004562 <_scanf_float+0x15e>
 800455a:	3201      	adds	r2, #1
 800455c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004560:	60a2      	str	r2, [r4, #8]
 8004562:	68a3      	ldr	r3, [r4, #8]
 8004564:	3b01      	subs	r3, #1
 8004566:	60a3      	str	r3, [r4, #8]
 8004568:	6923      	ldr	r3, [r4, #16]
 800456a:	3301      	adds	r3, #1
 800456c:	6123      	str	r3, [r4, #16]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3b01      	subs	r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	607b      	str	r3, [r7, #4]
 8004576:	f340 8087 	ble.w	8004688 <_scanf_float+0x284>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	e765      	b.n	800444e <_scanf_float+0x4a>
 8004582:	eb1a 0105 	adds.w	r1, sl, r5
 8004586:	f47f af6f 	bne.w	8004468 <_scanf_float+0x64>
 800458a:	6822      	ldr	r2, [r4, #0]
 800458c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004590:	6022      	str	r2, [r4, #0]
 8004592:	460d      	mov	r5, r1
 8004594:	468a      	mov	sl, r1
 8004596:	f806 3b01 	strb.w	r3, [r6], #1
 800459a:	e7e2      	b.n	8004562 <_scanf_float+0x15e>
 800459c:	6822      	ldr	r2, [r4, #0]
 800459e:	0610      	lsls	r0, r2, #24
 80045a0:	f57f af62 	bpl.w	8004468 <_scanf_float+0x64>
 80045a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045a8:	6022      	str	r2, [r4, #0]
 80045aa:	e7f4      	b.n	8004596 <_scanf_float+0x192>
 80045ac:	f1ba 0f00 	cmp.w	sl, #0
 80045b0:	d10e      	bne.n	80045d0 <_scanf_float+0x1cc>
 80045b2:	f1b9 0f00 	cmp.w	r9, #0
 80045b6:	d10e      	bne.n	80045d6 <_scanf_float+0x1d2>
 80045b8:	6822      	ldr	r2, [r4, #0]
 80045ba:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80045be:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80045c2:	d108      	bne.n	80045d6 <_scanf_float+0x1d2>
 80045c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80045c8:	6022      	str	r2, [r4, #0]
 80045ca:	f04f 0a01 	mov.w	sl, #1
 80045ce:	e7e2      	b.n	8004596 <_scanf_float+0x192>
 80045d0:	f1ba 0f02 	cmp.w	sl, #2
 80045d4:	d055      	beq.n	8004682 <_scanf_float+0x27e>
 80045d6:	2d01      	cmp	r5, #1
 80045d8:	d002      	beq.n	80045e0 <_scanf_float+0x1dc>
 80045da:	2d04      	cmp	r5, #4
 80045dc:	f47f af44 	bne.w	8004468 <_scanf_float+0x64>
 80045e0:	3501      	adds	r5, #1
 80045e2:	b2ed      	uxtb	r5, r5
 80045e4:	e7d7      	b.n	8004596 <_scanf_float+0x192>
 80045e6:	f1ba 0f01 	cmp.w	sl, #1
 80045ea:	f47f af3d 	bne.w	8004468 <_scanf_float+0x64>
 80045ee:	f04f 0a02 	mov.w	sl, #2
 80045f2:	e7d0      	b.n	8004596 <_scanf_float+0x192>
 80045f4:	b97d      	cbnz	r5, 8004616 <_scanf_float+0x212>
 80045f6:	f1b9 0f00 	cmp.w	r9, #0
 80045fa:	f47f af38 	bne.w	800446e <_scanf_float+0x6a>
 80045fe:	6822      	ldr	r2, [r4, #0]
 8004600:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004604:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004608:	f040 8103 	bne.w	8004812 <_scanf_float+0x40e>
 800460c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004610:	6022      	str	r2, [r4, #0]
 8004612:	2501      	movs	r5, #1
 8004614:	e7bf      	b.n	8004596 <_scanf_float+0x192>
 8004616:	2d03      	cmp	r5, #3
 8004618:	d0e2      	beq.n	80045e0 <_scanf_float+0x1dc>
 800461a:	2d05      	cmp	r5, #5
 800461c:	e7de      	b.n	80045dc <_scanf_float+0x1d8>
 800461e:	2d02      	cmp	r5, #2
 8004620:	f47f af22 	bne.w	8004468 <_scanf_float+0x64>
 8004624:	2503      	movs	r5, #3
 8004626:	e7b6      	b.n	8004596 <_scanf_float+0x192>
 8004628:	2d06      	cmp	r5, #6
 800462a:	f47f af1d 	bne.w	8004468 <_scanf_float+0x64>
 800462e:	2507      	movs	r5, #7
 8004630:	e7b1      	b.n	8004596 <_scanf_float+0x192>
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	0591      	lsls	r1, r2, #22
 8004636:	f57f af17 	bpl.w	8004468 <_scanf_float+0x64>
 800463a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800463e:	6022      	str	r2, [r4, #0]
 8004640:	f8cd 9008 	str.w	r9, [sp, #8]
 8004644:	e7a7      	b.n	8004596 <_scanf_float+0x192>
 8004646:	6822      	ldr	r2, [r4, #0]
 8004648:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800464c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004650:	d006      	beq.n	8004660 <_scanf_float+0x25c>
 8004652:	0550      	lsls	r0, r2, #21
 8004654:	f57f af08 	bpl.w	8004468 <_scanf_float+0x64>
 8004658:	f1b9 0f00 	cmp.w	r9, #0
 800465c:	f000 80d9 	beq.w	8004812 <_scanf_float+0x40e>
 8004660:	0591      	lsls	r1, r2, #22
 8004662:	bf58      	it	pl
 8004664:	9902      	ldrpl	r1, [sp, #8]
 8004666:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800466a:	bf58      	it	pl
 800466c:	eba9 0101 	subpl.w	r1, r9, r1
 8004670:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004674:	bf58      	it	pl
 8004676:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800467a:	6022      	str	r2, [r4, #0]
 800467c:	f04f 0900 	mov.w	r9, #0
 8004680:	e789      	b.n	8004596 <_scanf_float+0x192>
 8004682:	f04f 0a03 	mov.w	sl, #3
 8004686:	e786      	b.n	8004596 <_scanf_float+0x192>
 8004688:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800468c:	4639      	mov	r1, r7
 800468e:	4640      	mov	r0, r8
 8004690:	4798      	blx	r3
 8004692:	2800      	cmp	r0, #0
 8004694:	f43f aedb 	beq.w	800444e <_scanf_float+0x4a>
 8004698:	e6e6      	b.n	8004468 <_scanf_float+0x64>
 800469a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800469e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046a2:	463a      	mov	r2, r7
 80046a4:	4640      	mov	r0, r8
 80046a6:	4798      	blx	r3
 80046a8:	6923      	ldr	r3, [r4, #16]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	e6e8      	b.n	8004482 <_scanf_float+0x7e>
 80046b0:	1e6b      	subs	r3, r5, #1
 80046b2:	2b06      	cmp	r3, #6
 80046b4:	d824      	bhi.n	8004700 <_scanf_float+0x2fc>
 80046b6:	2d02      	cmp	r5, #2
 80046b8:	d836      	bhi.n	8004728 <_scanf_float+0x324>
 80046ba:	9b01      	ldr	r3, [sp, #4]
 80046bc:	429e      	cmp	r6, r3
 80046be:	f67f aee4 	bls.w	800448a <_scanf_float+0x86>
 80046c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80046c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046ca:	463a      	mov	r2, r7
 80046cc:	4640      	mov	r0, r8
 80046ce:	4798      	blx	r3
 80046d0:	6923      	ldr	r3, [r4, #16]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	6123      	str	r3, [r4, #16]
 80046d6:	e7f0      	b.n	80046ba <_scanf_float+0x2b6>
 80046d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80046dc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80046e0:	463a      	mov	r2, r7
 80046e2:	4640      	mov	r0, r8
 80046e4:	4798      	blx	r3
 80046e6:	6923      	ldr	r3, [r4, #16]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	6123      	str	r3, [r4, #16]
 80046ec:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80046f0:	fa5f fa8a 	uxtb.w	sl, sl
 80046f4:	f1ba 0f02 	cmp.w	sl, #2
 80046f8:	d1ee      	bne.n	80046d8 <_scanf_float+0x2d4>
 80046fa:	3d03      	subs	r5, #3
 80046fc:	b2ed      	uxtb	r5, r5
 80046fe:	1b76      	subs	r6, r6, r5
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	05da      	lsls	r2, r3, #23
 8004704:	d530      	bpl.n	8004768 <_scanf_float+0x364>
 8004706:	055b      	lsls	r3, r3, #21
 8004708:	d511      	bpl.n	800472e <_scanf_float+0x32a>
 800470a:	9b01      	ldr	r3, [sp, #4]
 800470c:	429e      	cmp	r6, r3
 800470e:	f67f aebc 	bls.w	800448a <_scanf_float+0x86>
 8004712:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800471a:	463a      	mov	r2, r7
 800471c:	4640      	mov	r0, r8
 800471e:	4798      	blx	r3
 8004720:	6923      	ldr	r3, [r4, #16]
 8004722:	3b01      	subs	r3, #1
 8004724:	6123      	str	r3, [r4, #16]
 8004726:	e7f0      	b.n	800470a <_scanf_float+0x306>
 8004728:	46aa      	mov	sl, r5
 800472a:	46b3      	mov	fp, r6
 800472c:	e7de      	b.n	80046ec <_scanf_float+0x2e8>
 800472e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004732:	6923      	ldr	r3, [r4, #16]
 8004734:	2965      	cmp	r1, #101	@ 0x65
 8004736:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800473a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800473e:	6123      	str	r3, [r4, #16]
 8004740:	d00c      	beq.n	800475c <_scanf_float+0x358>
 8004742:	2945      	cmp	r1, #69	@ 0x45
 8004744:	d00a      	beq.n	800475c <_scanf_float+0x358>
 8004746:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800474a:	463a      	mov	r2, r7
 800474c:	4640      	mov	r0, r8
 800474e:	4798      	blx	r3
 8004750:	6923      	ldr	r3, [r4, #16]
 8004752:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004756:	3b01      	subs	r3, #1
 8004758:	1eb5      	subs	r5, r6, #2
 800475a:	6123      	str	r3, [r4, #16]
 800475c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004760:	463a      	mov	r2, r7
 8004762:	4640      	mov	r0, r8
 8004764:	4798      	blx	r3
 8004766:	462e      	mov	r6, r5
 8004768:	6822      	ldr	r2, [r4, #0]
 800476a:	f012 0210 	ands.w	r2, r2, #16
 800476e:	d001      	beq.n	8004774 <_scanf_float+0x370>
 8004770:	2000      	movs	r0, #0
 8004772:	e68b      	b.n	800448c <_scanf_float+0x88>
 8004774:	7032      	strb	r2, [r6, #0]
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800477c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004780:	d11c      	bne.n	80047bc <_scanf_float+0x3b8>
 8004782:	9b02      	ldr	r3, [sp, #8]
 8004784:	454b      	cmp	r3, r9
 8004786:	eba3 0209 	sub.w	r2, r3, r9
 800478a:	d123      	bne.n	80047d4 <_scanf_float+0x3d0>
 800478c:	2200      	movs	r2, #0
 800478e:	9901      	ldr	r1, [sp, #4]
 8004790:	4640      	mov	r0, r8
 8004792:	f002 fbe1 	bl	8006f58 <_strtod_r>
 8004796:	9b03      	ldr	r3, [sp, #12]
 8004798:	6825      	ldr	r5, [r4, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f015 0f02 	tst.w	r5, #2
 80047a0:	4606      	mov	r6, r0
 80047a2:	460f      	mov	r7, r1
 80047a4:	f103 0204 	add.w	r2, r3, #4
 80047a8:	d01f      	beq.n	80047ea <_scanf_float+0x3e6>
 80047aa:	9903      	ldr	r1, [sp, #12]
 80047ac:	600a      	str	r2, [r1, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	e9c3 6700 	strd	r6, r7, [r3]
 80047b4:	68e3      	ldr	r3, [r4, #12]
 80047b6:	3301      	adds	r3, #1
 80047b8:	60e3      	str	r3, [r4, #12]
 80047ba:	e7d9      	b.n	8004770 <_scanf_float+0x36c>
 80047bc:	9b04      	ldr	r3, [sp, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0e4      	beq.n	800478c <_scanf_float+0x388>
 80047c2:	9905      	ldr	r1, [sp, #20]
 80047c4:	230a      	movs	r3, #10
 80047c6:	3101      	adds	r1, #1
 80047c8:	4640      	mov	r0, r8
 80047ca:	f002 fc45 	bl	8007058 <_strtol_r>
 80047ce:	9b04      	ldr	r3, [sp, #16]
 80047d0:	9e05      	ldr	r6, [sp, #20]
 80047d2:	1ac2      	subs	r2, r0, r3
 80047d4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80047d8:	429e      	cmp	r6, r3
 80047da:	bf28      	it	cs
 80047dc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80047e0:	490d      	ldr	r1, [pc, #52]	@ (8004818 <_scanf_float+0x414>)
 80047e2:	4630      	mov	r0, r6
 80047e4:	f000 f8de 	bl	80049a4 <siprintf>
 80047e8:	e7d0      	b.n	800478c <_scanf_float+0x388>
 80047ea:	076d      	lsls	r5, r5, #29
 80047ec:	d4dd      	bmi.n	80047aa <_scanf_float+0x3a6>
 80047ee:	9d03      	ldr	r5, [sp, #12]
 80047f0:	602a      	str	r2, [r5, #0]
 80047f2:	681d      	ldr	r5, [r3, #0]
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	f7fc f998 	bl	8000b2c <__aeabi_dcmpun>
 80047fc:	b120      	cbz	r0, 8004808 <_scanf_float+0x404>
 80047fe:	4807      	ldr	r0, [pc, #28]	@ (800481c <_scanf_float+0x418>)
 8004800:	f000 f9b4 	bl	8004b6c <nanf>
 8004804:	6028      	str	r0, [r5, #0]
 8004806:	e7d5      	b.n	80047b4 <_scanf_float+0x3b0>
 8004808:	4630      	mov	r0, r6
 800480a:	4639      	mov	r1, r7
 800480c:	f7fc f9ec 	bl	8000be8 <__aeabi_d2f>
 8004810:	e7f8      	b.n	8004804 <_scanf_float+0x400>
 8004812:	f04f 0900 	mov.w	r9, #0
 8004816:	e62e      	b.n	8004476 <_scanf_float+0x72>
 8004818:	08008274 	.word	0x08008274
 800481c:	0800860d 	.word	0x0800860d

08004820 <std>:
 8004820:	2300      	movs	r3, #0
 8004822:	b510      	push	{r4, lr}
 8004824:	4604      	mov	r4, r0
 8004826:	e9c0 3300 	strd	r3, r3, [r0]
 800482a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800482e:	6083      	str	r3, [r0, #8]
 8004830:	8181      	strh	r1, [r0, #12]
 8004832:	6643      	str	r3, [r0, #100]	@ 0x64
 8004834:	81c2      	strh	r2, [r0, #14]
 8004836:	6183      	str	r3, [r0, #24]
 8004838:	4619      	mov	r1, r3
 800483a:	2208      	movs	r2, #8
 800483c:	305c      	adds	r0, #92	@ 0x5c
 800483e:	f000 f914 	bl	8004a6a <memset>
 8004842:	4b0d      	ldr	r3, [pc, #52]	@ (8004878 <std+0x58>)
 8004844:	6263      	str	r3, [r4, #36]	@ 0x24
 8004846:	4b0d      	ldr	r3, [pc, #52]	@ (800487c <std+0x5c>)
 8004848:	62a3      	str	r3, [r4, #40]	@ 0x28
 800484a:	4b0d      	ldr	r3, [pc, #52]	@ (8004880 <std+0x60>)
 800484c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800484e:	4b0d      	ldr	r3, [pc, #52]	@ (8004884 <std+0x64>)
 8004850:	6323      	str	r3, [r4, #48]	@ 0x30
 8004852:	4b0d      	ldr	r3, [pc, #52]	@ (8004888 <std+0x68>)
 8004854:	6224      	str	r4, [r4, #32]
 8004856:	429c      	cmp	r4, r3
 8004858:	d006      	beq.n	8004868 <std+0x48>
 800485a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800485e:	4294      	cmp	r4, r2
 8004860:	d002      	beq.n	8004868 <std+0x48>
 8004862:	33d0      	adds	r3, #208	@ 0xd0
 8004864:	429c      	cmp	r4, r3
 8004866:	d105      	bne.n	8004874 <std+0x54>
 8004868:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800486c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004870:	f000 b978 	b.w	8004b64 <__retarget_lock_init_recursive>
 8004874:	bd10      	pop	{r4, pc}
 8004876:	bf00      	nop
 8004878:	080049e5 	.word	0x080049e5
 800487c:	08004a07 	.word	0x08004a07
 8004880:	08004a3f 	.word	0x08004a3f
 8004884:	08004a63 	.word	0x08004a63
 8004888:	200002c0 	.word	0x200002c0

0800488c <stdio_exit_handler>:
 800488c:	4a02      	ldr	r2, [pc, #8]	@ (8004898 <stdio_exit_handler+0xc>)
 800488e:	4903      	ldr	r1, [pc, #12]	@ (800489c <stdio_exit_handler+0x10>)
 8004890:	4803      	ldr	r0, [pc, #12]	@ (80048a0 <stdio_exit_handler+0x14>)
 8004892:	f000 b869 	b.w	8004968 <_fwalk_sglue>
 8004896:	bf00      	nop
 8004898:	2000000c 	.word	0x2000000c
 800489c:	0800740d 	.word	0x0800740d
 80048a0:	2000001c 	.word	0x2000001c

080048a4 <cleanup_stdio>:
 80048a4:	6841      	ldr	r1, [r0, #4]
 80048a6:	4b0c      	ldr	r3, [pc, #48]	@ (80048d8 <cleanup_stdio+0x34>)
 80048a8:	4299      	cmp	r1, r3
 80048aa:	b510      	push	{r4, lr}
 80048ac:	4604      	mov	r4, r0
 80048ae:	d001      	beq.n	80048b4 <cleanup_stdio+0x10>
 80048b0:	f002 fdac 	bl	800740c <_fflush_r>
 80048b4:	68a1      	ldr	r1, [r4, #8]
 80048b6:	4b09      	ldr	r3, [pc, #36]	@ (80048dc <cleanup_stdio+0x38>)
 80048b8:	4299      	cmp	r1, r3
 80048ba:	d002      	beq.n	80048c2 <cleanup_stdio+0x1e>
 80048bc:	4620      	mov	r0, r4
 80048be:	f002 fda5 	bl	800740c <_fflush_r>
 80048c2:	68e1      	ldr	r1, [r4, #12]
 80048c4:	4b06      	ldr	r3, [pc, #24]	@ (80048e0 <cleanup_stdio+0x3c>)
 80048c6:	4299      	cmp	r1, r3
 80048c8:	d004      	beq.n	80048d4 <cleanup_stdio+0x30>
 80048ca:	4620      	mov	r0, r4
 80048cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d0:	f002 bd9c 	b.w	800740c <_fflush_r>
 80048d4:	bd10      	pop	{r4, pc}
 80048d6:	bf00      	nop
 80048d8:	200002c0 	.word	0x200002c0
 80048dc:	20000328 	.word	0x20000328
 80048e0:	20000390 	.word	0x20000390

080048e4 <global_stdio_init.part.0>:
 80048e4:	b510      	push	{r4, lr}
 80048e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <global_stdio_init.part.0+0x30>)
 80048e8:	4c0b      	ldr	r4, [pc, #44]	@ (8004918 <global_stdio_init.part.0+0x34>)
 80048ea:	4a0c      	ldr	r2, [pc, #48]	@ (800491c <global_stdio_init.part.0+0x38>)
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	4620      	mov	r0, r4
 80048f0:	2200      	movs	r2, #0
 80048f2:	2104      	movs	r1, #4
 80048f4:	f7ff ff94 	bl	8004820 <std>
 80048f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048fc:	2201      	movs	r2, #1
 80048fe:	2109      	movs	r1, #9
 8004900:	f7ff ff8e 	bl	8004820 <std>
 8004904:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004908:	2202      	movs	r2, #2
 800490a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800490e:	2112      	movs	r1, #18
 8004910:	f7ff bf86 	b.w	8004820 <std>
 8004914:	200003f8 	.word	0x200003f8
 8004918:	200002c0 	.word	0x200002c0
 800491c:	0800488d 	.word	0x0800488d

08004920 <__sfp_lock_acquire>:
 8004920:	4801      	ldr	r0, [pc, #4]	@ (8004928 <__sfp_lock_acquire+0x8>)
 8004922:	f000 b920 	b.w	8004b66 <__retarget_lock_acquire_recursive>
 8004926:	bf00      	nop
 8004928:	20000401 	.word	0x20000401

0800492c <__sfp_lock_release>:
 800492c:	4801      	ldr	r0, [pc, #4]	@ (8004934 <__sfp_lock_release+0x8>)
 800492e:	f000 b91b 	b.w	8004b68 <__retarget_lock_release_recursive>
 8004932:	bf00      	nop
 8004934:	20000401 	.word	0x20000401

08004938 <__sinit>:
 8004938:	b510      	push	{r4, lr}
 800493a:	4604      	mov	r4, r0
 800493c:	f7ff fff0 	bl	8004920 <__sfp_lock_acquire>
 8004940:	6a23      	ldr	r3, [r4, #32]
 8004942:	b11b      	cbz	r3, 800494c <__sinit+0x14>
 8004944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004948:	f7ff bff0 	b.w	800492c <__sfp_lock_release>
 800494c:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <__sinit+0x28>)
 800494e:	6223      	str	r3, [r4, #32]
 8004950:	4b04      	ldr	r3, [pc, #16]	@ (8004964 <__sinit+0x2c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f5      	bne.n	8004944 <__sinit+0xc>
 8004958:	f7ff ffc4 	bl	80048e4 <global_stdio_init.part.0>
 800495c:	e7f2      	b.n	8004944 <__sinit+0xc>
 800495e:	bf00      	nop
 8004960:	080048a5 	.word	0x080048a5
 8004964:	200003f8 	.word	0x200003f8

08004968 <_fwalk_sglue>:
 8004968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800496c:	4607      	mov	r7, r0
 800496e:	4688      	mov	r8, r1
 8004970:	4614      	mov	r4, r2
 8004972:	2600      	movs	r6, #0
 8004974:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004978:	f1b9 0901 	subs.w	r9, r9, #1
 800497c:	d505      	bpl.n	800498a <_fwalk_sglue+0x22>
 800497e:	6824      	ldr	r4, [r4, #0]
 8004980:	2c00      	cmp	r4, #0
 8004982:	d1f7      	bne.n	8004974 <_fwalk_sglue+0xc>
 8004984:	4630      	mov	r0, r6
 8004986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800498a:	89ab      	ldrh	r3, [r5, #12]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d907      	bls.n	80049a0 <_fwalk_sglue+0x38>
 8004990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004994:	3301      	adds	r3, #1
 8004996:	d003      	beq.n	80049a0 <_fwalk_sglue+0x38>
 8004998:	4629      	mov	r1, r5
 800499a:	4638      	mov	r0, r7
 800499c:	47c0      	blx	r8
 800499e:	4306      	orrs	r6, r0
 80049a0:	3568      	adds	r5, #104	@ 0x68
 80049a2:	e7e9      	b.n	8004978 <_fwalk_sglue+0x10>

080049a4 <siprintf>:
 80049a4:	b40e      	push	{r1, r2, r3}
 80049a6:	b500      	push	{lr}
 80049a8:	b09c      	sub	sp, #112	@ 0x70
 80049aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80049ac:	9002      	str	r0, [sp, #8]
 80049ae:	9006      	str	r0, [sp, #24]
 80049b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049b4:	4809      	ldr	r0, [pc, #36]	@ (80049dc <siprintf+0x38>)
 80049b6:	9107      	str	r1, [sp, #28]
 80049b8:	9104      	str	r1, [sp, #16]
 80049ba:	4909      	ldr	r1, [pc, #36]	@ (80049e0 <siprintf+0x3c>)
 80049bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80049c0:	9105      	str	r1, [sp, #20]
 80049c2:	6800      	ldr	r0, [r0, #0]
 80049c4:	9301      	str	r3, [sp, #4]
 80049c6:	a902      	add	r1, sp, #8
 80049c8:	f002 fba4 	bl	8007114 <_svfiprintf_r>
 80049cc:	9b02      	ldr	r3, [sp, #8]
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	b01c      	add	sp, #112	@ 0x70
 80049d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80049d8:	b003      	add	sp, #12
 80049da:	4770      	bx	lr
 80049dc:	20000018 	.word	0x20000018
 80049e0:	ffff0208 	.word	0xffff0208

080049e4 <__sread>:
 80049e4:	b510      	push	{r4, lr}
 80049e6:	460c      	mov	r4, r1
 80049e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ec:	f000 f86c 	bl	8004ac8 <_read_r>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	bfab      	itete	ge
 80049f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80049f6:	89a3      	ldrhlt	r3, [r4, #12]
 80049f8:	181b      	addge	r3, r3, r0
 80049fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80049fe:	bfac      	ite	ge
 8004a00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a02:	81a3      	strhlt	r3, [r4, #12]
 8004a04:	bd10      	pop	{r4, pc}

08004a06 <__swrite>:
 8004a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0a:	461f      	mov	r7, r3
 8004a0c:	898b      	ldrh	r3, [r1, #12]
 8004a0e:	05db      	lsls	r3, r3, #23
 8004a10:	4605      	mov	r5, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	4616      	mov	r6, r2
 8004a16:	d505      	bpl.n	8004a24 <__swrite+0x1e>
 8004a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f000 f840 	bl	8004aa4 <_lseek_r>
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a2e:	81a3      	strh	r3, [r4, #12]
 8004a30:	4632      	mov	r2, r6
 8004a32:	463b      	mov	r3, r7
 8004a34:	4628      	mov	r0, r5
 8004a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a3a:	f000 b857 	b.w	8004aec <_write_r>

08004a3e <__sseek>:
 8004a3e:	b510      	push	{r4, lr}
 8004a40:	460c      	mov	r4, r1
 8004a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a46:	f000 f82d 	bl	8004aa4 <_lseek_r>
 8004a4a:	1c43      	adds	r3, r0, #1
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	bf15      	itete	ne
 8004a50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a5a:	81a3      	strheq	r3, [r4, #12]
 8004a5c:	bf18      	it	ne
 8004a5e:	81a3      	strhne	r3, [r4, #12]
 8004a60:	bd10      	pop	{r4, pc}

08004a62 <__sclose>:
 8004a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a66:	f000 b80d 	b.w	8004a84 <_close_r>

08004a6a <memset>:
 8004a6a:	4402      	add	r2, r0
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d100      	bne.n	8004a74 <memset+0xa>
 8004a72:	4770      	bx	lr
 8004a74:	f803 1b01 	strb.w	r1, [r3], #1
 8004a78:	e7f9      	b.n	8004a6e <memset+0x4>
	...

08004a7c <_localeconv_r>:
 8004a7c:	4800      	ldr	r0, [pc, #0]	@ (8004a80 <_localeconv_r+0x4>)
 8004a7e:	4770      	bx	lr
 8004a80:	20000158 	.word	0x20000158

08004a84 <_close_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	4d06      	ldr	r5, [pc, #24]	@ (8004aa0 <_close_r+0x1c>)
 8004a88:	2300      	movs	r3, #0
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	602b      	str	r3, [r5, #0]
 8004a90:	f7fc ffdb 	bl	8001a4a <_close>
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	d102      	bne.n	8004a9e <_close_r+0x1a>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	b103      	cbz	r3, 8004a9e <_close_r+0x1a>
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	bd38      	pop	{r3, r4, r5, pc}
 8004aa0:	200003fc 	.word	0x200003fc

08004aa4 <_lseek_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	4d07      	ldr	r5, [pc, #28]	@ (8004ac4 <_lseek_r+0x20>)
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	4608      	mov	r0, r1
 8004aac:	4611      	mov	r1, r2
 8004aae:	2200      	movs	r2, #0
 8004ab0:	602a      	str	r2, [r5, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f7fc ffed 	bl	8001a92 <_lseek>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d102      	bne.n	8004ac2 <_lseek_r+0x1e>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	b103      	cbz	r3, 8004ac2 <_lseek_r+0x1e>
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	bd38      	pop	{r3, r4, r5, pc}
 8004ac4:	200003fc 	.word	0x200003fc

08004ac8 <_read_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	4d07      	ldr	r5, [pc, #28]	@ (8004ae8 <_read_r+0x20>)
 8004acc:	4604      	mov	r4, r0
 8004ace:	4608      	mov	r0, r1
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	602a      	str	r2, [r5, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f7fc ff7e 	bl	80019d8 <_read>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d102      	bne.n	8004ae6 <_read_r+0x1e>
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	b103      	cbz	r3, 8004ae6 <_read_r+0x1e>
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	200003fc 	.word	0x200003fc

08004aec <_write_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	4d07      	ldr	r5, [pc, #28]	@ (8004b0c <_write_r+0x20>)
 8004af0:	4604      	mov	r4, r0
 8004af2:	4608      	mov	r0, r1
 8004af4:	4611      	mov	r1, r2
 8004af6:	2200      	movs	r2, #0
 8004af8:	602a      	str	r2, [r5, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f7fc ff89 	bl	8001a12 <_write>
 8004b00:	1c43      	adds	r3, r0, #1
 8004b02:	d102      	bne.n	8004b0a <_write_r+0x1e>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	b103      	cbz	r3, 8004b0a <_write_r+0x1e>
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	200003fc 	.word	0x200003fc

08004b10 <__errno>:
 8004b10:	4b01      	ldr	r3, [pc, #4]	@ (8004b18 <__errno+0x8>)
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000018 	.word	0x20000018

08004b1c <__libc_init_array>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8004b54 <__libc_init_array+0x38>)
 8004b20:	4c0d      	ldr	r4, [pc, #52]	@ (8004b58 <__libc_init_array+0x3c>)
 8004b22:	1b64      	subs	r4, r4, r5
 8004b24:	10a4      	asrs	r4, r4, #2
 8004b26:	2600      	movs	r6, #0
 8004b28:	42a6      	cmp	r6, r4
 8004b2a:	d109      	bne.n	8004b40 <__libc_init_array+0x24>
 8004b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8004b5c <__libc_init_array+0x40>)
 8004b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8004b60 <__libc_init_array+0x44>)
 8004b30:	f003 fb58 	bl	80081e4 <_init>
 8004b34:	1b64      	subs	r4, r4, r5
 8004b36:	10a4      	asrs	r4, r4, #2
 8004b38:	2600      	movs	r6, #0
 8004b3a:	42a6      	cmp	r6, r4
 8004b3c:	d105      	bne.n	8004b4a <__libc_init_array+0x2e>
 8004b3e:	bd70      	pop	{r4, r5, r6, pc}
 8004b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b44:	4798      	blx	r3
 8004b46:	3601      	adds	r6, #1
 8004b48:	e7ee      	b.n	8004b28 <__libc_init_array+0xc>
 8004b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4e:	4798      	blx	r3
 8004b50:	3601      	adds	r6, #1
 8004b52:	e7f2      	b.n	8004b3a <__libc_init_array+0x1e>
 8004b54:	08008678 	.word	0x08008678
 8004b58:	08008678 	.word	0x08008678
 8004b5c:	08008678 	.word	0x08008678
 8004b60:	0800867c 	.word	0x0800867c

08004b64 <__retarget_lock_init_recursive>:
 8004b64:	4770      	bx	lr

08004b66 <__retarget_lock_acquire_recursive>:
 8004b66:	4770      	bx	lr

08004b68 <__retarget_lock_release_recursive>:
 8004b68:	4770      	bx	lr
	...

08004b6c <nanf>:
 8004b6c:	4800      	ldr	r0, [pc, #0]	@ (8004b70 <nanf+0x4>)
 8004b6e:	4770      	bx	lr
 8004b70:	7fc00000 	.word	0x7fc00000

08004b74 <quorem>:
 8004b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b78:	6903      	ldr	r3, [r0, #16]
 8004b7a:	690c      	ldr	r4, [r1, #16]
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	4607      	mov	r7, r0
 8004b80:	db7e      	blt.n	8004c80 <quorem+0x10c>
 8004b82:	3c01      	subs	r4, #1
 8004b84:	f101 0814 	add.w	r8, r1, #20
 8004b88:	00a3      	lsls	r3, r4, #2
 8004b8a:	f100 0514 	add.w	r5, r0, #20
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ba6:	fbb2 f6f3 	udiv	r6, r2, r3
 8004baa:	d32e      	bcc.n	8004c0a <quorem+0x96>
 8004bac:	f04f 0a00 	mov.w	sl, #0
 8004bb0:	46c4      	mov	ip, r8
 8004bb2:	46ae      	mov	lr, r5
 8004bb4:	46d3      	mov	fp, sl
 8004bb6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004bba:	b298      	uxth	r0, r3
 8004bbc:	fb06 a000 	mla	r0, r6, r0, sl
 8004bc0:	0c02      	lsrs	r2, r0, #16
 8004bc2:	0c1b      	lsrs	r3, r3, #16
 8004bc4:	fb06 2303 	mla	r3, r6, r3, r2
 8004bc8:	f8de 2000 	ldr.w	r2, [lr]
 8004bcc:	b280      	uxth	r0, r0
 8004bce:	b292      	uxth	r2, r2
 8004bd0:	1a12      	subs	r2, r2, r0
 8004bd2:	445a      	add	r2, fp
 8004bd4:	f8de 0000 	ldr.w	r0, [lr]
 8004bd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004be2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004be6:	b292      	uxth	r2, r2
 8004be8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004bec:	45e1      	cmp	r9, ip
 8004bee:	f84e 2b04 	str.w	r2, [lr], #4
 8004bf2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004bf6:	d2de      	bcs.n	8004bb6 <quorem+0x42>
 8004bf8:	9b00      	ldr	r3, [sp, #0]
 8004bfa:	58eb      	ldr	r3, [r5, r3]
 8004bfc:	b92b      	cbnz	r3, 8004c0a <quorem+0x96>
 8004bfe:	9b01      	ldr	r3, [sp, #4]
 8004c00:	3b04      	subs	r3, #4
 8004c02:	429d      	cmp	r5, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	d32f      	bcc.n	8004c68 <quorem+0xf4>
 8004c08:	613c      	str	r4, [r7, #16]
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	f001 f9c8 	bl	8005fa0 <__mcmp>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	db25      	blt.n	8004c60 <quorem+0xec>
 8004c14:	4629      	mov	r1, r5
 8004c16:	2000      	movs	r0, #0
 8004c18:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c1c:	f8d1 c000 	ldr.w	ip, [r1]
 8004c20:	fa1f fe82 	uxth.w	lr, r2
 8004c24:	fa1f f38c 	uxth.w	r3, ip
 8004c28:	eba3 030e 	sub.w	r3, r3, lr
 8004c2c:	4403      	add	r3, r0
 8004c2e:	0c12      	lsrs	r2, r2, #16
 8004c30:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004c34:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c3e:	45c1      	cmp	r9, r8
 8004c40:	f841 3b04 	str.w	r3, [r1], #4
 8004c44:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004c48:	d2e6      	bcs.n	8004c18 <quorem+0xa4>
 8004c4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c52:	b922      	cbnz	r2, 8004c5e <quorem+0xea>
 8004c54:	3b04      	subs	r3, #4
 8004c56:	429d      	cmp	r5, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	d30b      	bcc.n	8004c74 <quorem+0x100>
 8004c5c:	613c      	str	r4, [r7, #16]
 8004c5e:	3601      	adds	r6, #1
 8004c60:	4630      	mov	r0, r6
 8004c62:	b003      	add	sp, #12
 8004c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	3b04      	subs	r3, #4
 8004c6c:	2a00      	cmp	r2, #0
 8004c6e:	d1cb      	bne.n	8004c08 <quorem+0x94>
 8004c70:	3c01      	subs	r4, #1
 8004c72:	e7c6      	b.n	8004c02 <quorem+0x8e>
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	3b04      	subs	r3, #4
 8004c78:	2a00      	cmp	r2, #0
 8004c7a:	d1ef      	bne.n	8004c5c <quorem+0xe8>
 8004c7c:	3c01      	subs	r4, #1
 8004c7e:	e7ea      	b.n	8004c56 <quorem+0xe2>
 8004c80:	2000      	movs	r0, #0
 8004c82:	e7ee      	b.n	8004c62 <quorem+0xee>
 8004c84:	0000      	movs	r0, r0
	...

08004c88 <_dtoa_r>:
 8004c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	69c7      	ldr	r7, [r0, #28]
 8004c8e:	b097      	sub	sp, #92	@ 0x5c
 8004c90:	4614      	mov	r4, r2
 8004c92:	461d      	mov	r5, r3
 8004c94:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004c98:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004c9a:	4683      	mov	fp, r0
 8004c9c:	b97f      	cbnz	r7, 8004cbe <_dtoa_r+0x36>
 8004c9e:	2010      	movs	r0, #16
 8004ca0:	f000 fe04 	bl	80058ac <malloc>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	f8cb 001c 	str.w	r0, [fp, #28]
 8004caa:	b920      	cbnz	r0, 8004cb6 <_dtoa_r+0x2e>
 8004cac:	4ba8      	ldr	r3, [pc, #672]	@ (8004f50 <_dtoa_r+0x2c8>)
 8004cae:	21ef      	movs	r1, #239	@ 0xef
 8004cb0:	48a8      	ldr	r0, [pc, #672]	@ (8004f54 <_dtoa_r+0x2cc>)
 8004cb2:	f002 fc23 	bl	80074fc <__assert_func>
 8004cb6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004cba:	6007      	str	r7, [r0, #0]
 8004cbc:	60c7      	str	r7, [r0, #12]
 8004cbe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004cc2:	6819      	ldr	r1, [r3, #0]
 8004cc4:	b159      	cbz	r1, 8004cde <_dtoa_r+0x56>
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	604a      	str	r2, [r1, #4]
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4093      	lsls	r3, r2
 8004cce:	608b      	str	r3, [r1, #8]
 8004cd0:	4658      	mov	r0, fp
 8004cd2:	f000 fee1 	bl	8005a98 <_Bfree>
 8004cd6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	1e2b      	subs	r3, r5, #0
 8004ce0:	bfb9      	ittee	lt
 8004ce2:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004ce6:	9303      	strlt	r3, [sp, #12]
 8004ce8:	2300      	movge	r3, #0
 8004cea:	6033      	strge	r3, [r6, #0]
 8004cec:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004cf0:	4b99      	ldr	r3, [pc, #612]	@ (8004f58 <_dtoa_r+0x2d0>)
 8004cf2:	bfbc      	itt	lt
 8004cf4:	2201      	movlt	r2, #1
 8004cf6:	6032      	strlt	r2, [r6, #0]
 8004cf8:	ea33 0308 	bics.w	r3, r3, r8
 8004cfc:	d112      	bne.n	8004d24 <_dtoa_r+0x9c>
 8004cfe:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004d00:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004d0a:	4323      	orrs	r3, r4
 8004d0c:	f000 8551 	beq.w	80057b2 <_dtoa_r+0xb2a>
 8004d10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d12:	f8df a248 	ldr.w	sl, [pc, #584]	@ 8004f5c <_dtoa_r+0x2d4>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 8553 	beq.w	80057c2 <_dtoa_r+0xb3a>
 8004d1c:	f10a 0303 	add.w	r3, sl, #3
 8004d20:	f000 bd4d 	b.w	80057be <_dtoa_r+0xb36>
 8004d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d28:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004d2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d30:	2200      	movs	r2, #0
 8004d32:	2300      	movs	r3, #0
 8004d34:	f7fb fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d38:	4607      	mov	r7, r0
 8004d3a:	b158      	cbz	r0, 8004d54 <_dtoa_r+0xcc>
 8004d3c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004d3e:	2301      	movs	r3, #1
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d44:	b113      	cbz	r3, 8004d4c <_dtoa_r+0xc4>
 8004d46:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004d48:	4b85      	ldr	r3, [pc, #532]	@ (8004f60 <_dtoa_r+0x2d8>)
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004f64 <_dtoa_r+0x2dc>
 8004d50:	f000 bd37 	b.w	80057c2 <_dtoa_r+0xb3a>
 8004d54:	ab14      	add	r3, sp, #80	@ 0x50
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	ab15      	add	r3, sp, #84	@ 0x54
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	4658      	mov	r0, fp
 8004d5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004d62:	f001 fa35 	bl	80061d0 <__d2b>
 8004d66:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004d6a:	4681      	mov	r9, r0
 8004d6c:	2e00      	cmp	r6, #0
 8004d6e:	d076      	beq.n	8004e5e <_dtoa_r+0x1d6>
 8004d70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d72:	9712      	str	r7, [sp, #72]	@ 0x48
 8004d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004d80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004d84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004d88:	4619      	mov	r1, r3
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	4b76      	ldr	r3, [pc, #472]	@ (8004f68 <_dtoa_r+0x2e0>)
 8004d8e:	f7fb fa7b 	bl	8000288 <__aeabi_dsub>
 8004d92:	a369      	add	r3, pc, #420	@ (adr r3, 8004f38 <_dtoa_r+0x2b0>)
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	f7fb fc2e 	bl	80005f8 <__aeabi_dmul>
 8004d9c:	a368      	add	r3, pc, #416	@ (adr r3, 8004f40 <_dtoa_r+0x2b8>)
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	f7fb fa73 	bl	800028c <__adddf3>
 8004da6:	4604      	mov	r4, r0
 8004da8:	4630      	mov	r0, r6
 8004daa:	460d      	mov	r5, r1
 8004dac:	f7fb fbba 	bl	8000524 <__aeabi_i2d>
 8004db0:	a365      	add	r3, pc, #404	@ (adr r3, 8004f48 <_dtoa_r+0x2c0>)
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f7fb fc1f 	bl	80005f8 <__aeabi_dmul>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	f7fb fa63 	bl	800028c <__adddf3>
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	460d      	mov	r5, r1
 8004dca:	f7fb fec5 	bl	8000b58 <__aeabi_d2iz>
 8004dce:	2200      	movs	r2, #0
 8004dd0:	4607      	mov	r7, r0
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	f7fb fe80 	bl	8000adc <__aeabi_dcmplt>
 8004ddc:	b140      	cbz	r0, 8004df0 <_dtoa_r+0x168>
 8004dde:	4638      	mov	r0, r7
 8004de0:	f7fb fba0 	bl	8000524 <__aeabi_i2d>
 8004de4:	4622      	mov	r2, r4
 8004de6:	462b      	mov	r3, r5
 8004de8:	f7fb fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dec:	b900      	cbnz	r0, 8004df0 <_dtoa_r+0x168>
 8004dee:	3f01      	subs	r7, #1
 8004df0:	2f16      	cmp	r7, #22
 8004df2:	d852      	bhi.n	8004e9a <_dtoa_r+0x212>
 8004df4:	4b5d      	ldr	r3, [pc, #372]	@ (8004f6c <_dtoa_r+0x2e4>)
 8004df6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e02:	f7fb fe6b 	bl	8000adc <__aeabi_dcmplt>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	d049      	beq.n	8004e9e <_dtoa_r+0x216>
 8004e0a:	3f01      	subs	r7, #1
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004e10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e12:	1b9b      	subs	r3, r3, r6
 8004e14:	1e5a      	subs	r2, r3, #1
 8004e16:	bf44      	itt	mi
 8004e18:	f1c3 0801 	rsbmi	r8, r3, #1
 8004e1c:	2300      	movmi	r3, #0
 8004e1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e20:	bf54      	ite	pl
 8004e22:	f04f 0800 	movpl.w	r8, #0
 8004e26:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004e28:	2f00      	cmp	r7, #0
 8004e2a:	db3a      	blt.n	8004ea2 <_dtoa_r+0x21a>
 8004e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e2e:	970e      	str	r7, [sp, #56]	@ 0x38
 8004e30:	443b      	add	r3, r7
 8004e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e34:	2300      	movs	r3, #0
 8004e36:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e3a:	2b09      	cmp	r3, #9
 8004e3c:	d865      	bhi.n	8004f0a <_dtoa_r+0x282>
 8004e3e:	2b05      	cmp	r3, #5
 8004e40:	bfc4      	itt	gt
 8004e42:	3b04      	subgt	r3, #4
 8004e44:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004e46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e48:	f1a3 0302 	sub.w	r3, r3, #2
 8004e4c:	bfcc      	ite	gt
 8004e4e:	2400      	movgt	r4, #0
 8004e50:	2401      	movle	r4, #1
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d864      	bhi.n	8004f20 <_dtoa_r+0x298>
 8004e56:	e8df f003 	tbb	[pc, r3]
 8004e5a:	382b      	.short	0x382b
 8004e5c:	5636      	.short	0x5636
 8004e5e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004e62:	441e      	add	r6, r3
 8004e64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	bfc1      	itttt	gt
 8004e6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004e70:	fa08 f803 	lslgt.w	r8, r8, r3
 8004e74:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004e78:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004e7c:	bfd6      	itet	le
 8004e7e:	f1c3 0320 	rsble	r3, r3, #32
 8004e82:	ea48 0003 	orrgt.w	r0, r8, r3
 8004e86:	fa04 f003 	lslle.w	r0, r4, r3
 8004e8a:	f7fb fb3b 	bl	8000504 <__aeabi_ui2d>
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004e94:	3e01      	subs	r6, #1
 8004e96:	9212      	str	r2, [sp, #72]	@ 0x48
 8004e98:	e776      	b.n	8004d88 <_dtoa_r+0x100>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e7b7      	b.n	8004e0e <_dtoa_r+0x186>
 8004e9e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004ea0:	e7b6      	b.n	8004e10 <_dtoa_r+0x188>
 8004ea2:	427b      	negs	r3, r7
 8004ea4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	eba8 0807 	sub.w	r8, r8, r7
 8004eac:	930e      	str	r3, [sp, #56]	@ 0x38
 8004eae:	e7c3      	b.n	8004e38 <_dtoa_r+0x1b0>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004eb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	dc35      	bgt.n	8004f26 <_dtoa_r+0x29e>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	9221      	str	r2, [sp, #132]	@ 0x84
 8004ec4:	e00b      	b.n	8004ede <_dtoa_r+0x256>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e7f3      	b.n	8004eb2 <_dtoa_r+0x22a>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ece:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ed0:	18fb      	adds	r3, r7, r3
 8004ed2:	9308      	str	r3, [sp, #32]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	9307      	str	r3, [sp, #28]
 8004eda:	bfb8      	it	lt
 8004edc:	2301      	movlt	r3, #1
 8004ede:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	2204      	movs	r2, #4
 8004ee6:	f102 0514 	add.w	r5, r2, #20
 8004eea:	429d      	cmp	r5, r3
 8004eec:	d91f      	bls.n	8004f2e <_dtoa_r+0x2a6>
 8004eee:	6041      	str	r1, [r0, #4]
 8004ef0:	4658      	mov	r0, fp
 8004ef2:	f000 fd91 	bl	8005a18 <_Balloc>
 8004ef6:	4682      	mov	sl, r0
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d13b      	bne.n	8004f74 <_dtoa_r+0x2ec>
 8004efc:	4b1c      	ldr	r3, [pc, #112]	@ (8004f70 <_dtoa_r+0x2e8>)
 8004efe:	4602      	mov	r2, r0
 8004f00:	f240 11af 	movw	r1, #431	@ 0x1af
 8004f04:	e6d4      	b.n	8004cb0 <_dtoa_r+0x28>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e7e0      	b.n	8004ecc <_dtoa_r+0x244>
 8004f0a:	2401      	movs	r4, #1
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9320      	str	r3, [sp, #128]	@ 0x80
 8004f10:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004f12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f16:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2312      	movs	r3, #18
 8004f1e:	e7d0      	b.n	8004ec2 <_dtoa_r+0x23a>
 8004f20:	2301      	movs	r3, #1
 8004f22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f24:	e7f5      	b.n	8004f12 <_dtoa_r+0x28a>
 8004f26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f28:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004f2c:	e7d7      	b.n	8004ede <_dtoa_r+0x256>
 8004f2e:	3101      	adds	r1, #1
 8004f30:	0052      	lsls	r2, r2, #1
 8004f32:	e7d8      	b.n	8004ee6 <_dtoa_r+0x25e>
 8004f34:	f3af 8000 	nop.w
 8004f38:	636f4361 	.word	0x636f4361
 8004f3c:	3fd287a7 	.word	0x3fd287a7
 8004f40:	8b60c8b3 	.word	0x8b60c8b3
 8004f44:	3fc68a28 	.word	0x3fc68a28
 8004f48:	509f79fb 	.word	0x509f79fb
 8004f4c:	3fd34413 	.word	0x3fd34413
 8004f50:	08008286 	.word	0x08008286
 8004f54:	0800829d 	.word	0x0800829d
 8004f58:	7ff00000 	.word	0x7ff00000
 8004f5c:	08008282 	.word	0x08008282
 8004f60:	08008251 	.word	0x08008251
 8004f64:	08008250 	.word	0x08008250
 8004f68:	3ff80000 	.word	0x3ff80000
 8004f6c:	08008398 	.word	0x08008398
 8004f70:	080082f5 	.word	0x080082f5
 8004f74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004f78:	6018      	str	r0, [r3, #0]
 8004f7a:	9b07      	ldr	r3, [sp, #28]
 8004f7c:	2b0e      	cmp	r3, #14
 8004f7e:	f200 80a4 	bhi.w	80050ca <_dtoa_r+0x442>
 8004f82:	2c00      	cmp	r4, #0
 8004f84:	f000 80a1 	beq.w	80050ca <_dtoa_r+0x442>
 8004f88:	2f00      	cmp	r7, #0
 8004f8a:	dd33      	ble.n	8004ff4 <_dtoa_r+0x36c>
 8004f8c:	4b86      	ldr	r3, [pc, #536]	@ (80051a8 <_dtoa_r+0x520>)
 8004f8e:	f007 020f 	and.w	r2, r7, #15
 8004f92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f9a:	05f8      	lsls	r0, r7, #23
 8004f9c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004fa0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004fa4:	d516      	bpl.n	8004fd4 <_dtoa_r+0x34c>
 8004fa6:	4b81      	ldr	r3, [pc, #516]	@ (80051ac <_dtoa_r+0x524>)
 8004fa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fb0:	f7fb fc4c 	bl	800084c <__aeabi_ddiv>
 8004fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fb8:	f004 040f 	and.w	r4, r4, #15
 8004fbc:	2603      	movs	r6, #3
 8004fbe:	4d7b      	ldr	r5, [pc, #492]	@ (80051ac <_dtoa_r+0x524>)
 8004fc0:	b954      	cbnz	r4, 8004fd8 <_dtoa_r+0x350>
 8004fc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fca:	f7fb fc3f 	bl	800084c <__aeabi_ddiv>
 8004fce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fd2:	e028      	b.n	8005026 <_dtoa_r+0x39e>
 8004fd4:	2602      	movs	r6, #2
 8004fd6:	e7f2      	b.n	8004fbe <_dtoa_r+0x336>
 8004fd8:	07e1      	lsls	r1, r4, #31
 8004fda:	d508      	bpl.n	8004fee <_dtoa_r+0x366>
 8004fdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fe0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004fe4:	f7fb fb08 	bl	80005f8 <__aeabi_dmul>
 8004fe8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fec:	3601      	adds	r6, #1
 8004fee:	1064      	asrs	r4, r4, #1
 8004ff0:	3508      	adds	r5, #8
 8004ff2:	e7e5      	b.n	8004fc0 <_dtoa_r+0x338>
 8004ff4:	f000 80d2 	beq.w	800519c <_dtoa_r+0x514>
 8004ff8:	427c      	negs	r4, r7
 8004ffa:	4b6b      	ldr	r3, [pc, #428]	@ (80051a8 <_dtoa_r+0x520>)
 8004ffc:	4d6b      	ldr	r5, [pc, #428]	@ (80051ac <_dtoa_r+0x524>)
 8004ffe:	f004 020f 	and.w	r2, r4, #15
 8005002:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800500e:	f7fb faf3 	bl	80005f8 <__aeabi_dmul>
 8005012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005016:	1124      	asrs	r4, r4, #4
 8005018:	2300      	movs	r3, #0
 800501a:	2602      	movs	r6, #2
 800501c:	2c00      	cmp	r4, #0
 800501e:	f040 80b2 	bne.w	8005186 <_dtoa_r+0x4fe>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1d3      	bne.n	8004fce <_dtoa_r+0x346>
 8005026:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005028:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 80b7 	beq.w	80051a0 <_dtoa_r+0x518>
 8005032:	4b5f      	ldr	r3, [pc, #380]	@ (80051b0 <_dtoa_r+0x528>)
 8005034:	2200      	movs	r2, #0
 8005036:	4620      	mov	r0, r4
 8005038:	4629      	mov	r1, r5
 800503a:	f7fb fd4f 	bl	8000adc <__aeabi_dcmplt>
 800503e:	2800      	cmp	r0, #0
 8005040:	f000 80ae 	beq.w	80051a0 <_dtoa_r+0x518>
 8005044:	9b07      	ldr	r3, [sp, #28]
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 80aa 	beq.w	80051a0 <_dtoa_r+0x518>
 800504c:	9b08      	ldr	r3, [sp, #32]
 800504e:	2b00      	cmp	r3, #0
 8005050:	dd37      	ble.n	80050c2 <_dtoa_r+0x43a>
 8005052:	1e7b      	subs	r3, r7, #1
 8005054:	9304      	str	r3, [sp, #16]
 8005056:	4620      	mov	r0, r4
 8005058:	4b56      	ldr	r3, [pc, #344]	@ (80051b4 <_dtoa_r+0x52c>)
 800505a:	2200      	movs	r2, #0
 800505c:	4629      	mov	r1, r5
 800505e:	f7fb facb 	bl	80005f8 <__aeabi_dmul>
 8005062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005066:	9c08      	ldr	r4, [sp, #32]
 8005068:	3601      	adds	r6, #1
 800506a:	4630      	mov	r0, r6
 800506c:	f7fb fa5a 	bl	8000524 <__aeabi_i2d>
 8005070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005074:	f7fb fac0 	bl	80005f8 <__aeabi_dmul>
 8005078:	4b4f      	ldr	r3, [pc, #316]	@ (80051b8 <_dtoa_r+0x530>)
 800507a:	2200      	movs	r2, #0
 800507c:	f7fb f906 	bl	800028c <__adddf3>
 8005080:	4605      	mov	r5, r0
 8005082:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005086:	2c00      	cmp	r4, #0
 8005088:	f040 809a 	bne.w	80051c0 <_dtoa_r+0x538>
 800508c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005090:	4b4a      	ldr	r3, [pc, #296]	@ (80051bc <_dtoa_r+0x534>)
 8005092:	2200      	movs	r2, #0
 8005094:	f7fb f8f8 	bl	8000288 <__aeabi_dsub>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050a0:	462a      	mov	r2, r5
 80050a2:	4633      	mov	r3, r6
 80050a4:	f7fb fd38 	bl	8000b18 <__aeabi_dcmpgt>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	f040 828e 	bne.w	80055ca <_dtoa_r+0x942>
 80050ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050b2:	462a      	mov	r2, r5
 80050b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80050b8:	f7fb fd10 	bl	8000adc <__aeabi_dcmplt>
 80050bc:	2800      	cmp	r0, #0
 80050be:	f040 8127 	bne.w	8005310 <_dtoa_r+0x688>
 80050c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80050c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80050ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f2c0 8163 	blt.w	8005398 <_dtoa_r+0x710>
 80050d2:	2f0e      	cmp	r7, #14
 80050d4:	f300 8160 	bgt.w	8005398 <_dtoa_r+0x710>
 80050d8:	4b33      	ldr	r3, [pc, #204]	@ (80051a8 <_dtoa_r+0x520>)
 80050da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80050de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	da03      	bge.n	80050f4 <_dtoa_r+0x46c>
 80050ec:	9b07      	ldr	r3, [sp, #28]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f340 8100 	ble.w	80052f4 <_dtoa_r+0x66c>
 80050f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80050f8:	4656      	mov	r6, sl
 80050fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050fe:	4620      	mov	r0, r4
 8005100:	4629      	mov	r1, r5
 8005102:	f7fb fba3 	bl	800084c <__aeabi_ddiv>
 8005106:	f7fb fd27 	bl	8000b58 <__aeabi_d2iz>
 800510a:	4680      	mov	r8, r0
 800510c:	f7fb fa0a 	bl	8000524 <__aeabi_i2d>
 8005110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005114:	f7fb fa70 	bl	80005f8 <__aeabi_dmul>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4620      	mov	r0, r4
 800511e:	4629      	mov	r1, r5
 8005120:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005124:	f7fb f8b0 	bl	8000288 <__aeabi_dsub>
 8005128:	f806 4b01 	strb.w	r4, [r6], #1
 800512c:	9d07      	ldr	r5, [sp, #28]
 800512e:	eba6 040a 	sub.w	r4, r6, sl
 8005132:	42a5      	cmp	r5, r4
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	f040 8116 	bne.w	8005368 <_dtoa_r+0x6e0>
 800513c:	f7fb f8a6 	bl	800028c <__adddf3>
 8005140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005144:	4604      	mov	r4, r0
 8005146:	460d      	mov	r5, r1
 8005148:	f7fb fce6 	bl	8000b18 <__aeabi_dcmpgt>
 800514c:	2800      	cmp	r0, #0
 800514e:	f040 80f8 	bne.w	8005342 <_dtoa_r+0x6ba>
 8005152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005156:	4620      	mov	r0, r4
 8005158:	4629      	mov	r1, r5
 800515a:	f7fb fcb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800515e:	b118      	cbz	r0, 8005168 <_dtoa_r+0x4e0>
 8005160:	f018 0f01 	tst.w	r8, #1
 8005164:	f040 80ed 	bne.w	8005342 <_dtoa_r+0x6ba>
 8005168:	4649      	mov	r1, r9
 800516a:	4658      	mov	r0, fp
 800516c:	f000 fc94 	bl	8005a98 <_Bfree>
 8005170:	2300      	movs	r3, #0
 8005172:	7033      	strb	r3, [r6, #0]
 8005174:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005176:	3701      	adds	r7, #1
 8005178:	601f      	str	r7, [r3, #0]
 800517a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8320 	beq.w	80057c2 <_dtoa_r+0xb3a>
 8005182:	601e      	str	r6, [r3, #0]
 8005184:	e31d      	b.n	80057c2 <_dtoa_r+0xb3a>
 8005186:	07e2      	lsls	r2, r4, #31
 8005188:	d505      	bpl.n	8005196 <_dtoa_r+0x50e>
 800518a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800518e:	f7fb fa33 	bl	80005f8 <__aeabi_dmul>
 8005192:	3601      	adds	r6, #1
 8005194:	2301      	movs	r3, #1
 8005196:	1064      	asrs	r4, r4, #1
 8005198:	3508      	adds	r5, #8
 800519a:	e73f      	b.n	800501c <_dtoa_r+0x394>
 800519c:	2602      	movs	r6, #2
 800519e:	e742      	b.n	8005026 <_dtoa_r+0x39e>
 80051a0:	9c07      	ldr	r4, [sp, #28]
 80051a2:	9704      	str	r7, [sp, #16]
 80051a4:	e761      	b.n	800506a <_dtoa_r+0x3e2>
 80051a6:	bf00      	nop
 80051a8:	08008398 	.word	0x08008398
 80051ac:	08008370 	.word	0x08008370
 80051b0:	3ff00000 	.word	0x3ff00000
 80051b4:	40240000 	.word	0x40240000
 80051b8:	401c0000 	.word	0x401c0000
 80051bc:	40140000 	.word	0x40140000
 80051c0:	4b70      	ldr	r3, [pc, #448]	@ (8005384 <_dtoa_r+0x6fc>)
 80051c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80051c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80051cc:	4454      	add	r4, sl
 80051ce:	2900      	cmp	r1, #0
 80051d0:	d045      	beq.n	800525e <_dtoa_r+0x5d6>
 80051d2:	496d      	ldr	r1, [pc, #436]	@ (8005388 <_dtoa_r+0x700>)
 80051d4:	2000      	movs	r0, #0
 80051d6:	f7fb fb39 	bl	800084c <__aeabi_ddiv>
 80051da:	4633      	mov	r3, r6
 80051dc:	462a      	mov	r2, r5
 80051de:	f7fb f853 	bl	8000288 <__aeabi_dsub>
 80051e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051e6:	4656      	mov	r6, sl
 80051e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051ec:	f7fb fcb4 	bl	8000b58 <__aeabi_d2iz>
 80051f0:	4605      	mov	r5, r0
 80051f2:	f7fb f997 	bl	8000524 <__aeabi_i2d>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051fe:	f7fb f843 	bl	8000288 <__aeabi_dsub>
 8005202:	3530      	adds	r5, #48	@ 0x30
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800520c:	f806 5b01 	strb.w	r5, [r6], #1
 8005210:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005214:	f7fb fc62 	bl	8000adc <__aeabi_dcmplt>
 8005218:	2800      	cmp	r0, #0
 800521a:	d163      	bne.n	80052e4 <_dtoa_r+0x65c>
 800521c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005220:	495a      	ldr	r1, [pc, #360]	@ (800538c <_dtoa_r+0x704>)
 8005222:	2000      	movs	r0, #0
 8005224:	f7fb f830 	bl	8000288 <__aeabi_dsub>
 8005228:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800522c:	f7fb fc56 	bl	8000adc <__aeabi_dcmplt>
 8005230:	2800      	cmp	r0, #0
 8005232:	f040 8087 	bne.w	8005344 <_dtoa_r+0x6bc>
 8005236:	42a6      	cmp	r6, r4
 8005238:	f43f af43 	beq.w	80050c2 <_dtoa_r+0x43a>
 800523c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005240:	4b53      	ldr	r3, [pc, #332]	@ (8005390 <_dtoa_r+0x708>)
 8005242:	2200      	movs	r2, #0
 8005244:	f7fb f9d8 	bl	80005f8 <__aeabi_dmul>
 8005248:	4b51      	ldr	r3, [pc, #324]	@ (8005390 <_dtoa_r+0x708>)
 800524a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800524e:	2200      	movs	r2, #0
 8005250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005254:	f7fb f9d0 	bl	80005f8 <__aeabi_dmul>
 8005258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800525c:	e7c4      	b.n	80051e8 <_dtoa_r+0x560>
 800525e:	4631      	mov	r1, r6
 8005260:	4628      	mov	r0, r5
 8005262:	f7fb f9c9 	bl	80005f8 <__aeabi_dmul>
 8005266:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800526a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800526c:	4656      	mov	r6, sl
 800526e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005272:	f7fb fc71 	bl	8000b58 <__aeabi_d2iz>
 8005276:	4605      	mov	r5, r0
 8005278:	f7fb f954 	bl	8000524 <__aeabi_i2d>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005284:	f7fb f800 	bl	8000288 <__aeabi_dsub>
 8005288:	3530      	adds	r5, #48	@ 0x30
 800528a:	f806 5b01 	strb.w	r5, [r6], #1
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	42a6      	cmp	r6, r4
 8005294:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	d124      	bne.n	80052e8 <_dtoa_r+0x660>
 800529e:	4b3a      	ldr	r3, [pc, #232]	@ (8005388 <_dtoa_r+0x700>)
 80052a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80052a4:	f7fa fff2 	bl	800028c <__adddf3>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052b0:	f7fb fc32 	bl	8000b18 <__aeabi_dcmpgt>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d145      	bne.n	8005344 <_dtoa_r+0x6bc>
 80052b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80052bc:	4932      	ldr	r1, [pc, #200]	@ (8005388 <_dtoa_r+0x700>)
 80052be:	2000      	movs	r0, #0
 80052c0:	f7fa ffe2 	bl	8000288 <__aeabi_dsub>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052cc:	f7fb fc06 	bl	8000adc <__aeabi_dcmplt>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f43f aef6 	beq.w	80050c2 <_dtoa_r+0x43a>
 80052d6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80052d8:	1e73      	subs	r3, r6, #1
 80052da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80052dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80052e0:	2b30      	cmp	r3, #48	@ 0x30
 80052e2:	d0f8      	beq.n	80052d6 <_dtoa_r+0x64e>
 80052e4:	9f04      	ldr	r7, [sp, #16]
 80052e6:	e73f      	b.n	8005168 <_dtoa_r+0x4e0>
 80052e8:	4b29      	ldr	r3, [pc, #164]	@ (8005390 <_dtoa_r+0x708>)
 80052ea:	f7fb f985 	bl	80005f8 <__aeabi_dmul>
 80052ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052f2:	e7bc      	b.n	800526e <_dtoa_r+0x5e6>
 80052f4:	d10c      	bne.n	8005310 <_dtoa_r+0x688>
 80052f6:	4b27      	ldr	r3, [pc, #156]	@ (8005394 <_dtoa_r+0x70c>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052fe:	f7fb f97b 	bl	80005f8 <__aeabi_dmul>
 8005302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005306:	f7fb fbfd 	bl	8000b04 <__aeabi_dcmpge>
 800530a:	2800      	cmp	r0, #0
 800530c:	f000 815b 	beq.w	80055c6 <_dtoa_r+0x93e>
 8005310:	2400      	movs	r4, #0
 8005312:	4625      	mov	r5, r4
 8005314:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005316:	43db      	mvns	r3, r3
 8005318:	9304      	str	r3, [sp, #16]
 800531a:	4656      	mov	r6, sl
 800531c:	2700      	movs	r7, #0
 800531e:	4621      	mov	r1, r4
 8005320:	4658      	mov	r0, fp
 8005322:	f000 fbb9 	bl	8005a98 <_Bfree>
 8005326:	2d00      	cmp	r5, #0
 8005328:	d0dc      	beq.n	80052e4 <_dtoa_r+0x65c>
 800532a:	b12f      	cbz	r7, 8005338 <_dtoa_r+0x6b0>
 800532c:	42af      	cmp	r7, r5
 800532e:	d003      	beq.n	8005338 <_dtoa_r+0x6b0>
 8005330:	4639      	mov	r1, r7
 8005332:	4658      	mov	r0, fp
 8005334:	f000 fbb0 	bl	8005a98 <_Bfree>
 8005338:	4629      	mov	r1, r5
 800533a:	4658      	mov	r0, fp
 800533c:	f000 fbac 	bl	8005a98 <_Bfree>
 8005340:	e7d0      	b.n	80052e4 <_dtoa_r+0x65c>
 8005342:	9704      	str	r7, [sp, #16]
 8005344:	4633      	mov	r3, r6
 8005346:	461e      	mov	r6, r3
 8005348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800534c:	2a39      	cmp	r2, #57	@ 0x39
 800534e:	d107      	bne.n	8005360 <_dtoa_r+0x6d8>
 8005350:	459a      	cmp	sl, r3
 8005352:	d1f8      	bne.n	8005346 <_dtoa_r+0x6be>
 8005354:	9a04      	ldr	r2, [sp, #16]
 8005356:	3201      	adds	r2, #1
 8005358:	9204      	str	r2, [sp, #16]
 800535a:	2230      	movs	r2, #48	@ 0x30
 800535c:	f88a 2000 	strb.w	r2, [sl]
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	3201      	adds	r2, #1
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	e7bd      	b.n	80052e4 <_dtoa_r+0x65c>
 8005368:	4b09      	ldr	r3, [pc, #36]	@ (8005390 <_dtoa_r+0x708>)
 800536a:	2200      	movs	r2, #0
 800536c:	f7fb f944 	bl	80005f8 <__aeabi_dmul>
 8005370:	2200      	movs	r2, #0
 8005372:	2300      	movs	r3, #0
 8005374:	4604      	mov	r4, r0
 8005376:	460d      	mov	r5, r1
 8005378:	f7fb fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 800537c:	2800      	cmp	r0, #0
 800537e:	f43f aebc 	beq.w	80050fa <_dtoa_r+0x472>
 8005382:	e6f1      	b.n	8005168 <_dtoa_r+0x4e0>
 8005384:	08008398 	.word	0x08008398
 8005388:	3fe00000 	.word	0x3fe00000
 800538c:	3ff00000 	.word	0x3ff00000
 8005390:	40240000 	.word	0x40240000
 8005394:	40140000 	.word	0x40140000
 8005398:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800539a:	2a00      	cmp	r2, #0
 800539c:	f000 80db 	beq.w	8005556 <_dtoa_r+0x8ce>
 80053a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80053a2:	2a01      	cmp	r2, #1
 80053a4:	f300 80bf 	bgt.w	8005526 <_dtoa_r+0x89e>
 80053a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80053aa:	2a00      	cmp	r2, #0
 80053ac:	f000 80b7 	beq.w	800551e <_dtoa_r+0x896>
 80053b0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80053b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80053b6:	4646      	mov	r6, r8
 80053b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053ba:	2101      	movs	r1, #1
 80053bc:	441a      	add	r2, r3
 80053be:	4658      	mov	r0, fp
 80053c0:	4498      	add	r8, r3
 80053c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80053c4:	f000 fc66 	bl	8005c94 <__i2b>
 80053c8:	4605      	mov	r5, r0
 80053ca:	b15e      	cbz	r6, 80053e4 <_dtoa_r+0x75c>
 80053cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dd08      	ble.n	80053e4 <_dtoa_r+0x75c>
 80053d2:	42b3      	cmp	r3, r6
 80053d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053d6:	bfa8      	it	ge
 80053d8:	4633      	movge	r3, r6
 80053da:	eba8 0803 	sub.w	r8, r8, r3
 80053de:	1af6      	subs	r6, r6, r3
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80053e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053e6:	b1f3      	cbz	r3, 8005426 <_dtoa_r+0x79e>
 80053e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 80b7 	beq.w	800555e <_dtoa_r+0x8d6>
 80053f0:	b18c      	cbz	r4, 8005416 <_dtoa_r+0x78e>
 80053f2:	4629      	mov	r1, r5
 80053f4:	4622      	mov	r2, r4
 80053f6:	4658      	mov	r0, fp
 80053f8:	f000 fd0c 	bl	8005e14 <__pow5mult>
 80053fc:	464a      	mov	r2, r9
 80053fe:	4601      	mov	r1, r0
 8005400:	4605      	mov	r5, r0
 8005402:	4658      	mov	r0, fp
 8005404:	f000 fc5c 	bl	8005cc0 <__multiply>
 8005408:	4649      	mov	r1, r9
 800540a:	9004      	str	r0, [sp, #16]
 800540c:	4658      	mov	r0, fp
 800540e:	f000 fb43 	bl	8005a98 <_Bfree>
 8005412:	9b04      	ldr	r3, [sp, #16]
 8005414:	4699      	mov	r9, r3
 8005416:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005418:	1b1a      	subs	r2, r3, r4
 800541a:	d004      	beq.n	8005426 <_dtoa_r+0x79e>
 800541c:	4649      	mov	r1, r9
 800541e:	4658      	mov	r0, fp
 8005420:	f000 fcf8 	bl	8005e14 <__pow5mult>
 8005424:	4681      	mov	r9, r0
 8005426:	2101      	movs	r1, #1
 8005428:	4658      	mov	r0, fp
 800542a:	f000 fc33 	bl	8005c94 <__i2b>
 800542e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005430:	4604      	mov	r4, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 81c9 	beq.w	80057ca <_dtoa_r+0xb42>
 8005438:	461a      	mov	r2, r3
 800543a:	4601      	mov	r1, r0
 800543c:	4658      	mov	r0, fp
 800543e:	f000 fce9 	bl	8005e14 <__pow5mult>
 8005442:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005444:	2b01      	cmp	r3, #1
 8005446:	4604      	mov	r4, r0
 8005448:	f300 808f 	bgt.w	800556a <_dtoa_r+0x8e2>
 800544c:	9b02      	ldr	r3, [sp, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	f040 8087 	bne.w	8005562 <_dtoa_r+0x8da>
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800545a:	2b00      	cmp	r3, #0
 800545c:	f040 8083 	bne.w	8005566 <_dtoa_r+0x8de>
 8005460:	9b03      	ldr	r3, [sp, #12]
 8005462:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005466:	0d1b      	lsrs	r3, r3, #20
 8005468:	051b      	lsls	r3, r3, #20
 800546a:	b12b      	cbz	r3, 8005478 <_dtoa_r+0x7f0>
 800546c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800546e:	3301      	adds	r3, #1
 8005470:	9309      	str	r3, [sp, #36]	@ 0x24
 8005472:	f108 0801 	add.w	r8, r8, #1
 8005476:	2301      	movs	r3, #1
 8005478:	930a      	str	r3, [sp, #40]	@ 0x28
 800547a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 81aa 	beq.w	80057d6 <_dtoa_r+0xb4e>
 8005482:	6923      	ldr	r3, [r4, #16]
 8005484:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005488:	6918      	ldr	r0, [r3, #16]
 800548a:	f000 fbb7 	bl	8005bfc <__hi0bits>
 800548e:	f1c0 0020 	rsb	r0, r0, #32
 8005492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005494:	4418      	add	r0, r3
 8005496:	f010 001f 	ands.w	r0, r0, #31
 800549a:	d071      	beq.n	8005580 <_dtoa_r+0x8f8>
 800549c:	f1c0 0320 	rsb	r3, r0, #32
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	dd65      	ble.n	8005570 <_dtoa_r+0x8e8>
 80054a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054a6:	f1c0 001c 	rsb	r0, r0, #28
 80054aa:	4403      	add	r3, r0
 80054ac:	4480      	add	r8, r0
 80054ae:	4406      	add	r6, r0
 80054b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80054b2:	f1b8 0f00 	cmp.w	r8, #0
 80054b6:	dd05      	ble.n	80054c4 <_dtoa_r+0x83c>
 80054b8:	4649      	mov	r1, r9
 80054ba:	4642      	mov	r2, r8
 80054bc:	4658      	mov	r0, fp
 80054be:	f000 fd03 	bl	8005ec8 <__lshift>
 80054c2:	4681      	mov	r9, r0
 80054c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	dd05      	ble.n	80054d6 <_dtoa_r+0x84e>
 80054ca:	4621      	mov	r1, r4
 80054cc:	461a      	mov	r2, r3
 80054ce:	4658      	mov	r0, fp
 80054d0:	f000 fcfa 	bl	8005ec8 <__lshift>
 80054d4:	4604      	mov	r4, r0
 80054d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d053      	beq.n	8005584 <_dtoa_r+0x8fc>
 80054dc:	4621      	mov	r1, r4
 80054de:	4648      	mov	r0, r9
 80054e0:	f000 fd5e 	bl	8005fa0 <__mcmp>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	da4d      	bge.n	8005584 <_dtoa_r+0x8fc>
 80054e8:	1e7b      	subs	r3, r7, #1
 80054ea:	9304      	str	r3, [sp, #16]
 80054ec:	4649      	mov	r1, r9
 80054ee:	2300      	movs	r3, #0
 80054f0:	220a      	movs	r2, #10
 80054f2:	4658      	mov	r0, fp
 80054f4:	f000 faf2 	bl	8005adc <__multadd>
 80054f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054fa:	4681      	mov	r9, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 816c 	beq.w	80057da <_dtoa_r+0xb52>
 8005502:	2300      	movs	r3, #0
 8005504:	4629      	mov	r1, r5
 8005506:	220a      	movs	r2, #10
 8005508:	4658      	mov	r0, fp
 800550a:	f000 fae7 	bl	8005adc <__multadd>
 800550e:	9b08      	ldr	r3, [sp, #32]
 8005510:	2b00      	cmp	r3, #0
 8005512:	4605      	mov	r5, r0
 8005514:	dc61      	bgt.n	80055da <_dtoa_r+0x952>
 8005516:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005518:	2b02      	cmp	r3, #2
 800551a:	dc3b      	bgt.n	8005594 <_dtoa_r+0x90c>
 800551c:	e05d      	b.n	80055da <_dtoa_r+0x952>
 800551e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005520:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005524:	e746      	b.n	80053b4 <_dtoa_r+0x72c>
 8005526:	9b07      	ldr	r3, [sp, #28]
 8005528:	1e5c      	subs	r4, r3, #1
 800552a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800552c:	42a3      	cmp	r3, r4
 800552e:	bfbf      	itttt	lt
 8005530:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005532:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005534:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005536:	1ae3      	sublt	r3, r4, r3
 8005538:	bfb4      	ite	lt
 800553a:	18d2      	addlt	r2, r2, r3
 800553c:	1b1c      	subge	r4, r3, r4
 800553e:	9b07      	ldr	r3, [sp, #28]
 8005540:	bfbc      	itt	lt
 8005542:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005544:	2400      	movlt	r4, #0
 8005546:	2b00      	cmp	r3, #0
 8005548:	bfb5      	itete	lt
 800554a:	eba8 0603 	sublt.w	r6, r8, r3
 800554e:	9b07      	ldrge	r3, [sp, #28]
 8005550:	2300      	movlt	r3, #0
 8005552:	4646      	movge	r6, r8
 8005554:	e730      	b.n	80053b8 <_dtoa_r+0x730>
 8005556:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005558:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800555a:	4646      	mov	r6, r8
 800555c:	e735      	b.n	80053ca <_dtoa_r+0x742>
 800555e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005560:	e75c      	b.n	800541c <_dtoa_r+0x794>
 8005562:	2300      	movs	r3, #0
 8005564:	e788      	b.n	8005478 <_dtoa_r+0x7f0>
 8005566:	9b02      	ldr	r3, [sp, #8]
 8005568:	e786      	b.n	8005478 <_dtoa_r+0x7f0>
 800556a:	2300      	movs	r3, #0
 800556c:	930a      	str	r3, [sp, #40]	@ 0x28
 800556e:	e788      	b.n	8005482 <_dtoa_r+0x7fa>
 8005570:	d09f      	beq.n	80054b2 <_dtoa_r+0x82a>
 8005572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005574:	331c      	adds	r3, #28
 8005576:	441a      	add	r2, r3
 8005578:	4498      	add	r8, r3
 800557a:	441e      	add	r6, r3
 800557c:	9209      	str	r2, [sp, #36]	@ 0x24
 800557e:	e798      	b.n	80054b2 <_dtoa_r+0x82a>
 8005580:	4603      	mov	r3, r0
 8005582:	e7f6      	b.n	8005572 <_dtoa_r+0x8ea>
 8005584:	9b07      	ldr	r3, [sp, #28]
 8005586:	9704      	str	r7, [sp, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	dc20      	bgt.n	80055ce <_dtoa_r+0x946>
 800558c:	9308      	str	r3, [sp, #32]
 800558e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005590:	2b02      	cmp	r3, #2
 8005592:	dd1e      	ble.n	80055d2 <_dtoa_r+0x94a>
 8005594:	9b08      	ldr	r3, [sp, #32]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f47f aebc 	bne.w	8005314 <_dtoa_r+0x68c>
 800559c:	4621      	mov	r1, r4
 800559e:	2205      	movs	r2, #5
 80055a0:	4658      	mov	r0, fp
 80055a2:	f000 fa9b 	bl	8005adc <__multadd>
 80055a6:	4601      	mov	r1, r0
 80055a8:	4604      	mov	r4, r0
 80055aa:	4648      	mov	r0, r9
 80055ac:	f000 fcf8 	bl	8005fa0 <__mcmp>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	f77f aeaf 	ble.w	8005314 <_dtoa_r+0x68c>
 80055b6:	4656      	mov	r6, sl
 80055b8:	2331      	movs	r3, #49	@ 0x31
 80055ba:	f806 3b01 	strb.w	r3, [r6], #1
 80055be:	9b04      	ldr	r3, [sp, #16]
 80055c0:	3301      	adds	r3, #1
 80055c2:	9304      	str	r3, [sp, #16]
 80055c4:	e6aa      	b.n	800531c <_dtoa_r+0x694>
 80055c6:	9c07      	ldr	r4, [sp, #28]
 80055c8:	9704      	str	r7, [sp, #16]
 80055ca:	4625      	mov	r5, r4
 80055cc:	e7f3      	b.n	80055b6 <_dtoa_r+0x92e>
 80055ce:	9b07      	ldr	r3, [sp, #28]
 80055d0:	9308      	str	r3, [sp, #32]
 80055d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8104 	beq.w	80057e2 <_dtoa_r+0xb5a>
 80055da:	2e00      	cmp	r6, #0
 80055dc:	dd05      	ble.n	80055ea <_dtoa_r+0x962>
 80055de:	4629      	mov	r1, r5
 80055e0:	4632      	mov	r2, r6
 80055e2:	4658      	mov	r0, fp
 80055e4:	f000 fc70 	bl	8005ec8 <__lshift>
 80055e8:	4605      	mov	r5, r0
 80055ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d05a      	beq.n	80056a6 <_dtoa_r+0xa1e>
 80055f0:	6869      	ldr	r1, [r5, #4]
 80055f2:	4658      	mov	r0, fp
 80055f4:	f000 fa10 	bl	8005a18 <_Balloc>
 80055f8:	4606      	mov	r6, r0
 80055fa:	b928      	cbnz	r0, 8005608 <_dtoa_r+0x980>
 80055fc:	4b84      	ldr	r3, [pc, #528]	@ (8005810 <_dtoa_r+0xb88>)
 80055fe:	4602      	mov	r2, r0
 8005600:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005604:	f7ff bb54 	b.w	8004cb0 <_dtoa_r+0x28>
 8005608:	692a      	ldr	r2, [r5, #16]
 800560a:	3202      	adds	r2, #2
 800560c:	0092      	lsls	r2, r2, #2
 800560e:	f105 010c 	add.w	r1, r5, #12
 8005612:	300c      	adds	r0, #12
 8005614:	f001 ff5e 	bl	80074d4 <memcpy>
 8005618:	2201      	movs	r2, #1
 800561a:	4631      	mov	r1, r6
 800561c:	4658      	mov	r0, fp
 800561e:	f000 fc53 	bl	8005ec8 <__lshift>
 8005622:	f10a 0301 	add.w	r3, sl, #1
 8005626:	9307      	str	r3, [sp, #28]
 8005628:	9b08      	ldr	r3, [sp, #32]
 800562a:	4453      	add	r3, sl
 800562c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800562e:	9b02      	ldr	r3, [sp, #8]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	462f      	mov	r7, r5
 8005636:	930a      	str	r3, [sp, #40]	@ 0x28
 8005638:	4605      	mov	r5, r0
 800563a:	9b07      	ldr	r3, [sp, #28]
 800563c:	4621      	mov	r1, r4
 800563e:	3b01      	subs	r3, #1
 8005640:	4648      	mov	r0, r9
 8005642:	9302      	str	r3, [sp, #8]
 8005644:	f7ff fa96 	bl	8004b74 <quorem>
 8005648:	4639      	mov	r1, r7
 800564a:	9008      	str	r0, [sp, #32]
 800564c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005650:	4648      	mov	r0, r9
 8005652:	f000 fca5 	bl	8005fa0 <__mcmp>
 8005656:	462a      	mov	r2, r5
 8005658:	9009      	str	r0, [sp, #36]	@ 0x24
 800565a:	4621      	mov	r1, r4
 800565c:	4658      	mov	r0, fp
 800565e:	f000 fcbb 	bl	8005fd8 <__mdiff>
 8005662:	68c2      	ldr	r2, [r0, #12]
 8005664:	4606      	mov	r6, r0
 8005666:	bb02      	cbnz	r2, 80056aa <_dtoa_r+0xa22>
 8005668:	4601      	mov	r1, r0
 800566a:	4648      	mov	r0, r9
 800566c:	f000 fc98 	bl	8005fa0 <__mcmp>
 8005670:	4602      	mov	r2, r0
 8005672:	4631      	mov	r1, r6
 8005674:	4658      	mov	r0, fp
 8005676:	920c      	str	r2, [sp, #48]	@ 0x30
 8005678:	f000 fa0e 	bl	8005a98 <_Bfree>
 800567c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800567e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005680:	9e07      	ldr	r6, [sp, #28]
 8005682:	ea43 0102 	orr.w	r1, r3, r2
 8005686:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005688:	4319      	orrs	r1, r3
 800568a:	d110      	bne.n	80056ae <_dtoa_r+0xa26>
 800568c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005690:	d029      	beq.n	80056e6 <_dtoa_r+0xa5e>
 8005692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005694:	2b00      	cmp	r3, #0
 8005696:	dd02      	ble.n	800569e <_dtoa_r+0xa16>
 8005698:	9b08      	ldr	r3, [sp, #32]
 800569a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800569e:	9b02      	ldr	r3, [sp, #8]
 80056a0:	f883 8000 	strb.w	r8, [r3]
 80056a4:	e63b      	b.n	800531e <_dtoa_r+0x696>
 80056a6:	4628      	mov	r0, r5
 80056a8:	e7bb      	b.n	8005622 <_dtoa_r+0x99a>
 80056aa:	2201      	movs	r2, #1
 80056ac:	e7e1      	b.n	8005672 <_dtoa_r+0x9ea>
 80056ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	db04      	blt.n	80056be <_dtoa_r+0xa36>
 80056b4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80056b6:	430b      	orrs	r3, r1
 80056b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056ba:	430b      	orrs	r3, r1
 80056bc:	d120      	bne.n	8005700 <_dtoa_r+0xa78>
 80056be:	2a00      	cmp	r2, #0
 80056c0:	dded      	ble.n	800569e <_dtoa_r+0xa16>
 80056c2:	4649      	mov	r1, r9
 80056c4:	2201      	movs	r2, #1
 80056c6:	4658      	mov	r0, fp
 80056c8:	f000 fbfe 	bl	8005ec8 <__lshift>
 80056cc:	4621      	mov	r1, r4
 80056ce:	4681      	mov	r9, r0
 80056d0:	f000 fc66 	bl	8005fa0 <__mcmp>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	dc03      	bgt.n	80056e0 <_dtoa_r+0xa58>
 80056d8:	d1e1      	bne.n	800569e <_dtoa_r+0xa16>
 80056da:	f018 0f01 	tst.w	r8, #1
 80056de:	d0de      	beq.n	800569e <_dtoa_r+0xa16>
 80056e0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80056e4:	d1d8      	bne.n	8005698 <_dtoa_r+0xa10>
 80056e6:	9a02      	ldr	r2, [sp, #8]
 80056e8:	2339      	movs	r3, #57	@ 0x39
 80056ea:	7013      	strb	r3, [r2, #0]
 80056ec:	4633      	mov	r3, r6
 80056ee:	461e      	mov	r6, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80056f6:	2a39      	cmp	r2, #57	@ 0x39
 80056f8:	d052      	beq.n	80057a0 <_dtoa_r+0xb18>
 80056fa:	3201      	adds	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	e60e      	b.n	800531e <_dtoa_r+0x696>
 8005700:	2a00      	cmp	r2, #0
 8005702:	dd07      	ble.n	8005714 <_dtoa_r+0xa8c>
 8005704:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005708:	d0ed      	beq.n	80056e6 <_dtoa_r+0xa5e>
 800570a:	9a02      	ldr	r2, [sp, #8]
 800570c:	f108 0301 	add.w	r3, r8, #1
 8005710:	7013      	strb	r3, [r2, #0]
 8005712:	e604      	b.n	800531e <_dtoa_r+0x696>
 8005714:	9b07      	ldr	r3, [sp, #28]
 8005716:	9a07      	ldr	r2, [sp, #28]
 8005718:	f803 8c01 	strb.w	r8, [r3, #-1]
 800571c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800571e:	4293      	cmp	r3, r2
 8005720:	d028      	beq.n	8005774 <_dtoa_r+0xaec>
 8005722:	4649      	mov	r1, r9
 8005724:	2300      	movs	r3, #0
 8005726:	220a      	movs	r2, #10
 8005728:	4658      	mov	r0, fp
 800572a:	f000 f9d7 	bl	8005adc <__multadd>
 800572e:	42af      	cmp	r7, r5
 8005730:	4681      	mov	r9, r0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	f04f 020a 	mov.w	r2, #10
 800573a:	4639      	mov	r1, r7
 800573c:	4658      	mov	r0, fp
 800573e:	d107      	bne.n	8005750 <_dtoa_r+0xac8>
 8005740:	f000 f9cc 	bl	8005adc <__multadd>
 8005744:	4607      	mov	r7, r0
 8005746:	4605      	mov	r5, r0
 8005748:	9b07      	ldr	r3, [sp, #28]
 800574a:	3301      	adds	r3, #1
 800574c:	9307      	str	r3, [sp, #28]
 800574e:	e774      	b.n	800563a <_dtoa_r+0x9b2>
 8005750:	f000 f9c4 	bl	8005adc <__multadd>
 8005754:	4629      	mov	r1, r5
 8005756:	4607      	mov	r7, r0
 8005758:	2300      	movs	r3, #0
 800575a:	220a      	movs	r2, #10
 800575c:	4658      	mov	r0, fp
 800575e:	f000 f9bd 	bl	8005adc <__multadd>
 8005762:	4605      	mov	r5, r0
 8005764:	e7f0      	b.n	8005748 <_dtoa_r+0xac0>
 8005766:	9b08      	ldr	r3, [sp, #32]
 8005768:	2b00      	cmp	r3, #0
 800576a:	bfcc      	ite	gt
 800576c:	461e      	movgt	r6, r3
 800576e:	2601      	movle	r6, #1
 8005770:	4456      	add	r6, sl
 8005772:	2700      	movs	r7, #0
 8005774:	4649      	mov	r1, r9
 8005776:	2201      	movs	r2, #1
 8005778:	4658      	mov	r0, fp
 800577a:	f000 fba5 	bl	8005ec8 <__lshift>
 800577e:	4621      	mov	r1, r4
 8005780:	4681      	mov	r9, r0
 8005782:	f000 fc0d 	bl	8005fa0 <__mcmp>
 8005786:	2800      	cmp	r0, #0
 8005788:	dcb0      	bgt.n	80056ec <_dtoa_r+0xa64>
 800578a:	d102      	bne.n	8005792 <_dtoa_r+0xb0a>
 800578c:	f018 0f01 	tst.w	r8, #1
 8005790:	d1ac      	bne.n	80056ec <_dtoa_r+0xa64>
 8005792:	4633      	mov	r3, r6
 8005794:	461e      	mov	r6, r3
 8005796:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800579a:	2a30      	cmp	r2, #48	@ 0x30
 800579c:	d0fa      	beq.n	8005794 <_dtoa_r+0xb0c>
 800579e:	e5be      	b.n	800531e <_dtoa_r+0x696>
 80057a0:	459a      	cmp	sl, r3
 80057a2:	d1a4      	bne.n	80056ee <_dtoa_r+0xa66>
 80057a4:	9b04      	ldr	r3, [sp, #16]
 80057a6:	3301      	adds	r3, #1
 80057a8:	9304      	str	r3, [sp, #16]
 80057aa:	2331      	movs	r3, #49	@ 0x31
 80057ac:	f88a 3000 	strb.w	r3, [sl]
 80057b0:	e5b5      	b.n	800531e <_dtoa_r+0x696>
 80057b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80057b4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005814 <_dtoa_r+0xb8c>
 80057b8:	b11b      	cbz	r3, 80057c2 <_dtoa_r+0xb3a>
 80057ba:	f10a 0308 	add.w	r3, sl, #8
 80057be:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	4650      	mov	r0, sl
 80057c4:	b017      	add	sp, #92	@ 0x5c
 80057c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	f77f ae3d 	ble.w	800544c <_dtoa_r+0x7c4>
 80057d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80057d6:	2001      	movs	r0, #1
 80057d8:	e65b      	b.n	8005492 <_dtoa_r+0x80a>
 80057da:	9b08      	ldr	r3, [sp, #32]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f77f aed6 	ble.w	800558e <_dtoa_r+0x906>
 80057e2:	4656      	mov	r6, sl
 80057e4:	4621      	mov	r1, r4
 80057e6:	4648      	mov	r0, r9
 80057e8:	f7ff f9c4 	bl	8004b74 <quorem>
 80057ec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80057f0:	f806 8b01 	strb.w	r8, [r6], #1
 80057f4:	9b08      	ldr	r3, [sp, #32]
 80057f6:	eba6 020a 	sub.w	r2, r6, sl
 80057fa:	4293      	cmp	r3, r2
 80057fc:	ddb3      	ble.n	8005766 <_dtoa_r+0xade>
 80057fe:	4649      	mov	r1, r9
 8005800:	2300      	movs	r3, #0
 8005802:	220a      	movs	r2, #10
 8005804:	4658      	mov	r0, fp
 8005806:	f000 f969 	bl	8005adc <__multadd>
 800580a:	4681      	mov	r9, r0
 800580c:	e7ea      	b.n	80057e4 <_dtoa_r+0xb5c>
 800580e:	bf00      	nop
 8005810:	080082f5 	.word	0x080082f5
 8005814:	08008279 	.word	0x08008279

08005818 <_free_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4605      	mov	r5, r0
 800581c:	2900      	cmp	r1, #0
 800581e:	d041      	beq.n	80058a4 <_free_r+0x8c>
 8005820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005824:	1f0c      	subs	r4, r1, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	bfb8      	it	lt
 800582a:	18e4      	addlt	r4, r4, r3
 800582c:	f000 f8e8 	bl	8005a00 <__malloc_lock>
 8005830:	4a1d      	ldr	r2, [pc, #116]	@ (80058a8 <_free_r+0x90>)
 8005832:	6813      	ldr	r3, [r2, #0]
 8005834:	b933      	cbnz	r3, 8005844 <_free_r+0x2c>
 8005836:	6063      	str	r3, [r4, #4]
 8005838:	6014      	str	r4, [r2, #0]
 800583a:	4628      	mov	r0, r5
 800583c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005840:	f000 b8e4 	b.w	8005a0c <__malloc_unlock>
 8005844:	42a3      	cmp	r3, r4
 8005846:	d908      	bls.n	800585a <_free_r+0x42>
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	1821      	adds	r1, r4, r0
 800584c:	428b      	cmp	r3, r1
 800584e:	bf01      	itttt	eq
 8005850:	6819      	ldreq	r1, [r3, #0]
 8005852:	685b      	ldreq	r3, [r3, #4]
 8005854:	1809      	addeq	r1, r1, r0
 8005856:	6021      	streq	r1, [r4, #0]
 8005858:	e7ed      	b.n	8005836 <_free_r+0x1e>
 800585a:	461a      	mov	r2, r3
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	b10b      	cbz	r3, 8005864 <_free_r+0x4c>
 8005860:	42a3      	cmp	r3, r4
 8005862:	d9fa      	bls.n	800585a <_free_r+0x42>
 8005864:	6811      	ldr	r1, [r2, #0]
 8005866:	1850      	adds	r0, r2, r1
 8005868:	42a0      	cmp	r0, r4
 800586a:	d10b      	bne.n	8005884 <_free_r+0x6c>
 800586c:	6820      	ldr	r0, [r4, #0]
 800586e:	4401      	add	r1, r0
 8005870:	1850      	adds	r0, r2, r1
 8005872:	4283      	cmp	r3, r0
 8005874:	6011      	str	r1, [r2, #0]
 8005876:	d1e0      	bne.n	800583a <_free_r+0x22>
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	6053      	str	r3, [r2, #4]
 800587e:	4408      	add	r0, r1
 8005880:	6010      	str	r0, [r2, #0]
 8005882:	e7da      	b.n	800583a <_free_r+0x22>
 8005884:	d902      	bls.n	800588c <_free_r+0x74>
 8005886:	230c      	movs	r3, #12
 8005888:	602b      	str	r3, [r5, #0]
 800588a:	e7d6      	b.n	800583a <_free_r+0x22>
 800588c:	6820      	ldr	r0, [r4, #0]
 800588e:	1821      	adds	r1, r4, r0
 8005890:	428b      	cmp	r3, r1
 8005892:	bf04      	itt	eq
 8005894:	6819      	ldreq	r1, [r3, #0]
 8005896:	685b      	ldreq	r3, [r3, #4]
 8005898:	6063      	str	r3, [r4, #4]
 800589a:	bf04      	itt	eq
 800589c:	1809      	addeq	r1, r1, r0
 800589e:	6021      	streq	r1, [r4, #0]
 80058a0:	6054      	str	r4, [r2, #4]
 80058a2:	e7ca      	b.n	800583a <_free_r+0x22>
 80058a4:	bd38      	pop	{r3, r4, r5, pc}
 80058a6:	bf00      	nop
 80058a8:	20000408 	.word	0x20000408

080058ac <malloc>:
 80058ac:	4b02      	ldr	r3, [pc, #8]	@ (80058b8 <malloc+0xc>)
 80058ae:	4601      	mov	r1, r0
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	f000 b825 	b.w	8005900 <_malloc_r>
 80058b6:	bf00      	nop
 80058b8:	20000018 	.word	0x20000018

080058bc <sbrk_aligned>:
 80058bc:	b570      	push	{r4, r5, r6, lr}
 80058be:	4e0f      	ldr	r6, [pc, #60]	@ (80058fc <sbrk_aligned+0x40>)
 80058c0:	460c      	mov	r4, r1
 80058c2:	6831      	ldr	r1, [r6, #0]
 80058c4:	4605      	mov	r5, r0
 80058c6:	b911      	cbnz	r1, 80058ce <sbrk_aligned+0x12>
 80058c8:	f001 fdf4 	bl	80074b4 <_sbrk_r>
 80058cc:	6030      	str	r0, [r6, #0]
 80058ce:	4621      	mov	r1, r4
 80058d0:	4628      	mov	r0, r5
 80058d2:	f001 fdef 	bl	80074b4 <_sbrk_r>
 80058d6:	1c43      	adds	r3, r0, #1
 80058d8:	d103      	bne.n	80058e2 <sbrk_aligned+0x26>
 80058da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80058de:	4620      	mov	r0, r4
 80058e0:	bd70      	pop	{r4, r5, r6, pc}
 80058e2:	1cc4      	adds	r4, r0, #3
 80058e4:	f024 0403 	bic.w	r4, r4, #3
 80058e8:	42a0      	cmp	r0, r4
 80058ea:	d0f8      	beq.n	80058de <sbrk_aligned+0x22>
 80058ec:	1a21      	subs	r1, r4, r0
 80058ee:	4628      	mov	r0, r5
 80058f0:	f001 fde0 	bl	80074b4 <_sbrk_r>
 80058f4:	3001      	adds	r0, #1
 80058f6:	d1f2      	bne.n	80058de <sbrk_aligned+0x22>
 80058f8:	e7ef      	b.n	80058da <sbrk_aligned+0x1e>
 80058fa:	bf00      	nop
 80058fc:	20000404 	.word	0x20000404

08005900 <_malloc_r>:
 8005900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005904:	1ccd      	adds	r5, r1, #3
 8005906:	f025 0503 	bic.w	r5, r5, #3
 800590a:	3508      	adds	r5, #8
 800590c:	2d0c      	cmp	r5, #12
 800590e:	bf38      	it	cc
 8005910:	250c      	movcc	r5, #12
 8005912:	2d00      	cmp	r5, #0
 8005914:	4606      	mov	r6, r0
 8005916:	db01      	blt.n	800591c <_malloc_r+0x1c>
 8005918:	42a9      	cmp	r1, r5
 800591a:	d904      	bls.n	8005926 <_malloc_r+0x26>
 800591c:	230c      	movs	r3, #12
 800591e:	6033      	str	r3, [r6, #0]
 8005920:	2000      	movs	r0, #0
 8005922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059fc <_malloc_r+0xfc>
 800592a:	f000 f869 	bl	8005a00 <__malloc_lock>
 800592e:	f8d8 3000 	ldr.w	r3, [r8]
 8005932:	461c      	mov	r4, r3
 8005934:	bb44      	cbnz	r4, 8005988 <_malloc_r+0x88>
 8005936:	4629      	mov	r1, r5
 8005938:	4630      	mov	r0, r6
 800593a:	f7ff ffbf 	bl	80058bc <sbrk_aligned>
 800593e:	1c43      	adds	r3, r0, #1
 8005940:	4604      	mov	r4, r0
 8005942:	d158      	bne.n	80059f6 <_malloc_r+0xf6>
 8005944:	f8d8 4000 	ldr.w	r4, [r8]
 8005948:	4627      	mov	r7, r4
 800594a:	2f00      	cmp	r7, #0
 800594c:	d143      	bne.n	80059d6 <_malloc_r+0xd6>
 800594e:	2c00      	cmp	r4, #0
 8005950:	d04b      	beq.n	80059ea <_malloc_r+0xea>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	4639      	mov	r1, r7
 8005956:	4630      	mov	r0, r6
 8005958:	eb04 0903 	add.w	r9, r4, r3
 800595c:	f001 fdaa 	bl	80074b4 <_sbrk_r>
 8005960:	4581      	cmp	r9, r0
 8005962:	d142      	bne.n	80059ea <_malloc_r+0xea>
 8005964:	6821      	ldr	r1, [r4, #0]
 8005966:	1a6d      	subs	r5, r5, r1
 8005968:	4629      	mov	r1, r5
 800596a:	4630      	mov	r0, r6
 800596c:	f7ff ffa6 	bl	80058bc <sbrk_aligned>
 8005970:	3001      	adds	r0, #1
 8005972:	d03a      	beq.n	80059ea <_malloc_r+0xea>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	442b      	add	r3, r5
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	f8d8 3000 	ldr.w	r3, [r8]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	bb62      	cbnz	r2, 80059dc <_malloc_r+0xdc>
 8005982:	f8c8 7000 	str.w	r7, [r8]
 8005986:	e00f      	b.n	80059a8 <_malloc_r+0xa8>
 8005988:	6822      	ldr	r2, [r4, #0]
 800598a:	1b52      	subs	r2, r2, r5
 800598c:	d420      	bmi.n	80059d0 <_malloc_r+0xd0>
 800598e:	2a0b      	cmp	r2, #11
 8005990:	d917      	bls.n	80059c2 <_malloc_r+0xc2>
 8005992:	1961      	adds	r1, r4, r5
 8005994:	42a3      	cmp	r3, r4
 8005996:	6025      	str	r5, [r4, #0]
 8005998:	bf18      	it	ne
 800599a:	6059      	strne	r1, [r3, #4]
 800599c:	6863      	ldr	r3, [r4, #4]
 800599e:	bf08      	it	eq
 80059a0:	f8c8 1000 	streq.w	r1, [r8]
 80059a4:	5162      	str	r2, [r4, r5]
 80059a6:	604b      	str	r3, [r1, #4]
 80059a8:	4630      	mov	r0, r6
 80059aa:	f000 f82f 	bl	8005a0c <__malloc_unlock>
 80059ae:	f104 000b 	add.w	r0, r4, #11
 80059b2:	1d23      	adds	r3, r4, #4
 80059b4:	f020 0007 	bic.w	r0, r0, #7
 80059b8:	1ac2      	subs	r2, r0, r3
 80059ba:	bf1c      	itt	ne
 80059bc:	1a1b      	subne	r3, r3, r0
 80059be:	50a3      	strne	r3, [r4, r2]
 80059c0:	e7af      	b.n	8005922 <_malloc_r+0x22>
 80059c2:	6862      	ldr	r2, [r4, #4]
 80059c4:	42a3      	cmp	r3, r4
 80059c6:	bf0c      	ite	eq
 80059c8:	f8c8 2000 	streq.w	r2, [r8]
 80059cc:	605a      	strne	r2, [r3, #4]
 80059ce:	e7eb      	b.n	80059a8 <_malloc_r+0xa8>
 80059d0:	4623      	mov	r3, r4
 80059d2:	6864      	ldr	r4, [r4, #4]
 80059d4:	e7ae      	b.n	8005934 <_malloc_r+0x34>
 80059d6:	463c      	mov	r4, r7
 80059d8:	687f      	ldr	r7, [r7, #4]
 80059da:	e7b6      	b.n	800594a <_malloc_r+0x4a>
 80059dc:	461a      	mov	r2, r3
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	42a3      	cmp	r3, r4
 80059e2:	d1fb      	bne.n	80059dc <_malloc_r+0xdc>
 80059e4:	2300      	movs	r3, #0
 80059e6:	6053      	str	r3, [r2, #4]
 80059e8:	e7de      	b.n	80059a8 <_malloc_r+0xa8>
 80059ea:	230c      	movs	r3, #12
 80059ec:	6033      	str	r3, [r6, #0]
 80059ee:	4630      	mov	r0, r6
 80059f0:	f000 f80c 	bl	8005a0c <__malloc_unlock>
 80059f4:	e794      	b.n	8005920 <_malloc_r+0x20>
 80059f6:	6005      	str	r5, [r0, #0]
 80059f8:	e7d6      	b.n	80059a8 <_malloc_r+0xa8>
 80059fa:	bf00      	nop
 80059fc:	20000408 	.word	0x20000408

08005a00 <__malloc_lock>:
 8005a00:	4801      	ldr	r0, [pc, #4]	@ (8005a08 <__malloc_lock+0x8>)
 8005a02:	f7ff b8b0 	b.w	8004b66 <__retarget_lock_acquire_recursive>
 8005a06:	bf00      	nop
 8005a08:	20000400 	.word	0x20000400

08005a0c <__malloc_unlock>:
 8005a0c:	4801      	ldr	r0, [pc, #4]	@ (8005a14 <__malloc_unlock+0x8>)
 8005a0e:	f7ff b8ab 	b.w	8004b68 <__retarget_lock_release_recursive>
 8005a12:	bf00      	nop
 8005a14:	20000400 	.word	0x20000400

08005a18 <_Balloc>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	69c6      	ldr	r6, [r0, #28]
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	460d      	mov	r5, r1
 8005a20:	b976      	cbnz	r6, 8005a40 <_Balloc+0x28>
 8005a22:	2010      	movs	r0, #16
 8005a24:	f7ff ff42 	bl	80058ac <malloc>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	61e0      	str	r0, [r4, #28]
 8005a2c:	b920      	cbnz	r0, 8005a38 <_Balloc+0x20>
 8005a2e:	4b18      	ldr	r3, [pc, #96]	@ (8005a90 <_Balloc+0x78>)
 8005a30:	4818      	ldr	r0, [pc, #96]	@ (8005a94 <_Balloc+0x7c>)
 8005a32:	216b      	movs	r1, #107	@ 0x6b
 8005a34:	f001 fd62 	bl	80074fc <__assert_func>
 8005a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a3c:	6006      	str	r6, [r0, #0]
 8005a3e:	60c6      	str	r6, [r0, #12]
 8005a40:	69e6      	ldr	r6, [r4, #28]
 8005a42:	68f3      	ldr	r3, [r6, #12]
 8005a44:	b183      	cbz	r3, 8005a68 <_Balloc+0x50>
 8005a46:	69e3      	ldr	r3, [r4, #28]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a4e:	b9b8      	cbnz	r0, 8005a80 <_Balloc+0x68>
 8005a50:	2101      	movs	r1, #1
 8005a52:	fa01 f605 	lsl.w	r6, r1, r5
 8005a56:	1d72      	adds	r2, r6, #5
 8005a58:	0092      	lsls	r2, r2, #2
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f001 fd6c 	bl	8007538 <_calloc_r>
 8005a60:	b160      	cbz	r0, 8005a7c <_Balloc+0x64>
 8005a62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a66:	e00e      	b.n	8005a86 <_Balloc+0x6e>
 8005a68:	2221      	movs	r2, #33	@ 0x21
 8005a6a:	2104      	movs	r1, #4
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f001 fd63 	bl	8007538 <_calloc_r>
 8005a72:	69e3      	ldr	r3, [r4, #28]
 8005a74:	60f0      	str	r0, [r6, #12]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e4      	bne.n	8005a46 <_Balloc+0x2e>
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	6802      	ldr	r2, [r0, #0]
 8005a82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a86:	2300      	movs	r3, #0
 8005a88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a8c:	e7f7      	b.n	8005a7e <_Balloc+0x66>
 8005a8e:	bf00      	nop
 8005a90:	08008286 	.word	0x08008286
 8005a94:	08008306 	.word	0x08008306

08005a98 <_Bfree>:
 8005a98:	b570      	push	{r4, r5, r6, lr}
 8005a9a:	69c6      	ldr	r6, [r0, #28]
 8005a9c:	4605      	mov	r5, r0
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	b976      	cbnz	r6, 8005ac0 <_Bfree+0x28>
 8005aa2:	2010      	movs	r0, #16
 8005aa4:	f7ff ff02 	bl	80058ac <malloc>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	61e8      	str	r0, [r5, #28]
 8005aac:	b920      	cbnz	r0, 8005ab8 <_Bfree+0x20>
 8005aae:	4b09      	ldr	r3, [pc, #36]	@ (8005ad4 <_Bfree+0x3c>)
 8005ab0:	4809      	ldr	r0, [pc, #36]	@ (8005ad8 <_Bfree+0x40>)
 8005ab2:	218f      	movs	r1, #143	@ 0x8f
 8005ab4:	f001 fd22 	bl	80074fc <__assert_func>
 8005ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005abc:	6006      	str	r6, [r0, #0]
 8005abe:	60c6      	str	r6, [r0, #12]
 8005ac0:	b13c      	cbz	r4, 8005ad2 <_Bfree+0x3a>
 8005ac2:	69eb      	ldr	r3, [r5, #28]
 8005ac4:	6862      	ldr	r2, [r4, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005acc:	6021      	str	r1, [r4, #0]
 8005ace:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	08008286 	.word	0x08008286
 8005ad8:	08008306 	.word	0x08008306

08005adc <__multadd>:
 8005adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae0:	690d      	ldr	r5, [r1, #16]
 8005ae2:	4607      	mov	r7, r0
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	461e      	mov	r6, r3
 8005ae8:	f101 0c14 	add.w	ip, r1, #20
 8005aec:	2000      	movs	r0, #0
 8005aee:	f8dc 3000 	ldr.w	r3, [ip]
 8005af2:	b299      	uxth	r1, r3
 8005af4:	fb02 6101 	mla	r1, r2, r1, r6
 8005af8:	0c1e      	lsrs	r6, r3, #16
 8005afa:	0c0b      	lsrs	r3, r1, #16
 8005afc:	fb02 3306 	mla	r3, r2, r6, r3
 8005b00:	b289      	uxth	r1, r1
 8005b02:	3001      	adds	r0, #1
 8005b04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b08:	4285      	cmp	r5, r0
 8005b0a:	f84c 1b04 	str.w	r1, [ip], #4
 8005b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b12:	dcec      	bgt.n	8005aee <__multadd+0x12>
 8005b14:	b30e      	cbz	r6, 8005b5a <__multadd+0x7e>
 8005b16:	68a3      	ldr	r3, [r4, #8]
 8005b18:	42ab      	cmp	r3, r5
 8005b1a:	dc19      	bgt.n	8005b50 <__multadd+0x74>
 8005b1c:	6861      	ldr	r1, [r4, #4]
 8005b1e:	4638      	mov	r0, r7
 8005b20:	3101      	adds	r1, #1
 8005b22:	f7ff ff79 	bl	8005a18 <_Balloc>
 8005b26:	4680      	mov	r8, r0
 8005b28:	b928      	cbnz	r0, 8005b36 <__multadd+0x5a>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b60 <__multadd+0x84>)
 8005b2e:	480d      	ldr	r0, [pc, #52]	@ (8005b64 <__multadd+0x88>)
 8005b30:	21ba      	movs	r1, #186	@ 0xba
 8005b32:	f001 fce3 	bl	80074fc <__assert_func>
 8005b36:	6922      	ldr	r2, [r4, #16]
 8005b38:	3202      	adds	r2, #2
 8005b3a:	f104 010c 	add.w	r1, r4, #12
 8005b3e:	0092      	lsls	r2, r2, #2
 8005b40:	300c      	adds	r0, #12
 8005b42:	f001 fcc7 	bl	80074d4 <memcpy>
 8005b46:	4621      	mov	r1, r4
 8005b48:	4638      	mov	r0, r7
 8005b4a:	f7ff ffa5 	bl	8005a98 <_Bfree>
 8005b4e:	4644      	mov	r4, r8
 8005b50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b54:	3501      	adds	r5, #1
 8005b56:	615e      	str	r6, [r3, #20]
 8005b58:	6125      	str	r5, [r4, #16]
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b60:	080082f5 	.word	0x080082f5
 8005b64:	08008306 	.word	0x08008306

08005b68 <__s2b>:
 8005b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	4615      	mov	r5, r2
 8005b70:	461f      	mov	r7, r3
 8005b72:	2209      	movs	r2, #9
 8005b74:	3308      	adds	r3, #8
 8005b76:	4606      	mov	r6, r0
 8005b78:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	2201      	movs	r2, #1
 8005b80:	429a      	cmp	r2, r3
 8005b82:	db09      	blt.n	8005b98 <__s2b+0x30>
 8005b84:	4630      	mov	r0, r6
 8005b86:	f7ff ff47 	bl	8005a18 <_Balloc>
 8005b8a:	b940      	cbnz	r0, 8005b9e <__s2b+0x36>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	4b19      	ldr	r3, [pc, #100]	@ (8005bf4 <__s2b+0x8c>)
 8005b90:	4819      	ldr	r0, [pc, #100]	@ (8005bf8 <__s2b+0x90>)
 8005b92:	21d3      	movs	r1, #211	@ 0xd3
 8005b94:	f001 fcb2 	bl	80074fc <__assert_func>
 8005b98:	0052      	lsls	r2, r2, #1
 8005b9a:	3101      	adds	r1, #1
 8005b9c:	e7f0      	b.n	8005b80 <__s2b+0x18>
 8005b9e:	9b08      	ldr	r3, [sp, #32]
 8005ba0:	6143      	str	r3, [r0, #20]
 8005ba2:	2d09      	cmp	r5, #9
 8005ba4:	f04f 0301 	mov.w	r3, #1
 8005ba8:	6103      	str	r3, [r0, #16]
 8005baa:	dd16      	ble.n	8005bda <__s2b+0x72>
 8005bac:	f104 0909 	add.w	r9, r4, #9
 8005bb0:	46c8      	mov	r8, r9
 8005bb2:	442c      	add	r4, r5
 8005bb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005bb8:	4601      	mov	r1, r0
 8005bba:	3b30      	subs	r3, #48	@ 0x30
 8005bbc:	220a      	movs	r2, #10
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f7ff ff8c 	bl	8005adc <__multadd>
 8005bc4:	45a0      	cmp	r8, r4
 8005bc6:	d1f5      	bne.n	8005bb4 <__s2b+0x4c>
 8005bc8:	f1a5 0408 	sub.w	r4, r5, #8
 8005bcc:	444c      	add	r4, r9
 8005bce:	1b2d      	subs	r5, r5, r4
 8005bd0:	1963      	adds	r3, r4, r5
 8005bd2:	42bb      	cmp	r3, r7
 8005bd4:	db04      	blt.n	8005be0 <__s2b+0x78>
 8005bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bda:	340a      	adds	r4, #10
 8005bdc:	2509      	movs	r5, #9
 8005bde:	e7f6      	b.n	8005bce <__s2b+0x66>
 8005be0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005be4:	4601      	mov	r1, r0
 8005be6:	3b30      	subs	r3, #48	@ 0x30
 8005be8:	220a      	movs	r2, #10
 8005bea:	4630      	mov	r0, r6
 8005bec:	f7ff ff76 	bl	8005adc <__multadd>
 8005bf0:	e7ee      	b.n	8005bd0 <__s2b+0x68>
 8005bf2:	bf00      	nop
 8005bf4:	080082f5 	.word	0x080082f5
 8005bf8:	08008306 	.word	0x08008306

08005bfc <__hi0bits>:
 8005bfc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005c00:	4603      	mov	r3, r0
 8005c02:	bf36      	itet	cc
 8005c04:	0403      	lslcc	r3, r0, #16
 8005c06:	2000      	movcs	r0, #0
 8005c08:	2010      	movcc	r0, #16
 8005c0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c0e:	bf3c      	itt	cc
 8005c10:	021b      	lslcc	r3, r3, #8
 8005c12:	3008      	addcc	r0, #8
 8005c14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c18:	bf3c      	itt	cc
 8005c1a:	011b      	lslcc	r3, r3, #4
 8005c1c:	3004      	addcc	r0, #4
 8005c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c22:	bf3c      	itt	cc
 8005c24:	009b      	lslcc	r3, r3, #2
 8005c26:	3002      	addcc	r0, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	db05      	blt.n	8005c38 <__hi0bits+0x3c>
 8005c2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005c30:	f100 0001 	add.w	r0, r0, #1
 8005c34:	bf08      	it	eq
 8005c36:	2020      	moveq	r0, #32
 8005c38:	4770      	bx	lr

08005c3a <__lo0bits>:
 8005c3a:	6803      	ldr	r3, [r0, #0]
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	f013 0007 	ands.w	r0, r3, #7
 8005c42:	d00b      	beq.n	8005c5c <__lo0bits+0x22>
 8005c44:	07d9      	lsls	r1, r3, #31
 8005c46:	d421      	bmi.n	8005c8c <__lo0bits+0x52>
 8005c48:	0798      	lsls	r0, r3, #30
 8005c4a:	bf49      	itett	mi
 8005c4c:	085b      	lsrmi	r3, r3, #1
 8005c4e:	089b      	lsrpl	r3, r3, #2
 8005c50:	2001      	movmi	r0, #1
 8005c52:	6013      	strmi	r3, [r2, #0]
 8005c54:	bf5c      	itt	pl
 8005c56:	6013      	strpl	r3, [r2, #0]
 8005c58:	2002      	movpl	r0, #2
 8005c5a:	4770      	bx	lr
 8005c5c:	b299      	uxth	r1, r3
 8005c5e:	b909      	cbnz	r1, 8005c64 <__lo0bits+0x2a>
 8005c60:	0c1b      	lsrs	r3, r3, #16
 8005c62:	2010      	movs	r0, #16
 8005c64:	b2d9      	uxtb	r1, r3
 8005c66:	b909      	cbnz	r1, 8005c6c <__lo0bits+0x32>
 8005c68:	3008      	adds	r0, #8
 8005c6a:	0a1b      	lsrs	r3, r3, #8
 8005c6c:	0719      	lsls	r1, r3, #28
 8005c6e:	bf04      	itt	eq
 8005c70:	091b      	lsreq	r3, r3, #4
 8005c72:	3004      	addeq	r0, #4
 8005c74:	0799      	lsls	r1, r3, #30
 8005c76:	bf04      	itt	eq
 8005c78:	089b      	lsreq	r3, r3, #2
 8005c7a:	3002      	addeq	r0, #2
 8005c7c:	07d9      	lsls	r1, r3, #31
 8005c7e:	d403      	bmi.n	8005c88 <__lo0bits+0x4e>
 8005c80:	085b      	lsrs	r3, r3, #1
 8005c82:	f100 0001 	add.w	r0, r0, #1
 8005c86:	d003      	beq.n	8005c90 <__lo0bits+0x56>
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	4770      	bx	lr
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	4770      	bx	lr
 8005c90:	2020      	movs	r0, #32
 8005c92:	4770      	bx	lr

08005c94 <__i2b>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	460c      	mov	r4, r1
 8005c98:	2101      	movs	r1, #1
 8005c9a:	f7ff febd 	bl	8005a18 <_Balloc>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	b928      	cbnz	r0, 8005cae <__i2b+0x1a>
 8005ca2:	4b05      	ldr	r3, [pc, #20]	@ (8005cb8 <__i2b+0x24>)
 8005ca4:	4805      	ldr	r0, [pc, #20]	@ (8005cbc <__i2b+0x28>)
 8005ca6:	f240 1145 	movw	r1, #325	@ 0x145
 8005caa:	f001 fc27 	bl	80074fc <__assert_func>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	6144      	str	r4, [r0, #20]
 8005cb2:	6103      	str	r3, [r0, #16]
 8005cb4:	bd10      	pop	{r4, pc}
 8005cb6:	bf00      	nop
 8005cb8:	080082f5 	.word	0x080082f5
 8005cbc:	08008306 	.word	0x08008306

08005cc0 <__multiply>:
 8005cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	690a      	ldr	r2, [r1, #16]
 8005cc8:	6923      	ldr	r3, [r4, #16]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	bfa8      	it	ge
 8005cce:	4623      	movge	r3, r4
 8005cd0:	460f      	mov	r7, r1
 8005cd2:	bfa4      	itt	ge
 8005cd4:	460c      	movge	r4, r1
 8005cd6:	461f      	movge	r7, r3
 8005cd8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005cdc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005ce0:	68a3      	ldr	r3, [r4, #8]
 8005ce2:	6861      	ldr	r1, [r4, #4]
 8005ce4:	eb0a 0609 	add.w	r6, sl, r9
 8005ce8:	42b3      	cmp	r3, r6
 8005cea:	b085      	sub	sp, #20
 8005cec:	bfb8      	it	lt
 8005cee:	3101      	addlt	r1, #1
 8005cf0:	f7ff fe92 	bl	8005a18 <_Balloc>
 8005cf4:	b930      	cbnz	r0, 8005d04 <__multiply+0x44>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	4b44      	ldr	r3, [pc, #272]	@ (8005e0c <__multiply+0x14c>)
 8005cfa:	4845      	ldr	r0, [pc, #276]	@ (8005e10 <__multiply+0x150>)
 8005cfc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005d00:	f001 fbfc 	bl	80074fc <__assert_func>
 8005d04:	f100 0514 	add.w	r5, r0, #20
 8005d08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d0c:	462b      	mov	r3, r5
 8005d0e:	2200      	movs	r2, #0
 8005d10:	4543      	cmp	r3, r8
 8005d12:	d321      	bcc.n	8005d58 <__multiply+0x98>
 8005d14:	f107 0114 	add.w	r1, r7, #20
 8005d18:	f104 0214 	add.w	r2, r4, #20
 8005d1c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005d20:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005d24:	9302      	str	r3, [sp, #8]
 8005d26:	1b13      	subs	r3, r2, r4
 8005d28:	3b15      	subs	r3, #21
 8005d2a:	f023 0303 	bic.w	r3, r3, #3
 8005d2e:	3304      	adds	r3, #4
 8005d30:	f104 0715 	add.w	r7, r4, #21
 8005d34:	42ba      	cmp	r2, r7
 8005d36:	bf38      	it	cc
 8005d38:	2304      	movcc	r3, #4
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	9b02      	ldr	r3, [sp, #8]
 8005d3e:	9103      	str	r1, [sp, #12]
 8005d40:	428b      	cmp	r3, r1
 8005d42:	d80c      	bhi.n	8005d5e <__multiply+0x9e>
 8005d44:	2e00      	cmp	r6, #0
 8005d46:	dd03      	ble.n	8005d50 <__multiply+0x90>
 8005d48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d05a      	beq.n	8005e06 <__multiply+0x146>
 8005d50:	6106      	str	r6, [r0, #16]
 8005d52:	b005      	add	sp, #20
 8005d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d58:	f843 2b04 	str.w	r2, [r3], #4
 8005d5c:	e7d8      	b.n	8005d10 <__multiply+0x50>
 8005d5e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005d62:	f1ba 0f00 	cmp.w	sl, #0
 8005d66:	d023      	beq.n	8005db0 <__multiply+0xf0>
 8005d68:	f104 0e14 	add.w	lr, r4, #20
 8005d6c:	46a9      	mov	r9, r5
 8005d6e:	f04f 0c00 	mov.w	ip, #0
 8005d72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005d76:	f8d9 3000 	ldr.w	r3, [r9]
 8005d7a:	fa1f fb87 	uxth.w	fp, r7
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	fb0a 330b 	mla	r3, sl, fp, r3
 8005d84:	4463      	add	r3, ip
 8005d86:	f8d9 c000 	ldr.w	ip, [r9]
 8005d8a:	0c3f      	lsrs	r7, r7, #16
 8005d8c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d90:	fb0a c707 	mla	r7, sl, r7, ip
 8005d94:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d9e:	4572      	cmp	r2, lr
 8005da0:	f849 3b04 	str.w	r3, [r9], #4
 8005da4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005da8:	d8e3      	bhi.n	8005d72 <__multiply+0xb2>
 8005daa:	9b01      	ldr	r3, [sp, #4]
 8005dac:	f845 c003 	str.w	ip, [r5, r3]
 8005db0:	9b03      	ldr	r3, [sp, #12]
 8005db2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005db6:	3104      	adds	r1, #4
 8005db8:	f1b9 0f00 	cmp.w	r9, #0
 8005dbc:	d021      	beq.n	8005e02 <__multiply+0x142>
 8005dbe:	682b      	ldr	r3, [r5, #0]
 8005dc0:	f104 0c14 	add.w	ip, r4, #20
 8005dc4:	46ae      	mov	lr, r5
 8005dc6:	f04f 0a00 	mov.w	sl, #0
 8005dca:	f8bc b000 	ldrh.w	fp, [ip]
 8005dce:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005dd2:	fb09 770b 	mla	r7, r9, fp, r7
 8005dd6:	4457      	add	r7, sl
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005dde:	f84e 3b04 	str.w	r3, [lr], #4
 8005de2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005de6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005dea:	f8be 3000 	ldrh.w	r3, [lr]
 8005dee:	fb09 330a 	mla	r3, r9, sl, r3
 8005df2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005df6:	4562      	cmp	r2, ip
 8005df8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005dfc:	d8e5      	bhi.n	8005dca <__multiply+0x10a>
 8005dfe:	9f01      	ldr	r7, [sp, #4]
 8005e00:	51eb      	str	r3, [r5, r7]
 8005e02:	3504      	adds	r5, #4
 8005e04:	e79a      	b.n	8005d3c <__multiply+0x7c>
 8005e06:	3e01      	subs	r6, #1
 8005e08:	e79c      	b.n	8005d44 <__multiply+0x84>
 8005e0a:	bf00      	nop
 8005e0c:	080082f5 	.word	0x080082f5
 8005e10:	08008306 	.word	0x08008306

08005e14 <__pow5mult>:
 8005e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e18:	4615      	mov	r5, r2
 8005e1a:	f012 0203 	ands.w	r2, r2, #3
 8005e1e:	4607      	mov	r7, r0
 8005e20:	460e      	mov	r6, r1
 8005e22:	d007      	beq.n	8005e34 <__pow5mult+0x20>
 8005e24:	4c25      	ldr	r4, [pc, #148]	@ (8005ebc <__pow5mult+0xa8>)
 8005e26:	3a01      	subs	r2, #1
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e2e:	f7ff fe55 	bl	8005adc <__multadd>
 8005e32:	4606      	mov	r6, r0
 8005e34:	10ad      	asrs	r5, r5, #2
 8005e36:	d03d      	beq.n	8005eb4 <__pow5mult+0xa0>
 8005e38:	69fc      	ldr	r4, [r7, #28]
 8005e3a:	b97c      	cbnz	r4, 8005e5c <__pow5mult+0x48>
 8005e3c:	2010      	movs	r0, #16
 8005e3e:	f7ff fd35 	bl	80058ac <malloc>
 8005e42:	4602      	mov	r2, r0
 8005e44:	61f8      	str	r0, [r7, #28]
 8005e46:	b928      	cbnz	r0, 8005e54 <__pow5mult+0x40>
 8005e48:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec0 <__pow5mult+0xac>)
 8005e4a:	481e      	ldr	r0, [pc, #120]	@ (8005ec4 <__pow5mult+0xb0>)
 8005e4c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005e50:	f001 fb54 	bl	80074fc <__assert_func>
 8005e54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e58:	6004      	str	r4, [r0, #0]
 8005e5a:	60c4      	str	r4, [r0, #12]
 8005e5c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005e60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e64:	b94c      	cbnz	r4, 8005e7a <__pow5mult+0x66>
 8005e66:	f240 2171 	movw	r1, #625	@ 0x271
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	f7ff ff12 	bl	8005c94 <__i2b>
 8005e70:	2300      	movs	r3, #0
 8005e72:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e76:	4604      	mov	r4, r0
 8005e78:	6003      	str	r3, [r0, #0]
 8005e7a:	f04f 0900 	mov.w	r9, #0
 8005e7e:	07eb      	lsls	r3, r5, #31
 8005e80:	d50a      	bpl.n	8005e98 <__pow5mult+0x84>
 8005e82:	4631      	mov	r1, r6
 8005e84:	4622      	mov	r2, r4
 8005e86:	4638      	mov	r0, r7
 8005e88:	f7ff ff1a 	bl	8005cc0 <__multiply>
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4680      	mov	r8, r0
 8005e90:	4638      	mov	r0, r7
 8005e92:	f7ff fe01 	bl	8005a98 <_Bfree>
 8005e96:	4646      	mov	r6, r8
 8005e98:	106d      	asrs	r5, r5, #1
 8005e9a:	d00b      	beq.n	8005eb4 <__pow5mult+0xa0>
 8005e9c:	6820      	ldr	r0, [r4, #0]
 8005e9e:	b938      	cbnz	r0, 8005eb0 <__pow5mult+0x9c>
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	f7ff ff0b 	bl	8005cc0 <__multiply>
 8005eaa:	6020      	str	r0, [r4, #0]
 8005eac:	f8c0 9000 	str.w	r9, [r0]
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	e7e4      	b.n	8005e7e <__pow5mult+0x6a>
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eba:	bf00      	nop
 8005ebc:	08008360 	.word	0x08008360
 8005ec0:	08008286 	.word	0x08008286
 8005ec4:	08008306 	.word	0x08008306

08005ec8 <__lshift>:
 8005ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ecc:	460c      	mov	r4, r1
 8005ece:	6849      	ldr	r1, [r1, #4]
 8005ed0:	6923      	ldr	r3, [r4, #16]
 8005ed2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ed6:	68a3      	ldr	r3, [r4, #8]
 8005ed8:	4607      	mov	r7, r0
 8005eda:	4691      	mov	r9, r2
 8005edc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ee0:	f108 0601 	add.w	r6, r8, #1
 8005ee4:	42b3      	cmp	r3, r6
 8005ee6:	db0b      	blt.n	8005f00 <__lshift+0x38>
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f7ff fd95 	bl	8005a18 <_Balloc>
 8005eee:	4605      	mov	r5, r0
 8005ef0:	b948      	cbnz	r0, 8005f06 <__lshift+0x3e>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	4b28      	ldr	r3, [pc, #160]	@ (8005f98 <__lshift+0xd0>)
 8005ef6:	4829      	ldr	r0, [pc, #164]	@ (8005f9c <__lshift+0xd4>)
 8005ef8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005efc:	f001 fafe 	bl	80074fc <__assert_func>
 8005f00:	3101      	adds	r1, #1
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	e7ee      	b.n	8005ee4 <__lshift+0x1c>
 8005f06:	2300      	movs	r3, #0
 8005f08:	f100 0114 	add.w	r1, r0, #20
 8005f0c:	f100 0210 	add.w	r2, r0, #16
 8005f10:	4618      	mov	r0, r3
 8005f12:	4553      	cmp	r3, sl
 8005f14:	db33      	blt.n	8005f7e <__lshift+0xb6>
 8005f16:	6920      	ldr	r0, [r4, #16]
 8005f18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f1c:	f104 0314 	add.w	r3, r4, #20
 8005f20:	f019 091f 	ands.w	r9, r9, #31
 8005f24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f2c:	d02b      	beq.n	8005f86 <__lshift+0xbe>
 8005f2e:	f1c9 0e20 	rsb	lr, r9, #32
 8005f32:	468a      	mov	sl, r1
 8005f34:	2200      	movs	r2, #0
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	fa00 f009 	lsl.w	r0, r0, r9
 8005f3c:	4310      	orrs	r0, r2
 8005f3e:	f84a 0b04 	str.w	r0, [sl], #4
 8005f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f46:	459c      	cmp	ip, r3
 8005f48:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f4c:	d8f3      	bhi.n	8005f36 <__lshift+0x6e>
 8005f4e:	ebac 0304 	sub.w	r3, ip, r4
 8005f52:	3b15      	subs	r3, #21
 8005f54:	f023 0303 	bic.w	r3, r3, #3
 8005f58:	3304      	adds	r3, #4
 8005f5a:	f104 0015 	add.w	r0, r4, #21
 8005f5e:	4584      	cmp	ip, r0
 8005f60:	bf38      	it	cc
 8005f62:	2304      	movcc	r3, #4
 8005f64:	50ca      	str	r2, [r1, r3]
 8005f66:	b10a      	cbz	r2, 8005f6c <__lshift+0xa4>
 8005f68:	f108 0602 	add.w	r6, r8, #2
 8005f6c:	3e01      	subs	r6, #1
 8005f6e:	4638      	mov	r0, r7
 8005f70:	612e      	str	r6, [r5, #16]
 8005f72:	4621      	mov	r1, r4
 8005f74:	f7ff fd90 	bl	8005a98 <_Bfree>
 8005f78:	4628      	mov	r0, r5
 8005f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f82:	3301      	adds	r3, #1
 8005f84:	e7c5      	b.n	8005f12 <__lshift+0x4a>
 8005f86:	3904      	subs	r1, #4
 8005f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f90:	459c      	cmp	ip, r3
 8005f92:	d8f9      	bhi.n	8005f88 <__lshift+0xc0>
 8005f94:	e7ea      	b.n	8005f6c <__lshift+0xa4>
 8005f96:	bf00      	nop
 8005f98:	080082f5 	.word	0x080082f5
 8005f9c:	08008306 	.word	0x08008306

08005fa0 <__mcmp>:
 8005fa0:	690a      	ldr	r2, [r1, #16]
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	6900      	ldr	r0, [r0, #16]
 8005fa6:	1a80      	subs	r0, r0, r2
 8005fa8:	b530      	push	{r4, r5, lr}
 8005faa:	d10e      	bne.n	8005fca <__mcmp+0x2a>
 8005fac:	3314      	adds	r3, #20
 8005fae:	3114      	adds	r1, #20
 8005fb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005fb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005fb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005fbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005fc0:	4295      	cmp	r5, r2
 8005fc2:	d003      	beq.n	8005fcc <__mcmp+0x2c>
 8005fc4:	d205      	bcs.n	8005fd2 <__mcmp+0x32>
 8005fc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fca:	bd30      	pop	{r4, r5, pc}
 8005fcc:	42a3      	cmp	r3, r4
 8005fce:	d3f3      	bcc.n	8005fb8 <__mcmp+0x18>
 8005fd0:	e7fb      	b.n	8005fca <__mcmp+0x2a>
 8005fd2:	2001      	movs	r0, #1
 8005fd4:	e7f9      	b.n	8005fca <__mcmp+0x2a>
	...

08005fd8 <__mdiff>:
 8005fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	4689      	mov	r9, r1
 8005fde:	4606      	mov	r6, r0
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	4648      	mov	r0, r9
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	f7ff ffdb 	bl	8005fa0 <__mcmp>
 8005fea:	1e05      	subs	r5, r0, #0
 8005fec:	d112      	bne.n	8006014 <__mdiff+0x3c>
 8005fee:	4629      	mov	r1, r5
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f7ff fd11 	bl	8005a18 <_Balloc>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	b928      	cbnz	r0, 8006006 <__mdiff+0x2e>
 8005ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80060f4 <__mdiff+0x11c>)
 8005ffc:	f240 2137 	movw	r1, #567	@ 0x237
 8006000:	483d      	ldr	r0, [pc, #244]	@ (80060f8 <__mdiff+0x120>)
 8006002:	f001 fa7b 	bl	80074fc <__assert_func>
 8006006:	2301      	movs	r3, #1
 8006008:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800600c:	4610      	mov	r0, r2
 800600e:	b003      	add	sp, #12
 8006010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006014:	bfbc      	itt	lt
 8006016:	464b      	movlt	r3, r9
 8006018:	46a1      	movlt	r9, r4
 800601a:	4630      	mov	r0, r6
 800601c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006020:	bfba      	itte	lt
 8006022:	461c      	movlt	r4, r3
 8006024:	2501      	movlt	r5, #1
 8006026:	2500      	movge	r5, #0
 8006028:	f7ff fcf6 	bl	8005a18 <_Balloc>
 800602c:	4602      	mov	r2, r0
 800602e:	b918      	cbnz	r0, 8006038 <__mdiff+0x60>
 8006030:	4b30      	ldr	r3, [pc, #192]	@ (80060f4 <__mdiff+0x11c>)
 8006032:	f240 2145 	movw	r1, #581	@ 0x245
 8006036:	e7e3      	b.n	8006000 <__mdiff+0x28>
 8006038:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800603c:	6926      	ldr	r6, [r4, #16]
 800603e:	60c5      	str	r5, [r0, #12]
 8006040:	f109 0310 	add.w	r3, r9, #16
 8006044:	f109 0514 	add.w	r5, r9, #20
 8006048:	f104 0e14 	add.w	lr, r4, #20
 800604c:	f100 0b14 	add.w	fp, r0, #20
 8006050:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006054:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006058:	9301      	str	r3, [sp, #4]
 800605a:	46d9      	mov	r9, fp
 800605c:	f04f 0c00 	mov.w	ip, #0
 8006060:	9b01      	ldr	r3, [sp, #4]
 8006062:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006066:	f853 af04 	ldr.w	sl, [r3, #4]!
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	b281      	uxth	r1, r0
 800606e:	fa1f f38a 	uxth.w	r3, sl
 8006072:	1a5b      	subs	r3, r3, r1
 8006074:	0c00      	lsrs	r0, r0, #16
 8006076:	4463      	add	r3, ip
 8006078:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800607c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006080:	b29b      	uxth	r3, r3
 8006082:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006086:	4576      	cmp	r6, lr
 8006088:	f849 3b04 	str.w	r3, [r9], #4
 800608c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006090:	d8e6      	bhi.n	8006060 <__mdiff+0x88>
 8006092:	1b33      	subs	r3, r6, r4
 8006094:	3b15      	subs	r3, #21
 8006096:	f023 0303 	bic.w	r3, r3, #3
 800609a:	3415      	adds	r4, #21
 800609c:	3304      	adds	r3, #4
 800609e:	42a6      	cmp	r6, r4
 80060a0:	bf38      	it	cc
 80060a2:	2304      	movcc	r3, #4
 80060a4:	441d      	add	r5, r3
 80060a6:	445b      	add	r3, fp
 80060a8:	461e      	mov	r6, r3
 80060aa:	462c      	mov	r4, r5
 80060ac:	4544      	cmp	r4, r8
 80060ae:	d30e      	bcc.n	80060ce <__mdiff+0xf6>
 80060b0:	f108 0103 	add.w	r1, r8, #3
 80060b4:	1b49      	subs	r1, r1, r5
 80060b6:	f021 0103 	bic.w	r1, r1, #3
 80060ba:	3d03      	subs	r5, #3
 80060bc:	45a8      	cmp	r8, r5
 80060be:	bf38      	it	cc
 80060c0:	2100      	movcc	r1, #0
 80060c2:	440b      	add	r3, r1
 80060c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80060c8:	b191      	cbz	r1, 80060f0 <__mdiff+0x118>
 80060ca:	6117      	str	r7, [r2, #16]
 80060cc:	e79e      	b.n	800600c <__mdiff+0x34>
 80060ce:	f854 1b04 	ldr.w	r1, [r4], #4
 80060d2:	46e6      	mov	lr, ip
 80060d4:	0c08      	lsrs	r0, r1, #16
 80060d6:	fa1c fc81 	uxtah	ip, ip, r1
 80060da:	4471      	add	r1, lr
 80060dc:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80060e0:	b289      	uxth	r1, r1
 80060e2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80060e6:	f846 1b04 	str.w	r1, [r6], #4
 80060ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80060ee:	e7dd      	b.n	80060ac <__mdiff+0xd4>
 80060f0:	3f01      	subs	r7, #1
 80060f2:	e7e7      	b.n	80060c4 <__mdiff+0xec>
 80060f4:	080082f5 	.word	0x080082f5
 80060f8:	08008306 	.word	0x08008306

080060fc <__ulp>:
 80060fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006138 <__ulp+0x3c>)
 80060fe:	400b      	ands	r3, r1
 8006100:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006104:	2b00      	cmp	r3, #0
 8006106:	dc08      	bgt.n	800611a <__ulp+0x1e>
 8006108:	425b      	negs	r3, r3
 800610a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800610e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006112:	da04      	bge.n	800611e <__ulp+0x22>
 8006114:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006118:	4113      	asrs	r3, r2
 800611a:	2200      	movs	r2, #0
 800611c:	e008      	b.n	8006130 <__ulp+0x34>
 800611e:	f1a2 0314 	sub.w	r3, r2, #20
 8006122:	2b1e      	cmp	r3, #30
 8006124:	bfda      	itte	le
 8006126:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800612a:	40da      	lsrle	r2, r3
 800612c:	2201      	movgt	r2, #1
 800612e:	2300      	movs	r3, #0
 8006130:	4619      	mov	r1, r3
 8006132:	4610      	mov	r0, r2
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	7ff00000 	.word	0x7ff00000

0800613c <__b2d>:
 800613c:	6902      	ldr	r2, [r0, #16]
 800613e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006140:	f100 0614 	add.w	r6, r0, #20
 8006144:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006148:	4f20      	ldr	r7, [pc, #128]	@ (80061cc <__b2d+0x90>)
 800614a:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800614e:	4620      	mov	r0, r4
 8006150:	f7ff fd54 	bl	8005bfc <__hi0bits>
 8006154:	4603      	mov	r3, r0
 8006156:	2b0a      	cmp	r3, #10
 8006158:	f1c0 0020 	rsb	r0, r0, #32
 800615c:	f1a2 0504 	sub.w	r5, r2, #4
 8006160:	6008      	str	r0, [r1, #0]
 8006162:	dc13      	bgt.n	800618c <__b2d+0x50>
 8006164:	42ae      	cmp	r6, r5
 8006166:	bf38      	it	cc
 8006168:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800616c:	f1c3 0c0b 	rsb	ip, r3, #11
 8006170:	bf28      	it	cs
 8006172:	2200      	movcs	r2, #0
 8006174:	3315      	adds	r3, #21
 8006176:	fa24 fe0c 	lsr.w	lr, r4, ip
 800617a:	fa04 f303 	lsl.w	r3, r4, r3
 800617e:	fa22 f20c 	lsr.w	r2, r2, ip
 8006182:	ea4e 0107 	orr.w	r1, lr, r7
 8006186:	431a      	orrs	r2, r3
 8006188:	4610      	mov	r0, r2
 800618a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800618c:	42ae      	cmp	r6, r5
 800618e:	bf36      	itet	cc
 8006190:	f1a2 0508 	subcc.w	r5, r2, #8
 8006194:	2200      	movcs	r2, #0
 8006196:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800619a:	3b0b      	subs	r3, #11
 800619c:	d012      	beq.n	80061c4 <__b2d+0x88>
 800619e:	f1c3 0720 	rsb	r7, r3, #32
 80061a2:	fa22 f107 	lsr.w	r1, r2, r7
 80061a6:	409c      	lsls	r4, r3
 80061a8:	430c      	orrs	r4, r1
 80061aa:	42b5      	cmp	r5, r6
 80061ac:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80061b0:	bf8c      	ite	hi
 80061b2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80061b6:	2400      	movls	r4, #0
 80061b8:	409a      	lsls	r2, r3
 80061ba:	40fc      	lsrs	r4, r7
 80061bc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80061c0:	4322      	orrs	r2, r4
 80061c2:	e7e1      	b.n	8006188 <__b2d+0x4c>
 80061c4:	ea44 0107 	orr.w	r1, r4, r7
 80061c8:	e7de      	b.n	8006188 <__b2d+0x4c>
 80061ca:	bf00      	nop
 80061cc:	3ff00000 	.word	0x3ff00000

080061d0 <__d2b>:
 80061d0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80061d4:	2101      	movs	r1, #1
 80061d6:	9e08      	ldr	r6, [sp, #32]
 80061d8:	4690      	mov	r8, r2
 80061da:	4699      	mov	r9, r3
 80061dc:	f7ff fc1c 	bl	8005a18 <_Balloc>
 80061e0:	4604      	mov	r4, r0
 80061e2:	b930      	cbnz	r0, 80061f2 <__d2b+0x22>
 80061e4:	4602      	mov	r2, r0
 80061e6:	4b24      	ldr	r3, [pc, #144]	@ (8006278 <__d2b+0xa8>)
 80061e8:	4824      	ldr	r0, [pc, #144]	@ (800627c <__d2b+0xac>)
 80061ea:	f240 310f 	movw	r1, #783	@ 0x30f
 80061ee:	f001 f985 	bl	80074fc <__assert_func>
 80061f2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80061f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061fa:	b10d      	cbz	r5, 8006200 <__d2b+0x30>
 80061fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	f1b8 0300 	subs.w	r3, r8, #0
 8006206:	d024      	beq.n	8006252 <__d2b+0x82>
 8006208:	4668      	mov	r0, sp
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	f7ff fd15 	bl	8005c3a <__lo0bits>
 8006210:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006214:	b1d8      	cbz	r0, 800624e <__d2b+0x7e>
 8006216:	f1c0 0320 	rsb	r3, r0, #32
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	430b      	orrs	r3, r1
 8006220:	40c2      	lsrs	r2, r0
 8006222:	6163      	str	r3, [r4, #20]
 8006224:	9201      	str	r2, [sp, #4]
 8006226:	9b01      	ldr	r3, [sp, #4]
 8006228:	61a3      	str	r3, [r4, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	bf0c      	ite	eq
 800622e:	2201      	moveq	r2, #1
 8006230:	2202      	movne	r2, #2
 8006232:	6122      	str	r2, [r4, #16]
 8006234:	b1ad      	cbz	r5, 8006262 <__d2b+0x92>
 8006236:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800623a:	4405      	add	r5, r0
 800623c:	6035      	str	r5, [r6, #0]
 800623e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006244:	6018      	str	r0, [r3, #0]
 8006246:	4620      	mov	r0, r4
 8006248:	b002      	add	sp, #8
 800624a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800624e:	6161      	str	r1, [r4, #20]
 8006250:	e7e9      	b.n	8006226 <__d2b+0x56>
 8006252:	a801      	add	r0, sp, #4
 8006254:	f7ff fcf1 	bl	8005c3a <__lo0bits>
 8006258:	9b01      	ldr	r3, [sp, #4]
 800625a:	6163      	str	r3, [r4, #20]
 800625c:	3020      	adds	r0, #32
 800625e:	2201      	movs	r2, #1
 8006260:	e7e7      	b.n	8006232 <__d2b+0x62>
 8006262:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006266:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800626a:	6030      	str	r0, [r6, #0]
 800626c:	6918      	ldr	r0, [r3, #16]
 800626e:	f7ff fcc5 	bl	8005bfc <__hi0bits>
 8006272:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006276:	e7e4      	b.n	8006242 <__d2b+0x72>
 8006278:	080082f5 	.word	0x080082f5
 800627c:	08008306 	.word	0x08008306

08006280 <__ratio>:
 8006280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	b085      	sub	sp, #20
 8006286:	e9cd 1000 	strd	r1, r0, [sp]
 800628a:	a902      	add	r1, sp, #8
 800628c:	f7ff ff56 	bl	800613c <__b2d>
 8006290:	468b      	mov	fp, r1
 8006292:	4606      	mov	r6, r0
 8006294:	460f      	mov	r7, r1
 8006296:	9800      	ldr	r0, [sp, #0]
 8006298:	a903      	add	r1, sp, #12
 800629a:	f7ff ff4f 	bl	800613c <__b2d>
 800629e:	9b01      	ldr	r3, [sp, #4]
 80062a0:	4689      	mov	r9, r1
 80062a2:	460d      	mov	r5, r1
 80062a4:	6919      	ldr	r1, [r3, #16]
 80062a6:	9b00      	ldr	r3, [sp, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	1ac9      	subs	r1, r1, r3
 80062ac:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80062b0:	1a9b      	subs	r3, r3, r2
 80062b2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bfcd      	iteet	gt
 80062ba:	463a      	movgt	r2, r7
 80062bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80062c0:	462a      	movle	r2, r5
 80062c2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80062c6:	bfd8      	it	le
 80062c8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80062cc:	4604      	mov	r4, r0
 80062ce:	4622      	mov	r2, r4
 80062d0:	464b      	mov	r3, r9
 80062d2:	4630      	mov	r0, r6
 80062d4:	4659      	mov	r1, fp
 80062d6:	f7fa fab9 	bl	800084c <__aeabi_ddiv>
 80062da:	b005      	add	sp, #20
 80062dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080062e0 <__copybits>:
 80062e0:	3901      	subs	r1, #1
 80062e2:	b570      	push	{r4, r5, r6, lr}
 80062e4:	1149      	asrs	r1, r1, #5
 80062e6:	6914      	ldr	r4, [r2, #16]
 80062e8:	3101      	adds	r1, #1
 80062ea:	f102 0314 	add.w	r3, r2, #20
 80062ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80062f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80062f6:	1f05      	subs	r5, r0, #4
 80062f8:	42a3      	cmp	r3, r4
 80062fa:	d30c      	bcc.n	8006316 <__copybits+0x36>
 80062fc:	1aa3      	subs	r3, r4, r2
 80062fe:	3b11      	subs	r3, #17
 8006300:	f023 0303 	bic.w	r3, r3, #3
 8006304:	3211      	adds	r2, #17
 8006306:	42a2      	cmp	r2, r4
 8006308:	bf88      	it	hi
 800630a:	2300      	movhi	r3, #0
 800630c:	4418      	add	r0, r3
 800630e:	2300      	movs	r3, #0
 8006310:	4288      	cmp	r0, r1
 8006312:	d305      	bcc.n	8006320 <__copybits+0x40>
 8006314:	bd70      	pop	{r4, r5, r6, pc}
 8006316:	f853 6b04 	ldr.w	r6, [r3], #4
 800631a:	f845 6f04 	str.w	r6, [r5, #4]!
 800631e:	e7eb      	b.n	80062f8 <__copybits+0x18>
 8006320:	f840 3b04 	str.w	r3, [r0], #4
 8006324:	e7f4      	b.n	8006310 <__copybits+0x30>

08006326 <__any_on>:
 8006326:	f100 0214 	add.w	r2, r0, #20
 800632a:	6900      	ldr	r0, [r0, #16]
 800632c:	114b      	asrs	r3, r1, #5
 800632e:	4298      	cmp	r0, r3
 8006330:	b510      	push	{r4, lr}
 8006332:	db11      	blt.n	8006358 <__any_on+0x32>
 8006334:	dd0a      	ble.n	800634c <__any_on+0x26>
 8006336:	f011 011f 	ands.w	r1, r1, #31
 800633a:	d007      	beq.n	800634c <__any_on+0x26>
 800633c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006340:	fa24 f001 	lsr.w	r0, r4, r1
 8006344:	fa00 f101 	lsl.w	r1, r0, r1
 8006348:	428c      	cmp	r4, r1
 800634a:	d10b      	bne.n	8006364 <__any_on+0x3e>
 800634c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006350:	4293      	cmp	r3, r2
 8006352:	d803      	bhi.n	800635c <__any_on+0x36>
 8006354:	2000      	movs	r0, #0
 8006356:	bd10      	pop	{r4, pc}
 8006358:	4603      	mov	r3, r0
 800635a:	e7f7      	b.n	800634c <__any_on+0x26>
 800635c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006360:	2900      	cmp	r1, #0
 8006362:	d0f5      	beq.n	8006350 <__any_on+0x2a>
 8006364:	2001      	movs	r0, #1
 8006366:	e7f6      	b.n	8006356 <__any_on+0x30>

08006368 <sulp>:
 8006368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800636c:	460f      	mov	r7, r1
 800636e:	4690      	mov	r8, r2
 8006370:	f7ff fec4 	bl	80060fc <__ulp>
 8006374:	4604      	mov	r4, r0
 8006376:	460d      	mov	r5, r1
 8006378:	f1b8 0f00 	cmp.w	r8, #0
 800637c:	d011      	beq.n	80063a2 <sulp+0x3a>
 800637e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006382:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006386:	2b00      	cmp	r3, #0
 8006388:	dd0b      	ble.n	80063a2 <sulp+0x3a>
 800638a:	051b      	lsls	r3, r3, #20
 800638c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006390:	2400      	movs	r4, #0
 8006392:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006396:	4622      	mov	r2, r4
 8006398:	462b      	mov	r3, r5
 800639a:	f7fa f92d 	bl	80005f8 <__aeabi_dmul>
 800639e:	4604      	mov	r4, r0
 80063a0:	460d      	mov	r5, r1
 80063a2:	4620      	mov	r0, r4
 80063a4:	4629      	mov	r1, r5
 80063a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063aa:	0000      	movs	r0, r0
 80063ac:	0000      	movs	r0, r0
	...

080063b0 <_strtod_l>:
 80063b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b4:	b09f      	sub	sp, #124	@ 0x7c
 80063b6:	460c      	mov	r4, r1
 80063b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80063ba:	2200      	movs	r2, #0
 80063bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80063be:	9005      	str	r0, [sp, #20]
 80063c0:	f04f 0a00 	mov.w	sl, #0
 80063c4:	f04f 0b00 	mov.w	fp, #0
 80063c8:	460a      	mov	r2, r1
 80063ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80063cc:	7811      	ldrb	r1, [r2, #0]
 80063ce:	292b      	cmp	r1, #43	@ 0x2b
 80063d0:	d048      	beq.n	8006464 <_strtod_l+0xb4>
 80063d2:	d836      	bhi.n	8006442 <_strtod_l+0x92>
 80063d4:	290d      	cmp	r1, #13
 80063d6:	d830      	bhi.n	800643a <_strtod_l+0x8a>
 80063d8:	2908      	cmp	r1, #8
 80063da:	d830      	bhi.n	800643e <_strtod_l+0x8e>
 80063dc:	2900      	cmp	r1, #0
 80063de:	d039      	beq.n	8006454 <_strtod_l+0xa4>
 80063e0:	2200      	movs	r2, #0
 80063e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80063e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80063e6:	782a      	ldrb	r2, [r5, #0]
 80063e8:	2a30      	cmp	r2, #48	@ 0x30
 80063ea:	f040 80b1 	bne.w	8006550 <_strtod_l+0x1a0>
 80063ee:	786a      	ldrb	r2, [r5, #1]
 80063f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80063f4:	2a58      	cmp	r2, #88	@ 0x58
 80063f6:	d16c      	bne.n	80064d2 <_strtod_l+0x122>
 80063f8:	9302      	str	r3, [sp, #8]
 80063fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	4a8d      	ldr	r2, [pc, #564]	@ (8006638 <_strtod_l+0x288>)
 8006404:	9805      	ldr	r0, [sp, #20]
 8006406:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006408:	a919      	add	r1, sp, #100	@ 0x64
 800640a:	f001 f911 	bl	8007630 <__gethex>
 800640e:	f010 060f 	ands.w	r6, r0, #15
 8006412:	4604      	mov	r4, r0
 8006414:	d005      	beq.n	8006422 <_strtod_l+0x72>
 8006416:	2e06      	cmp	r6, #6
 8006418:	d126      	bne.n	8006468 <_strtod_l+0xb8>
 800641a:	3501      	adds	r5, #1
 800641c:	2300      	movs	r3, #0
 800641e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006420:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006422:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006424:	2b00      	cmp	r3, #0
 8006426:	f040 857e 	bne.w	8006f26 <_strtod_l+0xb76>
 800642a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800642c:	b1bb      	cbz	r3, 800645e <_strtod_l+0xae>
 800642e:	4650      	mov	r0, sl
 8006430:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006434:	b01f      	add	sp, #124	@ 0x7c
 8006436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643a:	2920      	cmp	r1, #32
 800643c:	d1d0      	bne.n	80063e0 <_strtod_l+0x30>
 800643e:	3201      	adds	r2, #1
 8006440:	e7c3      	b.n	80063ca <_strtod_l+0x1a>
 8006442:	292d      	cmp	r1, #45	@ 0x2d
 8006444:	d1cc      	bne.n	80063e0 <_strtod_l+0x30>
 8006446:	2101      	movs	r1, #1
 8006448:	910b      	str	r1, [sp, #44]	@ 0x2c
 800644a:	1c51      	adds	r1, r2, #1
 800644c:	9119      	str	r1, [sp, #100]	@ 0x64
 800644e:	7852      	ldrb	r2, [r2, #1]
 8006450:	2a00      	cmp	r2, #0
 8006452:	d1c7      	bne.n	80063e4 <_strtod_l+0x34>
 8006454:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006456:	9419      	str	r4, [sp, #100]	@ 0x64
 8006458:	2b00      	cmp	r3, #0
 800645a:	f040 8562 	bne.w	8006f22 <_strtod_l+0xb72>
 800645e:	4650      	mov	r0, sl
 8006460:	4659      	mov	r1, fp
 8006462:	e7e7      	b.n	8006434 <_strtod_l+0x84>
 8006464:	2100      	movs	r1, #0
 8006466:	e7ef      	b.n	8006448 <_strtod_l+0x98>
 8006468:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800646a:	b13a      	cbz	r2, 800647c <_strtod_l+0xcc>
 800646c:	2135      	movs	r1, #53	@ 0x35
 800646e:	a81c      	add	r0, sp, #112	@ 0x70
 8006470:	f7ff ff36 	bl	80062e0 <__copybits>
 8006474:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006476:	9805      	ldr	r0, [sp, #20]
 8006478:	f7ff fb0e 	bl	8005a98 <_Bfree>
 800647c:	3e01      	subs	r6, #1
 800647e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006480:	2e04      	cmp	r6, #4
 8006482:	d806      	bhi.n	8006492 <_strtod_l+0xe2>
 8006484:	e8df f006 	tbb	[pc, r6]
 8006488:	201d0314 	.word	0x201d0314
 800648c:	14          	.byte	0x14
 800648d:	00          	.byte	0x00
 800648e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006492:	05e1      	lsls	r1, r4, #23
 8006494:	bf48      	it	mi
 8006496:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800649a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800649e:	0d1b      	lsrs	r3, r3, #20
 80064a0:	051b      	lsls	r3, r3, #20
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1bd      	bne.n	8006422 <_strtod_l+0x72>
 80064a6:	f7fe fb33 	bl	8004b10 <__errno>
 80064aa:	2322      	movs	r3, #34	@ 0x22
 80064ac:	6003      	str	r3, [r0, #0]
 80064ae:	e7b8      	b.n	8006422 <_strtod_l+0x72>
 80064b0:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80064b4:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80064b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80064bc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80064c0:	e7e7      	b.n	8006492 <_strtod_l+0xe2>
 80064c2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800663c <_strtod_l+0x28c>
 80064c6:	e7e4      	b.n	8006492 <_strtod_l+0xe2>
 80064c8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80064cc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80064d0:	e7df      	b.n	8006492 <_strtod_l+0xe2>
 80064d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	9219      	str	r2, [sp, #100]	@ 0x64
 80064d8:	785b      	ldrb	r3, [r3, #1]
 80064da:	2b30      	cmp	r3, #48	@ 0x30
 80064dc:	d0f9      	beq.n	80064d2 <_strtod_l+0x122>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d09f      	beq.n	8006422 <_strtod_l+0x72>
 80064e2:	2301      	movs	r3, #1
 80064e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80064e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80064ea:	2300      	movs	r3, #0
 80064ec:	9308      	str	r3, [sp, #32]
 80064ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80064f0:	461f      	mov	r7, r3
 80064f2:	220a      	movs	r2, #10
 80064f4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80064f6:	7805      	ldrb	r5, [r0, #0]
 80064f8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80064fc:	b2d9      	uxtb	r1, r3
 80064fe:	2909      	cmp	r1, #9
 8006500:	d928      	bls.n	8006554 <_strtod_l+0x1a4>
 8006502:	494f      	ldr	r1, [pc, #316]	@ (8006640 <_strtod_l+0x290>)
 8006504:	2201      	movs	r2, #1
 8006506:	f000 ffc3 	bl	8007490 <strncmp>
 800650a:	2800      	cmp	r0, #0
 800650c:	d032      	beq.n	8006574 <_strtod_l+0x1c4>
 800650e:	2000      	movs	r0, #0
 8006510:	462a      	mov	r2, r5
 8006512:	4681      	mov	r9, r0
 8006514:	463d      	mov	r5, r7
 8006516:	4603      	mov	r3, r0
 8006518:	2a65      	cmp	r2, #101	@ 0x65
 800651a:	d001      	beq.n	8006520 <_strtod_l+0x170>
 800651c:	2a45      	cmp	r2, #69	@ 0x45
 800651e:	d114      	bne.n	800654a <_strtod_l+0x19a>
 8006520:	b91d      	cbnz	r5, 800652a <_strtod_l+0x17a>
 8006522:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006524:	4302      	orrs	r2, r0
 8006526:	d095      	beq.n	8006454 <_strtod_l+0xa4>
 8006528:	2500      	movs	r5, #0
 800652a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800652c:	1c62      	adds	r2, r4, #1
 800652e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006530:	7862      	ldrb	r2, [r4, #1]
 8006532:	2a2b      	cmp	r2, #43	@ 0x2b
 8006534:	d077      	beq.n	8006626 <_strtod_l+0x276>
 8006536:	2a2d      	cmp	r2, #45	@ 0x2d
 8006538:	d07b      	beq.n	8006632 <_strtod_l+0x282>
 800653a:	f04f 0c00 	mov.w	ip, #0
 800653e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006542:	2909      	cmp	r1, #9
 8006544:	f240 8082 	bls.w	800664c <_strtod_l+0x29c>
 8006548:	9419      	str	r4, [sp, #100]	@ 0x64
 800654a:	f04f 0800 	mov.w	r8, #0
 800654e:	e0a2      	b.n	8006696 <_strtod_l+0x2e6>
 8006550:	2300      	movs	r3, #0
 8006552:	e7c7      	b.n	80064e4 <_strtod_l+0x134>
 8006554:	2f08      	cmp	r7, #8
 8006556:	bfd5      	itete	le
 8006558:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800655a:	9908      	ldrgt	r1, [sp, #32]
 800655c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006560:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006564:	f100 0001 	add.w	r0, r0, #1
 8006568:	bfd4      	ite	le
 800656a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800656c:	9308      	strgt	r3, [sp, #32]
 800656e:	3701      	adds	r7, #1
 8006570:	9019      	str	r0, [sp, #100]	@ 0x64
 8006572:	e7bf      	b.n	80064f4 <_strtod_l+0x144>
 8006574:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	9219      	str	r2, [sp, #100]	@ 0x64
 800657a:	785a      	ldrb	r2, [r3, #1]
 800657c:	b37f      	cbz	r7, 80065de <_strtod_l+0x22e>
 800657e:	4681      	mov	r9, r0
 8006580:	463d      	mov	r5, r7
 8006582:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006586:	2b09      	cmp	r3, #9
 8006588:	d912      	bls.n	80065b0 <_strtod_l+0x200>
 800658a:	2301      	movs	r3, #1
 800658c:	e7c4      	b.n	8006518 <_strtod_l+0x168>
 800658e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	9219      	str	r2, [sp, #100]	@ 0x64
 8006594:	785a      	ldrb	r2, [r3, #1]
 8006596:	3001      	adds	r0, #1
 8006598:	2a30      	cmp	r2, #48	@ 0x30
 800659a:	d0f8      	beq.n	800658e <_strtod_l+0x1de>
 800659c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	f200 84c5 	bhi.w	8006f30 <_strtod_l+0xb80>
 80065a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80065aa:	4681      	mov	r9, r0
 80065ac:	2000      	movs	r0, #0
 80065ae:	4605      	mov	r5, r0
 80065b0:	3a30      	subs	r2, #48	@ 0x30
 80065b2:	f100 0301 	add.w	r3, r0, #1
 80065b6:	d02a      	beq.n	800660e <_strtod_l+0x25e>
 80065b8:	4499      	add	r9, r3
 80065ba:	eb00 0c05 	add.w	ip, r0, r5
 80065be:	462b      	mov	r3, r5
 80065c0:	210a      	movs	r1, #10
 80065c2:	4563      	cmp	r3, ip
 80065c4:	d10d      	bne.n	80065e2 <_strtod_l+0x232>
 80065c6:	1c69      	adds	r1, r5, #1
 80065c8:	4401      	add	r1, r0
 80065ca:	4428      	add	r0, r5
 80065cc:	2808      	cmp	r0, #8
 80065ce:	dc16      	bgt.n	80065fe <_strtod_l+0x24e>
 80065d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80065d2:	230a      	movs	r3, #10
 80065d4:	fb03 2300 	mla	r3, r3, r0, r2
 80065d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065da:	2300      	movs	r3, #0
 80065dc:	e018      	b.n	8006610 <_strtod_l+0x260>
 80065de:	4638      	mov	r0, r7
 80065e0:	e7da      	b.n	8006598 <_strtod_l+0x1e8>
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	f103 0301 	add.w	r3, r3, #1
 80065e8:	dc03      	bgt.n	80065f2 <_strtod_l+0x242>
 80065ea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80065ec:	434e      	muls	r6, r1
 80065ee:	960a      	str	r6, [sp, #40]	@ 0x28
 80065f0:	e7e7      	b.n	80065c2 <_strtod_l+0x212>
 80065f2:	2b10      	cmp	r3, #16
 80065f4:	bfde      	ittt	le
 80065f6:	9e08      	ldrle	r6, [sp, #32]
 80065f8:	434e      	mulle	r6, r1
 80065fa:	9608      	strle	r6, [sp, #32]
 80065fc:	e7e1      	b.n	80065c2 <_strtod_l+0x212>
 80065fe:	280f      	cmp	r0, #15
 8006600:	dceb      	bgt.n	80065da <_strtod_l+0x22a>
 8006602:	9808      	ldr	r0, [sp, #32]
 8006604:	230a      	movs	r3, #10
 8006606:	fb03 2300 	mla	r3, r3, r0, r2
 800660a:	9308      	str	r3, [sp, #32]
 800660c:	e7e5      	b.n	80065da <_strtod_l+0x22a>
 800660e:	4629      	mov	r1, r5
 8006610:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006612:	1c50      	adds	r0, r2, #1
 8006614:	9019      	str	r0, [sp, #100]	@ 0x64
 8006616:	7852      	ldrb	r2, [r2, #1]
 8006618:	4618      	mov	r0, r3
 800661a:	460d      	mov	r5, r1
 800661c:	e7b1      	b.n	8006582 <_strtod_l+0x1d2>
 800661e:	f04f 0900 	mov.w	r9, #0
 8006622:	2301      	movs	r3, #1
 8006624:	e77d      	b.n	8006522 <_strtod_l+0x172>
 8006626:	f04f 0c00 	mov.w	ip, #0
 800662a:	1ca2      	adds	r2, r4, #2
 800662c:	9219      	str	r2, [sp, #100]	@ 0x64
 800662e:	78a2      	ldrb	r2, [r4, #2]
 8006630:	e785      	b.n	800653e <_strtod_l+0x18e>
 8006632:	f04f 0c01 	mov.w	ip, #1
 8006636:	e7f8      	b.n	800662a <_strtod_l+0x27a>
 8006638:	08008478 	.word	0x08008478
 800663c:	7ff00000 	.word	0x7ff00000
 8006640:	08008460 	.word	0x08008460
 8006644:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006646:	1c51      	adds	r1, r2, #1
 8006648:	9119      	str	r1, [sp, #100]	@ 0x64
 800664a:	7852      	ldrb	r2, [r2, #1]
 800664c:	2a30      	cmp	r2, #48	@ 0x30
 800664e:	d0f9      	beq.n	8006644 <_strtod_l+0x294>
 8006650:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006654:	2908      	cmp	r1, #8
 8006656:	f63f af78 	bhi.w	800654a <_strtod_l+0x19a>
 800665a:	3a30      	subs	r2, #48	@ 0x30
 800665c:	920e      	str	r2, [sp, #56]	@ 0x38
 800665e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006660:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006662:	f04f 080a 	mov.w	r8, #10
 8006666:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006668:	1c56      	adds	r6, r2, #1
 800666a:	9619      	str	r6, [sp, #100]	@ 0x64
 800666c:	7852      	ldrb	r2, [r2, #1]
 800666e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006672:	f1be 0f09 	cmp.w	lr, #9
 8006676:	d939      	bls.n	80066ec <_strtod_l+0x33c>
 8006678:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800667a:	1a76      	subs	r6, r6, r1
 800667c:	2e08      	cmp	r6, #8
 800667e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006682:	dc03      	bgt.n	800668c <_strtod_l+0x2dc>
 8006684:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006686:	4588      	cmp	r8, r1
 8006688:	bfa8      	it	ge
 800668a:	4688      	movge	r8, r1
 800668c:	f1bc 0f00 	cmp.w	ip, #0
 8006690:	d001      	beq.n	8006696 <_strtod_l+0x2e6>
 8006692:	f1c8 0800 	rsb	r8, r8, #0
 8006696:	2d00      	cmp	r5, #0
 8006698:	d14e      	bne.n	8006738 <_strtod_l+0x388>
 800669a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800669c:	4308      	orrs	r0, r1
 800669e:	f47f aec0 	bne.w	8006422 <_strtod_l+0x72>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f47f aed6 	bne.w	8006454 <_strtod_l+0xa4>
 80066a8:	2a69      	cmp	r2, #105	@ 0x69
 80066aa:	d028      	beq.n	80066fe <_strtod_l+0x34e>
 80066ac:	dc25      	bgt.n	80066fa <_strtod_l+0x34a>
 80066ae:	2a49      	cmp	r2, #73	@ 0x49
 80066b0:	d025      	beq.n	80066fe <_strtod_l+0x34e>
 80066b2:	2a4e      	cmp	r2, #78	@ 0x4e
 80066b4:	f47f aece 	bne.w	8006454 <_strtod_l+0xa4>
 80066b8:	499a      	ldr	r1, [pc, #616]	@ (8006924 <_strtod_l+0x574>)
 80066ba:	a819      	add	r0, sp, #100	@ 0x64
 80066bc:	f001 f9da 	bl	8007a74 <__match>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	f43f aec7 	beq.w	8006454 <_strtod_l+0xa4>
 80066c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b28      	cmp	r3, #40	@ 0x28
 80066cc:	d12e      	bne.n	800672c <_strtod_l+0x37c>
 80066ce:	4996      	ldr	r1, [pc, #600]	@ (8006928 <_strtod_l+0x578>)
 80066d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80066d2:	a819      	add	r0, sp, #100	@ 0x64
 80066d4:	f001 f9e2 	bl	8007a9c <__hexnan>
 80066d8:	2805      	cmp	r0, #5
 80066da:	d127      	bne.n	800672c <_strtod_l+0x37c>
 80066dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80066de:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80066e2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80066e6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80066ea:	e69a      	b.n	8006422 <_strtod_l+0x72>
 80066ec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80066ee:	fb08 2101 	mla	r1, r8, r1, r2
 80066f2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80066f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80066f8:	e7b5      	b.n	8006666 <_strtod_l+0x2b6>
 80066fa:	2a6e      	cmp	r2, #110	@ 0x6e
 80066fc:	e7da      	b.n	80066b4 <_strtod_l+0x304>
 80066fe:	498b      	ldr	r1, [pc, #556]	@ (800692c <_strtod_l+0x57c>)
 8006700:	a819      	add	r0, sp, #100	@ 0x64
 8006702:	f001 f9b7 	bl	8007a74 <__match>
 8006706:	2800      	cmp	r0, #0
 8006708:	f43f aea4 	beq.w	8006454 <_strtod_l+0xa4>
 800670c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800670e:	4988      	ldr	r1, [pc, #544]	@ (8006930 <_strtod_l+0x580>)
 8006710:	3b01      	subs	r3, #1
 8006712:	a819      	add	r0, sp, #100	@ 0x64
 8006714:	9319      	str	r3, [sp, #100]	@ 0x64
 8006716:	f001 f9ad 	bl	8007a74 <__match>
 800671a:	b910      	cbnz	r0, 8006722 <_strtod_l+0x372>
 800671c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800671e:	3301      	adds	r3, #1
 8006720:	9319      	str	r3, [sp, #100]	@ 0x64
 8006722:	f8df b210 	ldr.w	fp, [pc, #528]	@ 8006934 <_strtod_l+0x584>
 8006726:	f04f 0a00 	mov.w	sl, #0
 800672a:	e67a      	b.n	8006422 <_strtod_l+0x72>
 800672c:	4882      	ldr	r0, [pc, #520]	@ (8006938 <_strtod_l+0x588>)
 800672e:	f000 fedf 	bl	80074f0 <nan>
 8006732:	4682      	mov	sl, r0
 8006734:	468b      	mov	fp, r1
 8006736:	e674      	b.n	8006422 <_strtod_l+0x72>
 8006738:	eba8 0309 	sub.w	r3, r8, r9
 800673c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800673e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006740:	2f00      	cmp	r7, #0
 8006742:	bf08      	it	eq
 8006744:	462f      	moveq	r7, r5
 8006746:	2d10      	cmp	r5, #16
 8006748:	462c      	mov	r4, r5
 800674a:	bfa8      	it	ge
 800674c:	2410      	movge	r4, #16
 800674e:	f7f9 fed9 	bl	8000504 <__aeabi_ui2d>
 8006752:	2d09      	cmp	r5, #9
 8006754:	4682      	mov	sl, r0
 8006756:	468b      	mov	fp, r1
 8006758:	dc11      	bgt.n	800677e <_strtod_l+0x3ce>
 800675a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800675c:	2b00      	cmp	r3, #0
 800675e:	f43f ae60 	beq.w	8006422 <_strtod_l+0x72>
 8006762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006764:	dd76      	ble.n	8006854 <_strtod_l+0x4a4>
 8006766:	2b16      	cmp	r3, #22
 8006768:	dc5d      	bgt.n	8006826 <_strtod_l+0x476>
 800676a:	4974      	ldr	r1, [pc, #464]	@ (800693c <_strtod_l+0x58c>)
 800676c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006774:	4652      	mov	r2, sl
 8006776:	465b      	mov	r3, fp
 8006778:	f7f9 ff3e 	bl	80005f8 <__aeabi_dmul>
 800677c:	e7d9      	b.n	8006732 <_strtod_l+0x382>
 800677e:	4b6f      	ldr	r3, [pc, #444]	@ (800693c <_strtod_l+0x58c>)
 8006780:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006784:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006788:	f7f9 ff36 	bl	80005f8 <__aeabi_dmul>
 800678c:	4682      	mov	sl, r0
 800678e:	9808      	ldr	r0, [sp, #32]
 8006790:	468b      	mov	fp, r1
 8006792:	f7f9 feb7 	bl	8000504 <__aeabi_ui2d>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	4650      	mov	r0, sl
 800679c:	4659      	mov	r1, fp
 800679e:	f7f9 fd75 	bl	800028c <__adddf3>
 80067a2:	2d0f      	cmp	r5, #15
 80067a4:	4682      	mov	sl, r0
 80067a6:	468b      	mov	fp, r1
 80067a8:	ddd7      	ble.n	800675a <_strtod_l+0x3aa>
 80067aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ac:	1b2c      	subs	r4, r5, r4
 80067ae:	441c      	add	r4, r3
 80067b0:	2c00      	cmp	r4, #0
 80067b2:	f340 8096 	ble.w	80068e2 <_strtod_l+0x532>
 80067b6:	f014 030f 	ands.w	r3, r4, #15
 80067ba:	d00a      	beq.n	80067d2 <_strtod_l+0x422>
 80067bc:	495f      	ldr	r1, [pc, #380]	@ (800693c <_strtod_l+0x58c>)
 80067be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80067c2:	4652      	mov	r2, sl
 80067c4:	465b      	mov	r3, fp
 80067c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ca:	f7f9 ff15 	bl	80005f8 <__aeabi_dmul>
 80067ce:	4682      	mov	sl, r0
 80067d0:	468b      	mov	fp, r1
 80067d2:	f034 040f 	bics.w	r4, r4, #15
 80067d6:	d073      	beq.n	80068c0 <_strtod_l+0x510>
 80067d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80067dc:	dd48      	ble.n	8006870 <_strtod_l+0x4c0>
 80067de:	2400      	movs	r4, #0
 80067e0:	46a0      	mov	r8, r4
 80067e2:	940a      	str	r4, [sp, #40]	@ 0x28
 80067e4:	46a1      	mov	r9, r4
 80067e6:	9a05      	ldr	r2, [sp, #20]
 80067e8:	f8df b148 	ldr.w	fp, [pc, #328]	@ 8006934 <_strtod_l+0x584>
 80067ec:	2322      	movs	r3, #34	@ 0x22
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	f04f 0a00 	mov.w	sl, #0
 80067f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f43f ae13 	beq.w	8006422 <_strtod_l+0x72>
 80067fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80067fe:	9805      	ldr	r0, [sp, #20]
 8006800:	f7ff f94a 	bl	8005a98 <_Bfree>
 8006804:	9805      	ldr	r0, [sp, #20]
 8006806:	4649      	mov	r1, r9
 8006808:	f7ff f946 	bl	8005a98 <_Bfree>
 800680c:	9805      	ldr	r0, [sp, #20]
 800680e:	4641      	mov	r1, r8
 8006810:	f7ff f942 	bl	8005a98 <_Bfree>
 8006814:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006816:	9805      	ldr	r0, [sp, #20]
 8006818:	f7ff f93e 	bl	8005a98 <_Bfree>
 800681c:	9805      	ldr	r0, [sp, #20]
 800681e:	4621      	mov	r1, r4
 8006820:	f7ff f93a 	bl	8005a98 <_Bfree>
 8006824:	e5fd      	b.n	8006422 <_strtod_l+0x72>
 8006826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006828:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800682c:	4293      	cmp	r3, r2
 800682e:	dbbc      	blt.n	80067aa <_strtod_l+0x3fa>
 8006830:	4c42      	ldr	r4, [pc, #264]	@ (800693c <_strtod_l+0x58c>)
 8006832:	f1c5 050f 	rsb	r5, r5, #15
 8006836:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800683a:	4652      	mov	r2, sl
 800683c:	465b      	mov	r3, fp
 800683e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006842:	f7f9 fed9 	bl	80005f8 <__aeabi_dmul>
 8006846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006848:	1b5d      	subs	r5, r3, r5
 800684a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800684e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006852:	e791      	b.n	8006778 <_strtod_l+0x3c8>
 8006854:	3316      	adds	r3, #22
 8006856:	dba8      	blt.n	80067aa <_strtod_l+0x3fa>
 8006858:	4b38      	ldr	r3, [pc, #224]	@ (800693c <_strtod_l+0x58c>)
 800685a:	eba9 0808 	sub.w	r8, r9, r8
 800685e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006862:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006866:	4650      	mov	r0, sl
 8006868:	4659      	mov	r1, fp
 800686a:	f7f9 ffef 	bl	800084c <__aeabi_ddiv>
 800686e:	e760      	b.n	8006732 <_strtod_l+0x382>
 8006870:	4b33      	ldr	r3, [pc, #204]	@ (8006940 <_strtod_l+0x590>)
 8006872:	9308      	str	r3, [sp, #32]
 8006874:	2300      	movs	r3, #0
 8006876:	1124      	asrs	r4, r4, #4
 8006878:	4650      	mov	r0, sl
 800687a:	4659      	mov	r1, fp
 800687c:	461e      	mov	r6, r3
 800687e:	2c01      	cmp	r4, #1
 8006880:	dc21      	bgt.n	80068c6 <_strtod_l+0x516>
 8006882:	b10b      	cbz	r3, 8006888 <_strtod_l+0x4d8>
 8006884:	4682      	mov	sl, r0
 8006886:	468b      	mov	fp, r1
 8006888:	492d      	ldr	r1, [pc, #180]	@ (8006940 <_strtod_l+0x590>)
 800688a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800688e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006892:	4652      	mov	r2, sl
 8006894:	465b      	mov	r3, fp
 8006896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800689a:	f7f9 fead 	bl	80005f8 <__aeabi_dmul>
 800689e:	4b25      	ldr	r3, [pc, #148]	@ (8006934 <_strtod_l+0x584>)
 80068a0:	460a      	mov	r2, r1
 80068a2:	400b      	ands	r3, r1
 80068a4:	4927      	ldr	r1, [pc, #156]	@ (8006944 <_strtod_l+0x594>)
 80068a6:	428b      	cmp	r3, r1
 80068a8:	4682      	mov	sl, r0
 80068aa:	d898      	bhi.n	80067de <_strtod_l+0x42e>
 80068ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80068b0:	428b      	cmp	r3, r1
 80068b2:	bf86      	itte	hi
 80068b4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006948 <_strtod_l+0x598>
 80068b8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80068bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80068c0:	2300      	movs	r3, #0
 80068c2:	9308      	str	r3, [sp, #32]
 80068c4:	e07a      	b.n	80069bc <_strtod_l+0x60c>
 80068c6:	07e2      	lsls	r2, r4, #31
 80068c8:	d505      	bpl.n	80068d6 <_strtod_l+0x526>
 80068ca:	9b08      	ldr	r3, [sp, #32]
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f7f9 fe92 	bl	80005f8 <__aeabi_dmul>
 80068d4:	2301      	movs	r3, #1
 80068d6:	9a08      	ldr	r2, [sp, #32]
 80068d8:	3208      	adds	r2, #8
 80068da:	3601      	adds	r6, #1
 80068dc:	1064      	asrs	r4, r4, #1
 80068de:	9208      	str	r2, [sp, #32]
 80068e0:	e7cd      	b.n	800687e <_strtod_l+0x4ce>
 80068e2:	d0ed      	beq.n	80068c0 <_strtod_l+0x510>
 80068e4:	4264      	negs	r4, r4
 80068e6:	f014 020f 	ands.w	r2, r4, #15
 80068ea:	d00a      	beq.n	8006902 <_strtod_l+0x552>
 80068ec:	4b13      	ldr	r3, [pc, #76]	@ (800693c <_strtod_l+0x58c>)
 80068ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068f2:	4650      	mov	r0, sl
 80068f4:	4659      	mov	r1, fp
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	f7f9 ffa7 	bl	800084c <__aeabi_ddiv>
 80068fe:	4682      	mov	sl, r0
 8006900:	468b      	mov	fp, r1
 8006902:	1124      	asrs	r4, r4, #4
 8006904:	d0dc      	beq.n	80068c0 <_strtod_l+0x510>
 8006906:	2c1f      	cmp	r4, #31
 8006908:	dd20      	ble.n	800694c <_strtod_l+0x59c>
 800690a:	2400      	movs	r4, #0
 800690c:	46a0      	mov	r8, r4
 800690e:	940a      	str	r4, [sp, #40]	@ 0x28
 8006910:	46a1      	mov	r9, r4
 8006912:	9a05      	ldr	r2, [sp, #20]
 8006914:	2322      	movs	r3, #34	@ 0x22
 8006916:	f04f 0a00 	mov.w	sl, #0
 800691a:	f04f 0b00 	mov.w	fp, #0
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	e768      	b.n	80067f4 <_strtod_l+0x444>
 8006922:	bf00      	nop
 8006924:	0800824d 	.word	0x0800824d
 8006928:	08008464 	.word	0x08008464
 800692c:	08008245 	.word	0x08008245
 8006930:	0800827c 	.word	0x0800827c
 8006934:	7ff00000 	.word	0x7ff00000
 8006938:	0800860d 	.word	0x0800860d
 800693c:	08008398 	.word	0x08008398
 8006940:	08008370 	.word	0x08008370
 8006944:	7ca00000 	.word	0x7ca00000
 8006948:	7fefffff 	.word	0x7fefffff
 800694c:	f014 0310 	ands.w	r3, r4, #16
 8006950:	bf18      	it	ne
 8006952:	236a      	movne	r3, #106	@ 0x6a
 8006954:	4e77      	ldr	r6, [pc, #476]	@ (8006b34 <_strtod_l+0x784>)
 8006956:	9308      	str	r3, [sp, #32]
 8006958:	4650      	mov	r0, sl
 800695a:	4659      	mov	r1, fp
 800695c:	2300      	movs	r3, #0
 800695e:	07e2      	lsls	r2, r4, #31
 8006960:	d504      	bpl.n	800696c <_strtod_l+0x5bc>
 8006962:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006966:	f7f9 fe47 	bl	80005f8 <__aeabi_dmul>
 800696a:	2301      	movs	r3, #1
 800696c:	1064      	asrs	r4, r4, #1
 800696e:	f106 0608 	add.w	r6, r6, #8
 8006972:	d1f4      	bne.n	800695e <_strtod_l+0x5ae>
 8006974:	b10b      	cbz	r3, 800697a <_strtod_l+0x5ca>
 8006976:	4682      	mov	sl, r0
 8006978:	468b      	mov	fp, r1
 800697a:	9b08      	ldr	r3, [sp, #32]
 800697c:	b1b3      	cbz	r3, 80069ac <_strtod_l+0x5fc>
 800697e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006982:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006986:	2b00      	cmp	r3, #0
 8006988:	4659      	mov	r1, fp
 800698a:	dd0f      	ble.n	80069ac <_strtod_l+0x5fc>
 800698c:	2b1f      	cmp	r3, #31
 800698e:	dd57      	ble.n	8006a40 <_strtod_l+0x690>
 8006990:	2b34      	cmp	r3, #52	@ 0x34
 8006992:	bfde      	ittt	le
 8006994:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006998:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800699c:	4093      	lslle	r3, r2
 800699e:	f04f 0a00 	mov.w	sl, #0
 80069a2:	bfcc      	ite	gt
 80069a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80069a8:	ea03 0b01 	andle.w	fp, r3, r1
 80069ac:	2200      	movs	r2, #0
 80069ae:	2300      	movs	r3, #0
 80069b0:	4650      	mov	r0, sl
 80069b2:	4659      	mov	r1, fp
 80069b4:	f7fa f888 	bl	8000ac8 <__aeabi_dcmpeq>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d1a6      	bne.n	800690a <_strtod_l+0x55a>
 80069bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80069c2:	9805      	ldr	r0, [sp, #20]
 80069c4:	462b      	mov	r3, r5
 80069c6:	463a      	mov	r2, r7
 80069c8:	f7ff f8ce 	bl	8005b68 <__s2b>
 80069cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80069ce:	2800      	cmp	r0, #0
 80069d0:	f43f af05 	beq.w	80067de <_strtod_l+0x42e>
 80069d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	eba9 0308 	sub.w	r3, r9, r8
 80069dc:	bfa8      	it	ge
 80069de:	2300      	movge	r3, #0
 80069e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80069e2:	2400      	movs	r4, #0
 80069e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80069e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80069ea:	46a0      	mov	r8, r4
 80069ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069ee:	9805      	ldr	r0, [sp, #20]
 80069f0:	6859      	ldr	r1, [r3, #4]
 80069f2:	f7ff f811 	bl	8005a18 <_Balloc>
 80069f6:	4681      	mov	r9, r0
 80069f8:	2800      	cmp	r0, #0
 80069fa:	f43f aef4 	beq.w	80067e6 <_strtod_l+0x436>
 80069fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a00:	691a      	ldr	r2, [r3, #16]
 8006a02:	3202      	adds	r2, #2
 8006a04:	f103 010c 	add.w	r1, r3, #12
 8006a08:	0092      	lsls	r2, r2, #2
 8006a0a:	300c      	adds	r0, #12
 8006a0c:	f000 fd62 	bl	80074d4 <memcpy>
 8006a10:	ab1c      	add	r3, sp, #112	@ 0x70
 8006a12:	9301      	str	r3, [sp, #4]
 8006a14:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	9805      	ldr	r0, [sp, #20]
 8006a1a:	4652      	mov	r2, sl
 8006a1c:	465b      	mov	r3, fp
 8006a1e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006a22:	f7ff fbd5 	bl	80061d0 <__d2b>
 8006a26:	901a      	str	r0, [sp, #104]	@ 0x68
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	f43f aedc 	beq.w	80067e6 <_strtod_l+0x436>
 8006a2e:	9805      	ldr	r0, [sp, #20]
 8006a30:	2101      	movs	r1, #1
 8006a32:	f7ff f92f 	bl	8005c94 <__i2b>
 8006a36:	4680      	mov	r8, r0
 8006a38:	b948      	cbnz	r0, 8006a4e <_strtod_l+0x69e>
 8006a3a:	f04f 0800 	mov.w	r8, #0
 8006a3e:	e6d2      	b.n	80067e6 <_strtod_l+0x436>
 8006a40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a44:	fa02 f303 	lsl.w	r3, r2, r3
 8006a48:	ea03 0a0a 	and.w	sl, r3, sl
 8006a4c:	e7ae      	b.n	80069ac <_strtod_l+0x5fc>
 8006a4e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006a50:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006a52:	2d00      	cmp	r5, #0
 8006a54:	bfab      	itete	ge
 8006a56:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006a58:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006a5a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006a5c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006a5e:	bfac      	ite	ge
 8006a60:	18ef      	addge	r7, r5, r3
 8006a62:	1b5e      	sublt	r6, r3, r5
 8006a64:	9b08      	ldr	r3, [sp, #32]
 8006a66:	1aed      	subs	r5, r5, r3
 8006a68:	4415      	add	r5, r2
 8006a6a:	4b33      	ldr	r3, [pc, #204]	@ (8006b38 <_strtod_l+0x788>)
 8006a6c:	3d01      	subs	r5, #1
 8006a6e:	429d      	cmp	r5, r3
 8006a70:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006a74:	da50      	bge.n	8006b18 <_strtod_l+0x768>
 8006a76:	1b5b      	subs	r3, r3, r5
 8006a78:	2b1f      	cmp	r3, #31
 8006a7a:	eba2 0203 	sub.w	r2, r2, r3
 8006a7e:	f04f 0101 	mov.w	r1, #1
 8006a82:	dc3d      	bgt.n	8006b00 <_strtod_l+0x750>
 8006a84:	fa01 f303 	lsl.w	r3, r1, r3
 8006a88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a8e:	18bd      	adds	r5, r7, r2
 8006a90:	9b08      	ldr	r3, [sp, #32]
 8006a92:	42af      	cmp	r7, r5
 8006a94:	4416      	add	r6, r2
 8006a96:	441e      	add	r6, r3
 8006a98:	463b      	mov	r3, r7
 8006a9a:	bfa8      	it	ge
 8006a9c:	462b      	movge	r3, r5
 8006a9e:	42b3      	cmp	r3, r6
 8006aa0:	bfa8      	it	ge
 8006aa2:	4633      	movge	r3, r6
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bfc2      	ittt	gt
 8006aa8:	1aed      	subgt	r5, r5, r3
 8006aaa:	1af6      	subgt	r6, r6, r3
 8006aac:	1aff      	subgt	r7, r7, r3
 8006aae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	dd16      	ble.n	8006ae2 <_strtod_l+0x732>
 8006ab4:	4641      	mov	r1, r8
 8006ab6:	9805      	ldr	r0, [sp, #20]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	f7ff f9ab 	bl	8005e14 <__pow5mult>
 8006abe:	4680      	mov	r8, r0
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d0ba      	beq.n	8006a3a <_strtod_l+0x68a>
 8006ac4:	4601      	mov	r1, r0
 8006ac6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006ac8:	9805      	ldr	r0, [sp, #20]
 8006aca:	f7ff f8f9 	bl	8005cc0 <__multiply>
 8006ace:	900e      	str	r0, [sp, #56]	@ 0x38
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	f43f ae88 	beq.w	80067e6 <_strtod_l+0x436>
 8006ad6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ad8:	9805      	ldr	r0, [sp, #20]
 8006ada:	f7fe ffdd 	bl	8005a98 <_Bfree>
 8006ade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ae0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ae2:	2d00      	cmp	r5, #0
 8006ae4:	dc1d      	bgt.n	8006b22 <_strtod_l+0x772>
 8006ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	dd27      	ble.n	8006b3c <_strtod_l+0x78c>
 8006aec:	4649      	mov	r1, r9
 8006aee:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006af0:	9805      	ldr	r0, [sp, #20]
 8006af2:	f7ff f98f 	bl	8005e14 <__pow5mult>
 8006af6:	4681      	mov	r9, r0
 8006af8:	bb00      	cbnz	r0, 8006b3c <_strtod_l+0x78c>
 8006afa:	f04f 0900 	mov.w	r9, #0
 8006afe:	e672      	b.n	80067e6 <_strtod_l+0x436>
 8006b00:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006b04:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006b08:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006b0c:	35e2      	adds	r5, #226	@ 0xe2
 8006b0e:	fa01 f305 	lsl.w	r3, r1, r5
 8006b12:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b14:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006b16:	e7ba      	b.n	8006a8e <_strtod_l+0x6de>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b20:	e7b5      	b.n	8006a8e <_strtod_l+0x6de>
 8006b22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b24:	9805      	ldr	r0, [sp, #20]
 8006b26:	462a      	mov	r2, r5
 8006b28:	f7ff f9ce 	bl	8005ec8 <__lshift>
 8006b2c:	901a      	str	r0, [sp, #104]	@ 0x68
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d1d9      	bne.n	8006ae6 <_strtod_l+0x736>
 8006b32:	e658      	b.n	80067e6 <_strtod_l+0x436>
 8006b34:	08008490 	.word	0x08008490
 8006b38:	fffffc02 	.word	0xfffffc02
 8006b3c:	2e00      	cmp	r6, #0
 8006b3e:	dd07      	ble.n	8006b50 <_strtod_l+0x7a0>
 8006b40:	4649      	mov	r1, r9
 8006b42:	9805      	ldr	r0, [sp, #20]
 8006b44:	4632      	mov	r2, r6
 8006b46:	f7ff f9bf 	bl	8005ec8 <__lshift>
 8006b4a:	4681      	mov	r9, r0
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d0d4      	beq.n	8006afa <_strtod_l+0x74a>
 8006b50:	2f00      	cmp	r7, #0
 8006b52:	dd08      	ble.n	8006b66 <_strtod_l+0x7b6>
 8006b54:	4641      	mov	r1, r8
 8006b56:	9805      	ldr	r0, [sp, #20]
 8006b58:	463a      	mov	r2, r7
 8006b5a:	f7ff f9b5 	bl	8005ec8 <__lshift>
 8006b5e:	4680      	mov	r8, r0
 8006b60:	2800      	cmp	r0, #0
 8006b62:	f43f ae40 	beq.w	80067e6 <_strtod_l+0x436>
 8006b66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b68:	9805      	ldr	r0, [sp, #20]
 8006b6a:	464a      	mov	r2, r9
 8006b6c:	f7ff fa34 	bl	8005fd8 <__mdiff>
 8006b70:	4604      	mov	r4, r0
 8006b72:	2800      	cmp	r0, #0
 8006b74:	f43f ae37 	beq.w	80067e6 <_strtod_l+0x436>
 8006b78:	68c3      	ldr	r3, [r0, #12]
 8006b7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60c3      	str	r3, [r0, #12]
 8006b80:	4641      	mov	r1, r8
 8006b82:	f7ff fa0d 	bl	8005fa0 <__mcmp>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	da3d      	bge.n	8006c06 <_strtod_l+0x856>
 8006b8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b8c:	ea53 030a 	orrs.w	r3, r3, sl
 8006b90:	d163      	bne.n	8006c5a <_strtod_l+0x8aa>
 8006b92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d15f      	bne.n	8006c5a <_strtod_l+0x8aa>
 8006b9a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006b9e:	0d1b      	lsrs	r3, r3, #20
 8006ba0:	051b      	lsls	r3, r3, #20
 8006ba2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006ba6:	d958      	bls.n	8006c5a <_strtod_l+0x8aa>
 8006ba8:	6963      	ldr	r3, [r4, #20]
 8006baa:	b913      	cbnz	r3, 8006bb2 <_strtod_l+0x802>
 8006bac:	6923      	ldr	r3, [r4, #16]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	dd53      	ble.n	8006c5a <_strtod_l+0x8aa>
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	9805      	ldr	r0, [sp, #20]
 8006bb8:	f7ff f986 	bl	8005ec8 <__lshift>
 8006bbc:	4641      	mov	r1, r8
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	f7ff f9ee 	bl	8005fa0 <__mcmp>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	dd48      	ble.n	8006c5a <_strtod_l+0x8aa>
 8006bc8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006bcc:	9a08      	ldr	r2, [sp, #32]
 8006bce:	0d1b      	lsrs	r3, r3, #20
 8006bd0:	051b      	lsls	r3, r3, #20
 8006bd2:	2a00      	cmp	r2, #0
 8006bd4:	d062      	beq.n	8006c9c <_strtod_l+0x8ec>
 8006bd6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006bda:	d85f      	bhi.n	8006c9c <_strtod_l+0x8ec>
 8006bdc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006be0:	f67f ae97 	bls.w	8006912 <_strtod_l+0x562>
 8006be4:	4ba4      	ldr	r3, [pc, #656]	@ (8006e78 <_strtod_l+0xac8>)
 8006be6:	4650      	mov	r0, sl
 8006be8:	4659      	mov	r1, fp
 8006bea:	2200      	movs	r2, #0
 8006bec:	f7f9 fd04 	bl	80005f8 <__aeabi_dmul>
 8006bf0:	4ba2      	ldr	r3, [pc, #648]	@ (8006e7c <_strtod_l+0xacc>)
 8006bf2:	400b      	ands	r3, r1
 8006bf4:	4682      	mov	sl, r0
 8006bf6:	468b      	mov	fp, r1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f47f adff 	bne.w	80067fc <_strtod_l+0x44c>
 8006bfe:	9a05      	ldr	r2, [sp, #20]
 8006c00:	2322      	movs	r3, #34	@ 0x22
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	e5fa      	b.n	80067fc <_strtod_l+0x44c>
 8006c06:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006c0a:	d165      	bne.n	8006cd8 <_strtod_l+0x928>
 8006c0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006c0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c12:	b35a      	cbz	r2, 8006c6c <_strtod_l+0x8bc>
 8006c14:	4a9a      	ldr	r2, [pc, #616]	@ (8006e80 <_strtod_l+0xad0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d12b      	bne.n	8006c72 <_strtod_l+0x8c2>
 8006c1a:	9b08      	ldr	r3, [sp, #32]
 8006c1c:	4651      	mov	r1, sl
 8006c1e:	b303      	cbz	r3, 8006c62 <_strtod_l+0x8b2>
 8006c20:	4b96      	ldr	r3, [pc, #600]	@ (8006e7c <_strtod_l+0xacc>)
 8006c22:	465a      	mov	r2, fp
 8006c24:	4013      	ands	r3, r2
 8006c26:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006c2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c2e:	d81b      	bhi.n	8006c68 <_strtod_l+0x8b8>
 8006c30:	0d1b      	lsrs	r3, r3, #20
 8006c32:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006c36:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3a:	4299      	cmp	r1, r3
 8006c3c:	d119      	bne.n	8006c72 <_strtod_l+0x8c2>
 8006c3e:	4b91      	ldr	r3, [pc, #580]	@ (8006e84 <_strtod_l+0xad4>)
 8006c40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d102      	bne.n	8006c4c <_strtod_l+0x89c>
 8006c46:	3101      	adds	r1, #1
 8006c48:	f43f adcd 	beq.w	80067e6 <_strtod_l+0x436>
 8006c4c:	4b8b      	ldr	r3, [pc, #556]	@ (8006e7c <_strtod_l+0xacc>)
 8006c4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c50:	401a      	ands	r2, r3
 8006c52:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006c56:	f04f 0a00 	mov.w	sl, #0
 8006c5a:	9b08      	ldr	r3, [sp, #32]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1c1      	bne.n	8006be4 <_strtod_l+0x834>
 8006c60:	e5cc      	b.n	80067fc <_strtod_l+0x44c>
 8006c62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c66:	e7e8      	b.n	8006c3a <_strtod_l+0x88a>
 8006c68:	4613      	mov	r3, r2
 8006c6a:	e7e6      	b.n	8006c3a <_strtod_l+0x88a>
 8006c6c:	ea53 030a 	orrs.w	r3, r3, sl
 8006c70:	d0aa      	beq.n	8006bc8 <_strtod_l+0x818>
 8006c72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c74:	b1db      	cbz	r3, 8006cae <_strtod_l+0x8fe>
 8006c76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c78:	4213      	tst	r3, r2
 8006c7a:	d0ee      	beq.n	8006c5a <_strtod_l+0x8aa>
 8006c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c7e:	9a08      	ldr	r2, [sp, #32]
 8006c80:	4650      	mov	r0, sl
 8006c82:	4659      	mov	r1, fp
 8006c84:	b1bb      	cbz	r3, 8006cb6 <_strtod_l+0x906>
 8006c86:	f7ff fb6f 	bl	8006368 <sulp>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c92:	f7f9 fafb 	bl	800028c <__adddf3>
 8006c96:	4682      	mov	sl, r0
 8006c98:	468b      	mov	fp, r1
 8006c9a:	e7de      	b.n	8006c5a <_strtod_l+0x8aa>
 8006c9c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006ca0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006ca4:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006ca8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006cac:	e7d5      	b.n	8006c5a <_strtod_l+0x8aa>
 8006cae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006cb0:	ea13 0f0a 	tst.w	r3, sl
 8006cb4:	e7e1      	b.n	8006c7a <_strtod_l+0x8ca>
 8006cb6:	f7ff fb57 	bl	8006368 <sulp>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cc2:	f7f9 fae1 	bl	8000288 <__aeabi_dsub>
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2300      	movs	r3, #0
 8006cca:	4682      	mov	sl, r0
 8006ccc:	468b      	mov	fp, r1
 8006cce:	f7f9 fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d0c1      	beq.n	8006c5a <_strtod_l+0x8aa>
 8006cd6:	e61c      	b.n	8006912 <_strtod_l+0x562>
 8006cd8:	4641      	mov	r1, r8
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f7ff fad0 	bl	8006280 <__ratio>
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460f      	mov	r7, r1
 8006cea:	f7f9 ff01 	bl	8000af0 <__aeabi_dcmple>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d06d      	beq.n	8006dce <_strtod_l+0xa1e>
 8006cf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d178      	bne.n	8006dea <_strtod_l+0xa3a>
 8006cf8:	f1ba 0f00 	cmp.w	sl, #0
 8006cfc:	d156      	bne.n	8006dac <_strtod_l+0x9fc>
 8006cfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d158      	bne.n	8006dba <_strtod_l+0xa0a>
 8006d08:	4b5f      	ldr	r3, [pc, #380]	@ (8006e88 <_strtod_l+0xad8>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	4639      	mov	r1, r7
 8006d10:	f7f9 fee4 	bl	8000adc <__aeabi_dcmplt>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d157      	bne.n	8006dc8 <_strtod_l+0xa18>
 8006d18:	4630      	mov	r0, r6
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	4b5b      	ldr	r3, [pc, #364]	@ (8006e8c <_strtod_l+0xadc>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f7f9 fc6a 	bl	80005f8 <__aeabi_dmul>
 8006d24:	4606      	mov	r6, r0
 8006d26:	460f      	mov	r7, r1
 8006d28:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006d2c:	9606      	str	r6, [sp, #24]
 8006d2e:	9307      	str	r3, [sp, #28]
 8006d30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d34:	4d51      	ldr	r5, [pc, #324]	@ (8006e7c <_strtod_l+0xacc>)
 8006d36:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006d3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d3c:	401d      	ands	r5, r3
 8006d3e:	4b54      	ldr	r3, [pc, #336]	@ (8006e90 <_strtod_l+0xae0>)
 8006d40:	429d      	cmp	r5, r3
 8006d42:	f040 80ab 	bne.w	8006e9c <_strtod_l+0xaec>
 8006d46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d48:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006d4c:	4650      	mov	r0, sl
 8006d4e:	4659      	mov	r1, fp
 8006d50:	f7ff f9d4 	bl	80060fc <__ulp>
 8006d54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d58:	f7f9 fc4e 	bl	80005f8 <__aeabi_dmul>
 8006d5c:	4652      	mov	r2, sl
 8006d5e:	465b      	mov	r3, fp
 8006d60:	f7f9 fa94 	bl	800028c <__adddf3>
 8006d64:	460b      	mov	r3, r1
 8006d66:	4945      	ldr	r1, [pc, #276]	@ (8006e7c <_strtod_l+0xacc>)
 8006d68:	4a4a      	ldr	r2, [pc, #296]	@ (8006e94 <_strtod_l+0xae4>)
 8006d6a:	4019      	ands	r1, r3
 8006d6c:	4291      	cmp	r1, r2
 8006d6e:	4682      	mov	sl, r0
 8006d70:	d942      	bls.n	8006df8 <_strtod_l+0xa48>
 8006d72:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006d74:	4b43      	ldr	r3, [pc, #268]	@ (8006e84 <_strtod_l+0xad4>)
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d103      	bne.n	8006d82 <_strtod_l+0x9d2>
 8006d7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	f43f ad32 	beq.w	80067e6 <_strtod_l+0x436>
 8006d82:	f8df b100 	ldr.w	fp, [pc, #256]	@ 8006e84 <_strtod_l+0xad4>
 8006d86:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006d8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d8c:	9805      	ldr	r0, [sp, #20]
 8006d8e:	f7fe fe83 	bl	8005a98 <_Bfree>
 8006d92:	9805      	ldr	r0, [sp, #20]
 8006d94:	4649      	mov	r1, r9
 8006d96:	f7fe fe7f 	bl	8005a98 <_Bfree>
 8006d9a:	9805      	ldr	r0, [sp, #20]
 8006d9c:	4641      	mov	r1, r8
 8006d9e:	f7fe fe7b 	bl	8005a98 <_Bfree>
 8006da2:	9805      	ldr	r0, [sp, #20]
 8006da4:	4621      	mov	r1, r4
 8006da6:	f7fe fe77 	bl	8005a98 <_Bfree>
 8006daa:	e61f      	b.n	80069ec <_strtod_l+0x63c>
 8006dac:	f1ba 0f01 	cmp.w	sl, #1
 8006db0:	d103      	bne.n	8006dba <_strtod_l+0xa0a>
 8006db2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f43f adac 	beq.w	8006912 <_strtod_l+0x562>
 8006dba:	4b37      	ldr	r3, [pc, #220]	@ (8006e98 <_strtod_l+0xae8>)
 8006dbc:	4f32      	ldr	r7, [pc, #200]	@ (8006e88 <_strtod_l+0xad8>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006dc4:	2600      	movs	r6, #0
 8006dc6:	e7b3      	b.n	8006d30 <_strtod_l+0x980>
 8006dc8:	4f30      	ldr	r7, [pc, #192]	@ (8006e8c <_strtod_l+0xadc>)
 8006dca:	2600      	movs	r6, #0
 8006dcc:	e7ac      	b.n	8006d28 <_strtod_l+0x978>
 8006dce:	4b2f      	ldr	r3, [pc, #188]	@ (8006e8c <_strtod_l+0xadc>)
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	4639      	mov	r1, r7
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f7f9 fc0f 	bl	80005f8 <__aeabi_dmul>
 8006dda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ddc:	4606      	mov	r6, r0
 8006dde:	460f      	mov	r7, r1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0a1      	beq.n	8006d28 <_strtod_l+0x978>
 8006de4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006de8:	e7a2      	b.n	8006d30 <_strtod_l+0x980>
 8006dea:	4b27      	ldr	r3, [pc, #156]	@ (8006e88 <_strtod_l+0xad8>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006df2:	4616      	mov	r6, r2
 8006df4:	461f      	mov	r7, r3
 8006df6:	e79b      	b.n	8006d30 <_strtod_l+0x980>
 8006df8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006dfc:	9b08      	ldr	r3, [sp, #32]
 8006dfe:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1c1      	bne.n	8006d8a <_strtod_l+0x9da>
 8006e06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e0a:	0d1b      	lsrs	r3, r3, #20
 8006e0c:	051b      	lsls	r3, r3, #20
 8006e0e:	429d      	cmp	r5, r3
 8006e10:	d1bb      	bne.n	8006d8a <_strtod_l+0x9da>
 8006e12:	4630      	mov	r0, r6
 8006e14:	4639      	mov	r1, r7
 8006e16:	f7fa f9ad 	bl	8001174 <__aeabi_d2lz>
 8006e1a:	f7f9 fbbf 	bl	800059c <__aeabi_l2d>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4630      	mov	r0, r6
 8006e24:	4639      	mov	r1, r7
 8006e26:	f7f9 fa2f 	bl	8000288 <__aeabi_dsub>
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006e32:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006e36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e38:	ea46 060a 	orr.w	r6, r6, sl
 8006e3c:	431e      	orrs	r6, r3
 8006e3e:	d06a      	beq.n	8006f16 <_strtod_l+0xb66>
 8006e40:	a309      	add	r3, pc, #36	@ (adr r3, 8006e68 <_strtod_l+0xab8>)
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	f7f9 fe49 	bl	8000adc <__aeabi_dcmplt>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	f47f acd6 	bne.w	80067fc <_strtod_l+0x44c>
 8006e50:	a307      	add	r3, pc, #28	@ (adr r3, 8006e70 <_strtod_l+0xac0>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e5a:	f7f9 fe5d 	bl	8000b18 <__aeabi_dcmpgt>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d093      	beq.n	8006d8a <_strtod_l+0x9da>
 8006e62:	e4cb      	b.n	80067fc <_strtod_l+0x44c>
 8006e64:	f3af 8000 	nop.w
 8006e68:	94a03595 	.word	0x94a03595
 8006e6c:	3fdfffff 	.word	0x3fdfffff
 8006e70:	35afe535 	.word	0x35afe535
 8006e74:	3fe00000 	.word	0x3fe00000
 8006e78:	39500000 	.word	0x39500000
 8006e7c:	7ff00000 	.word	0x7ff00000
 8006e80:	000fffff 	.word	0x000fffff
 8006e84:	7fefffff 	.word	0x7fefffff
 8006e88:	3ff00000 	.word	0x3ff00000
 8006e8c:	3fe00000 	.word	0x3fe00000
 8006e90:	7fe00000 	.word	0x7fe00000
 8006e94:	7c9fffff 	.word	0x7c9fffff
 8006e98:	bff00000 	.word	0xbff00000
 8006e9c:	9b08      	ldr	r3, [sp, #32]
 8006e9e:	b323      	cbz	r3, 8006eea <_strtod_l+0xb3a>
 8006ea0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006ea4:	d821      	bhi.n	8006eea <_strtod_l+0xb3a>
 8006ea6:	a328      	add	r3, pc, #160	@ (adr r3, 8006f48 <_strtod_l+0xb98>)
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	4630      	mov	r0, r6
 8006eae:	4639      	mov	r1, r7
 8006eb0:	f7f9 fe1e 	bl	8000af0 <__aeabi_dcmple>
 8006eb4:	b1a0      	cbz	r0, 8006ee0 <_strtod_l+0xb30>
 8006eb6:	4639      	mov	r1, r7
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f7f9 fe75 	bl	8000ba8 <__aeabi_d2uiz>
 8006ebe:	2801      	cmp	r0, #1
 8006ec0:	bf38      	it	cc
 8006ec2:	2001      	movcc	r0, #1
 8006ec4:	f7f9 fb1e 	bl	8000504 <__aeabi_ui2d>
 8006ec8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006eca:	4606      	mov	r6, r0
 8006ecc:	460f      	mov	r7, r1
 8006ece:	b9fb      	cbnz	r3, 8006f10 <_strtod_l+0xb60>
 8006ed0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006ed4:	9014      	str	r0, [sp, #80]	@ 0x50
 8006ed6:	9315      	str	r3, [sp, #84]	@ 0x54
 8006ed8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006edc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006ee0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006ee2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006ee6:	1b5b      	subs	r3, r3, r5
 8006ee8:	9311      	str	r3, [sp, #68]	@ 0x44
 8006eea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006eee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006ef2:	f7ff f903 	bl	80060fc <__ulp>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4650      	mov	r0, sl
 8006efc:	4659      	mov	r1, fp
 8006efe:	f7f9 fb7b 	bl	80005f8 <__aeabi_dmul>
 8006f02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006f06:	f7f9 f9c1 	bl	800028c <__adddf3>
 8006f0a:	4682      	mov	sl, r0
 8006f0c:	468b      	mov	fp, r1
 8006f0e:	e775      	b.n	8006dfc <_strtod_l+0xa4c>
 8006f10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006f14:	e7e0      	b.n	8006ed8 <_strtod_l+0xb28>
 8006f16:	a30e      	add	r3, pc, #56	@ (adr r3, 8006f50 <_strtod_l+0xba0>)
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	f7f9 fdde 	bl	8000adc <__aeabi_dcmplt>
 8006f20:	e79d      	b.n	8006e5e <_strtod_l+0xaae>
 8006f22:	2300      	movs	r3, #0
 8006f24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006f28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	f7ff ba7d 	b.w	800642a <_strtod_l+0x7a>
 8006f30:	2a65      	cmp	r2, #101	@ 0x65
 8006f32:	f43f ab74 	beq.w	800661e <_strtod_l+0x26e>
 8006f36:	2a45      	cmp	r2, #69	@ 0x45
 8006f38:	f43f ab71 	beq.w	800661e <_strtod_l+0x26e>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f7ff bbac 	b.w	800669a <_strtod_l+0x2ea>
 8006f42:	bf00      	nop
 8006f44:	f3af 8000 	nop.w
 8006f48:	ffc00000 	.word	0xffc00000
 8006f4c:	41dfffff 	.word	0x41dfffff
 8006f50:	94a03595 	.word	0x94a03595
 8006f54:	3fcfffff 	.word	0x3fcfffff

08006f58 <_strtod_r>:
 8006f58:	4b01      	ldr	r3, [pc, #4]	@ (8006f60 <_strtod_r+0x8>)
 8006f5a:	f7ff ba29 	b.w	80063b0 <_strtod_l>
 8006f5e:	bf00      	nop
 8006f60:	20000068 	.word	0x20000068

08006f64 <_strtol_l.constprop.0>:
 8006f64:	2b24      	cmp	r3, #36	@ 0x24
 8006f66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f6a:	4686      	mov	lr, r0
 8006f6c:	4690      	mov	r8, r2
 8006f6e:	d801      	bhi.n	8006f74 <_strtol_l.constprop.0+0x10>
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d106      	bne.n	8006f82 <_strtol_l.constprop.0+0x1e>
 8006f74:	f7fd fdcc 	bl	8004b10 <__errno>
 8006f78:	2316      	movs	r3, #22
 8006f7a:	6003      	str	r3, [r0, #0]
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f82:	4834      	ldr	r0, [pc, #208]	@ (8007054 <_strtol_l.constprop.0+0xf0>)
 8006f84:	460d      	mov	r5, r1
 8006f86:	462a      	mov	r2, r5
 8006f88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f8c:	5d06      	ldrb	r6, [r0, r4]
 8006f8e:	f016 0608 	ands.w	r6, r6, #8
 8006f92:	d1f8      	bne.n	8006f86 <_strtol_l.constprop.0+0x22>
 8006f94:	2c2d      	cmp	r4, #45	@ 0x2d
 8006f96:	d12d      	bne.n	8006ff4 <_strtol_l.constprop.0+0x90>
 8006f98:	782c      	ldrb	r4, [r5, #0]
 8006f9a:	2601      	movs	r6, #1
 8006f9c:	1c95      	adds	r5, r2, #2
 8006f9e:	f033 0210 	bics.w	r2, r3, #16
 8006fa2:	d109      	bne.n	8006fb8 <_strtol_l.constprop.0+0x54>
 8006fa4:	2c30      	cmp	r4, #48	@ 0x30
 8006fa6:	d12a      	bne.n	8006ffe <_strtol_l.constprop.0+0x9a>
 8006fa8:	782a      	ldrb	r2, [r5, #0]
 8006faa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006fae:	2a58      	cmp	r2, #88	@ 0x58
 8006fb0:	d125      	bne.n	8006ffe <_strtol_l.constprop.0+0x9a>
 8006fb2:	786c      	ldrb	r4, [r5, #1]
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	3502      	adds	r5, #2
 8006fb8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006fbc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	fbbc f9f3 	udiv	r9, ip, r3
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	fb03 ca19 	mls	sl, r3, r9, ip
 8006fcc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006fd0:	2f09      	cmp	r7, #9
 8006fd2:	d81b      	bhi.n	800700c <_strtol_l.constprop.0+0xa8>
 8006fd4:	463c      	mov	r4, r7
 8006fd6:	42a3      	cmp	r3, r4
 8006fd8:	dd27      	ble.n	800702a <_strtol_l.constprop.0+0xc6>
 8006fda:	1c57      	adds	r7, r2, #1
 8006fdc:	d007      	beq.n	8006fee <_strtol_l.constprop.0+0x8a>
 8006fde:	4581      	cmp	r9, r0
 8006fe0:	d320      	bcc.n	8007024 <_strtol_l.constprop.0+0xc0>
 8006fe2:	d101      	bne.n	8006fe8 <_strtol_l.constprop.0+0x84>
 8006fe4:	45a2      	cmp	sl, r4
 8006fe6:	db1d      	blt.n	8007024 <_strtol_l.constprop.0+0xc0>
 8006fe8:	fb00 4003 	mla	r0, r0, r3, r4
 8006fec:	2201      	movs	r2, #1
 8006fee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ff2:	e7eb      	b.n	8006fcc <_strtol_l.constprop.0+0x68>
 8006ff4:	2c2b      	cmp	r4, #43	@ 0x2b
 8006ff6:	bf04      	itt	eq
 8006ff8:	782c      	ldrbeq	r4, [r5, #0]
 8006ffa:	1c95      	addeq	r5, r2, #2
 8006ffc:	e7cf      	b.n	8006f9e <_strtol_l.constprop.0+0x3a>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1da      	bne.n	8006fb8 <_strtol_l.constprop.0+0x54>
 8007002:	2c30      	cmp	r4, #48	@ 0x30
 8007004:	bf0c      	ite	eq
 8007006:	2308      	moveq	r3, #8
 8007008:	230a      	movne	r3, #10
 800700a:	e7d5      	b.n	8006fb8 <_strtol_l.constprop.0+0x54>
 800700c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007010:	2f19      	cmp	r7, #25
 8007012:	d801      	bhi.n	8007018 <_strtol_l.constprop.0+0xb4>
 8007014:	3c37      	subs	r4, #55	@ 0x37
 8007016:	e7de      	b.n	8006fd6 <_strtol_l.constprop.0+0x72>
 8007018:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800701c:	2f19      	cmp	r7, #25
 800701e:	d804      	bhi.n	800702a <_strtol_l.constprop.0+0xc6>
 8007020:	3c57      	subs	r4, #87	@ 0x57
 8007022:	e7d8      	b.n	8006fd6 <_strtol_l.constprop.0+0x72>
 8007024:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007028:	e7e1      	b.n	8006fee <_strtol_l.constprop.0+0x8a>
 800702a:	1c53      	adds	r3, r2, #1
 800702c:	d108      	bne.n	8007040 <_strtol_l.constprop.0+0xdc>
 800702e:	2322      	movs	r3, #34	@ 0x22
 8007030:	f8ce 3000 	str.w	r3, [lr]
 8007034:	4660      	mov	r0, ip
 8007036:	f1b8 0f00 	cmp.w	r8, #0
 800703a:	d0a0      	beq.n	8006f7e <_strtol_l.constprop.0+0x1a>
 800703c:	1e69      	subs	r1, r5, #1
 800703e:	e006      	b.n	800704e <_strtol_l.constprop.0+0xea>
 8007040:	b106      	cbz	r6, 8007044 <_strtol_l.constprop.0+0xe0>
 8007042:	4240      	negs	r0, r0
 8007044:	f1b8 0f00 	cmp.w	r8, #0
 8007048:	d099      	beq.n	8006f7e <_strtol_l.constprop.0+0x1a>
 800704a:	2a00      	cmp	r2, #0
 800704c:	d1f6      	bne.n	800703c <_strtol_l.constprop.0+0xd8>
 800704e:	f8c8 1000 	str.w	r1, [r8]
 8007052:	e794      	b.n	8006f7e <_strtol_l.constprop.0+0x1a>
 8007054:	080084b9 	.word	0x080084b9

08007058 <_strtol_r>:
 8007058:	f7ff bf84 	b.w	8006f64 <_strtol_l.constprop.0>

0800705c <__ssputs_r>:
 800705c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	688e      	ldr	r6, [r1, #8]
 8007062:	461f      	mov	r7, r3
 8007064:	42be      	cmp	r6, r7
 8007066:	680b      	ldr	r3, [r1, #0]
 8007068:	4682      	mov	sl, r0
 800706a:	460c      	mov	r4, r1
 800706c:	4690      	mov	r8, r2
 800706e:	d82d      	bhi.n	80070cc <__ssputs_r+0x70>
 8007070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007074:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007078:	d026      	beq.n	80070c8 <__ssputs_r+0x6c>
 800707a:	6965      	ldr	r5, [r4, #20]
 800707c:	6909      	ldr	r1, [r1, #16]
 800707e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007082:	eba3 0901 	sub.w	r9, r3, r1
 8007086:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800708a:	1c7b      	adds	r3, r7, #1
 800708c:	444b      	add	r3, r9
 800708e:	106d      	asrs	r5, r5, #1
 8007090:	429d      	cmp	r5, r3
 8007092:	bf38      	it	cc
 8007094:	461d      	movcc	r5, r3
 8007096:	0553      	lsls	r3, r2, #21
 8007098:	d527      	bpl.n	80070ea <__ssputs_r+0x8e>
 800709a:	4629      	mov	r1, r5
 800709c:	f7fe fc30 	bl	8005900 <_malloc_r>
 80070a0:	4606      	mov	r6, r0
 80070a2:	b360      	cbz	r0, 80070fe <__ssputs_r+0xa2>
 80070a4:	6921      	ldr	r1, [r4, #16]
 80070a6:	464a      	mov	r2, r9
 80070a8:	f000 fa14 	bl	80074d4 <memcpy>
 80070ac:	89a3      	ldrh	r3, [r4, #12]
 80070ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80070b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070b6:	81a3      	strh	r3, [r4, #12]
 80070b8:	6126      	str	r6, [r4, #16]
 80070ba:	6165      	str	r5, [r4, #20]
 80070bc:	444e      	add	r6, r9
 80070be:	eba5 0509 	sub.w	r5, r5, r9
 80070c2:	6026      	str	r6, [r4, #0]
 80070c4:	60a5      	str	r5, [r4, #8]
 80070c6:	463e      	mov	r6, r7
 80070c8:	42be      	cmp	r6, r7
 80070ca:	d900      	bls.n	80070ce <__ssputs_r+0x72>
 80070cc:	463e      	mov	r6, r7
 80070ce:	6820      	ldr	r0, [r4, #0]
 80070d0:	4632      	mov	r2, r6
 80070d2:	4641      	mov	r1, r8
 80070d4:	f000 f9c2 	bl	800745c <memmove>
 80070d8:	68a3      	ldr	r3, [r4, #8]
 80070da:	1b9b      	subs	r3, r3, r6
 80070dc:	60a3      	str	r3, [r4, #8]
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	4433      	add	r3, r6
 80070e2:	6023      	str	r3, [r4, #0]
 80070e4:	2000      	movs	r0, #0
 80070e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ea:	462a      	mov	r2, r5
 80070ec:	f000 fd83 	bl	8007bf6 <_realloc_r>
 80070f0:	4606      	mov	r6, r0
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d1e0      	bne.n	80070b8 <__ssputs_r+0x5c>
 80070f6:	6921      	ldr	r1, [r4, #16]
 80070f8:	4650      	mov	r0, sl
 80070fa:	f7fe fb8d 	bl	8005818 <_free_r>
 80070fe:	230c      	movs	r3, #12
 8007100:	f8ca 3000 	str.w	r3, [sl]
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800710a:	81a3      	strh	r3, [r4, #12]
 800710c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007110:	e7e9      	b.n	80070e6 <__ssputs_r+0x8a>
	...

08007114 <_svfiprintf_r>:
 8007114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007118:	4698      	mov	r8, r3
 800711a:	898b      	ldrh	r3, [r1, #12]
 800711c:	061b      	lsls	r3, r3, #24
 800711e:	b09d      	sub	sp, #116	@ 0x74
 8007120:	4607      	mov	r7, r0
 8007122:	460d      	mov	r5, r1
 8007124:	4614      	mov	r4, r2
 8007126:	d510      	bpl.n	800714a <_svfiprintf_r+0x36>
 8007128:	690b      	ldr	r3, [r1, #16]
 800712a:	b973      	cbnz	r3, 800714a <_svfiprintf_r+0x36>
 800712c:	2140      	movs	r1, #64	@ 0x40
 800712e:	f7fe fbe7 	bl	8005900 <_malloc_r>
 8007132:	6028      	str	r0, [r5, #0]
 8007134:	6128      	str	r0, [r5, #16]
 8007136:	b930      	cbnz	r0, 8007146 <_svfiprintf_r+0x32>
 8007138:	230c      	movs	r3, #12
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007140:	b01d      	add	sp, #116	@ 0x74
 8007142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007146:	2340      	movs	r3, #64	@ 0x40
 8007148:	616b      	str	r3, [r5, #20]
 800714a:	2300      	movs	r3, #0
 800714c:	9309      	str	r3, [sp, #36]	@ 0x24
 800714e:	2320      	movs	r3, #32
 8007150:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007154:	f8cd 800c 	str.w	r8, [sp, #12]
 8007158:	2330      	movs	r3, #48	@ 0x30
 800715a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80072f8 <_svfiprintf_r+0x1e4>
 800715e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007162:	f04f 0901 	mov.w	r9, #1
 8007166:	4623      	mov	r3, r4
 8007168:	469a      	mov	sl, r3
 800716a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800716e:	b10a      	cbz	r2, 8007174 <_svfiprintf_r+0x60>
 8007170:	2a25      	cmp	r2, #37	@ 0x25
 8007172:	d1f9      	bne.n	8007168 <_svfiprintf_r+0x54>
 8007174:	ebba 0b04 	subs.w	fp, sl, r4
 8007178:	d00b      	beq.n	8007192 <_svfiprintf_r+0x7e>
 800717a:	465b      	mov	r3, fp
 800717c:	4622      	mov	r2, r4
 800717e:	4629      	mov	r1, r5
 8007180:	4638      	mov	r0, r7
 8007182:	f7ff ff6b 	bl	800705c <__ssputs_r>
 8007186:	3001      	adds	r0, #1
 8007188:	f000 80a7 	beq.w	80072da <_svfiprintf_r+0x1c6>
 800718c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800718e:	445a      	add	r2, fp
 8007190:	9209      	str	r2, [sp, #36]	@ 0x24
 8007192:	f89a 3000 	ldrb.w	r3, [sl]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 809f 	beq.w	80072da <_svfiprintf_r+0x1c6>
 800719c:	2300      	movs	r3, #0
 800719e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071a6:	f10a 0a01 	add.w	sl, sl, #1
 80071aa:	9304      	str	r3, [sp, #16]
 80071ac:	9307      	str	r3, [sp, #28]
 80071ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80071b4:	4654      	mov	r4, sl
 80071b6:	2205      	movs	r2, #5
 80071b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071bc:	484e      	ldr	r0, [pc, #312]	@ (80072f8 <_svfiprintf_r+0x1e4>)
 80071be:	f7f9 f807 	bl	80001d0 <memchr>
 80071c2:	9a04      	ldr	r2, [sp, #16]
 80071c4:	b9d8      	cbnz	r0, 80071fe <_svfiprintf_r+0xea>
 80071c6:	06d0      	lsls	r0, r2, #27
 80071c8:	bf44      	itt	mi
 80071ca:	2320      	movmi	r3, #32
 80071cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071d0:	0711      	lsls	r1, r2, #28
 80071d2:	bf44      	itt	mi
 80071d4:	232b      	movmi	r3, #43	@ 0x2b
 80071d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071da:	f89a 3000 	ldrb.w	r3, [sl]
 80071de:	2b2a      	cmp	r3, #42	@ 0x2a
 80071e0:	d015      	beq.n	800720e <_svfiprintf_r+0xfa>
 80071e2:	9a07      	ldr	r2, [sp, #28]
 80071e4:	4654      	mov	r4, sl
 80071e6:	2000      	movs	r0, #0
 80071e8:	f04f 0c0a 	mov.w	ip, #10
 80071ec:	4621      	mov	r1, r4
 80071ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071f2:	3b30      	subs	r3, #48	@ 0x30
 80071f4:	2b09      	cmp	r3, #9
 80071f6:	d94b      	bls.n	8007290 <_svfiprintf_r+0x17c>
 80071f8:	b1b0      	cbz	r0, 8007228 <_svfiprintf_r+0x114>
 80071fa:	9207      	str	r2, [sp, #28]
 80071fc:	e014      	b.n	8007228 <_svfiprintf_r+0x114>
 80071fe:	eba0 0308 	sub.w	r3, r0, r8
 8007202:	fa09 f303 	lsl.w	r3, r9, r3
 8007206:	4313      	orrs	r3, r2
 8007208:	9304      	str	r3, [sp, #16]
 800720a:	46a2      	mov	sl, r4
 800720c:	e7d2      	b.n	80071b4 <_svfiprintf_r+0xa0>
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	1d19      	adds	r1, r3, #4
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	9103      	str	r1, [sp, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	bfbb      	ittet	lt
 800721a:	425b      	neglt	r3, r3
 800721c:	f042 0202 	orrlt.w	r2, r2, #2
 8007220:	9307      	strge	r3, [sp, #28]
 8007222:	9307      	strlt	r3, [sp, #28]
 8007224:	bfb8      	it	lt
 8007226:	9204      	strlt	r2, [sp, #16]
 8007228:	7823      	ldrb	r3, [r4, #0]
 800722a:	2b2e      	cmp	r3, #46	@ 0x2e
 800722c:	d10a      	bne.n	8007244 <_svfiprintf_r+0x130>
 800722e:	7863      	ldrb	r3, [r4, #1]
 8007230:	2b2a      	cmp	r3, #42	@ 0x2a
 8007232:	d132      	bne.n	800729a <_svfiprintf_r+0x186>
 8007234:	9b03      	ldr	r3, [sp, #12]
 8007236:	1d1a      	adds	r2, r3, #4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	9203      	str	r2, [sp, #12]
 800723c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007240:	3402      	adds	r4, #2
 8007242:	9305      	str	r3, [sp, #20]
 8007244:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80072fc <_svfiprintf_r+0x1e8>
 8007248:	7821      	ldrb	r1, [r4, #0]
 800724a:	2203      	movs	r2, #3
 800724c:	4650      	mov	r0, sl
 800724e:	f7f8 ffbf 	bl	80001d0 <memchr>
 8007252:	b138      	cbz	r0, 8007264 <_svfiprintf_r+0x150>
 8007254:	9b04      	ldr	r3, [sp, #16]
 8007256:	eba0 000a 	sub.w	r0, r0, sl
 800725a:	2240      	movs	r2, #64	@ 0x40
 800725c:	4082      	lsls	r2, r0
 800725e:	4313      	orrs	r3, r2
 8007260:	3401      	adds	r4, #1
 8007262:	9304      	str	r3, [sp, #16]
 8007264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007268:	4825      	ldr	r0, [pc, #148]	@ (8007300 <_svfiprintf_r+0x1ec>)
 800726a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800726e:	2206      	movs	r2, #6
 8007270:	f7f8 ffae 	bl	80001d0 <memchr>
 8007274:	2800      	cmp	r0, #0
 8007276:	d036      	beq.n	80072e6 <_svfiprintf_r+0x1d2>
 8007278:	4b22      	ldr	r3, [pc, #136]	@ (8007304 <_svfiprintf_r+0x1f0>)
 800727a:	bb1b      	cbnz	r3, 80072c4 <_svfiprintf_r+0x1b0>
 800727c:	9b03      	ldr	r3, [sp, #12]
 800727e:	3307      	adds	r3, #7
 8007280:	f023 0307 	bic.w	r3, r3, #7
 8007284:	3308      	adds	r3, #8
 8007286:	9303      	str	r3, [sp, #12]
 8007288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800728a:	4433      	add	r3, r6
 800728c:	9309      	str	r3, [sp, #36]	@ 0x24
 800728e:	e76a      	b.n	8007166 <_svfiprintf_r+0x52>
 8007290:	fb0c 3202 	mla	r2, ip, r2, r3
 8007294:	460c      	mov	r4, r1
 8007296:	2001      	movs	r0, #1
 8007298:	e7a8      	b.n	80071ec <_svfiprintf_r+0xd8>
 800729a:	2300      	movs	r3, #0
 800729c:	3401      	adds	r4, #1
 800729e:	9305      	str	r3, [sp, #20]
 80072a0:	4619      	mov	r1, r3
 80072a2:	f04f 0c0a 	mov.w	ip, #10
 80072a6:	4620      	mov	r0, r4
 80072a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072ac:	3a30      	subs	r2, #48	@ 0x30
 80072ae:	2a09      	cmp	r2, #9
 80072b0:	d903      	bls.n	80072ba <_svfiprintf_r+0x1a6>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0c6      	beq.n	8007244 <_svfiprintf_r+0x130>
 80072b6:	9105      	str	r1, [sp, #20]
 80072b8:	e7c4      	b.n	8007244 <_svfiprintf_r+0x130>
 80072ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80072be:	4604      	mov	r4, r0
 80072c0:	2301      	movs	r3, #1
 80072c2:	e7f0      	b.n	80072a6 <_svfiprintf_r+0x192>
 80072c4:	ab03      	add	r3, sp, #12
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	462a      	mov	r2, r5
 80072ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007308 <_svfiprintf_r+0x1f4>)
 80072cc:	a904      	add	r1, sp, #16
 80072ce:	4638      	mov	r0, r7
 80072d0:	f7fc fcde 	bl	8003c90 <_printf_float>
 80072d4:	1c42      	adds	r2, r0, #1
 80072d6:	4606      	mov	r6, r0
 80072d8:	d1d6      	bne.n	8007288 <_svfiprintf_r+0x174>
 80072da:	89ab      	ldrh	r3, [r5, #12]
 80072dc:	065b      	lsls	r3, r3, #25
 80072de:	f53f af2d 	bmi.w	800713c <_svfiprintf_r+0x28>
 80072e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072e4:	e72c      	b.n	8007140 <_svfiprintf_r+0x2c>
 80072e6:	ab03      	add	r3, sp, #12
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	462a      	mov	r2, r5
 80072ec:	4b06      	ldr	r3, [pc, #24]	@ (8007308 <_svfiprintf_r+0x1f4>)
 80072ee:	a904      	add	r1, sp, #16
 80072f0:	4638      	mov	r0, r7
 80072f2:	f7fc ff67 	bl	80041c4 <_printf_i>
 80072f6:	e7ed      	b.n	80072d4 <_svfiprintf_r+0x1c0>
 80072f8:	080085b9 	.word	0x080085b9
 80072fc:	080085bf 	.word	0x080085bf
 8007300:	080085c3 	.word	0x080085c3
 8007304:	08003c91 	.word	0x08003c91
 8007308:	0800705d 	.word	0x0800705d

0800730c <__sflush_r>:
 800730c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007312:	0716      	lsls	r6, r2, #28
 8007314:	4605      	mov	r5, r0
 8007316:	460c      	mov	r4, r1
 8007318:	d454      	bmi.n	80073c4 <__sflush_r+0xb8>
 800731a:	684b      	ldr	r3, [r1, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	dc02      	bgt.n	8007326 <__sflush_r+0x1a>
 8007320:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007322:	2b00      	cmp	r3, #0
 8007324:	dd48      	ble.n	80073b8 <__sflush_r+0xac>
 8007326:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007328:	2e00      	cmp	r6, #0
 800732a:	d045      	beq.n	80073b8 <__sflush_r+0xac>
 800732c:	2300      	movs	r3, #0
 800732e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007332:	682f      	ldr	r7, [r5, #0]
 8007334:	6a21      	ldr	r1, [r4, #32]
 8007336:	602b      	str	r3, [r5, #0]
 8007338:	d030      	beq.n	800739c <__sflush_r+0x90>
 800733a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	0759      	lsls	r1, r3, #29
 8007340:	d505      	bpl.n	800734e <__sflush_r+0x42>
 8007342:	6863      	ldr	r3, [r4, #4]
 8007344:	1ad2      	subs	r2, r2, r3
 8007346:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007348:	b10b      	cbz	r3, 800734e <__sflush_r+0x42>
 800734a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800734c:	1ad2      	subs	r2, r2, r3
 800734e:	2300      	movs	r3, #0
 8007350:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007352:	6a21      	ldr	r1, [r4, #32]
 8007354:	4628      	mov	r0, r5
 8007356:	47b0      	blx	r6
 8007358:	1c43      	adds	r3, r0, #1
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	d106      	bne.n	800736c <__sflush_r+0x60>
 800735e:	6829      	ldr	r1, [r5, #0]
 8007360:	291d      	cmp	r1, #29
 8007362:	d82b      	bhi.n	80073bc <__sflush_r+0xb0>
 8007364:	4a28      	ldr	r2, [pc, #160]	@ (8007408 <__sflush_r+0xfc>)
 8007366:	410a      	asrs	r2, r1
 8007368:	07d6      	lsls	r6, r2, #31
 800736a:	d427      	bmi.n	80073bc <__sflush_r+0xb0>
 800736c:	2200      	movs	r2, #0
 800736e:	6062      	str	r2, [r4, #4]
 8007370:	04d9      	lsls	r1, r3, #19
 8007372:	6922      	ldr	r2, [r4, #16]
 8007374:	6022      	str	r2, [r4, #0]
 8007376:	d504      	bpl.n	8007382 <__sflush_r+0x76>
 8007378:	1c42      	adds	r2, r0, #1
 800737a:	d101      	bne.n	8007380 <__sflush_r+0x74>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	b903      	cbnz	r3, 8007382 <__sflush_r+0x76>
 8007380:	6560      	str	r0, [r4, #84]	@ 0x54
 8007382:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007384:	602f      	str	r7, [r5, #0]
 8007386:	b1b9      	cbz	r1, 80073b8 <__sflush_r+0xac>
 8007388:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800738c:	4299      	cmp	r1, r3
 800738e:	d002      	beq.n	8007396 <__sflush_r+0x8a>
 8007390:	4628      	mov	r0, r5
 8007392:	f7fe fa41 	bl	8005818 <_free_r>
 8007396:	2300      	movs	r3, #0
 8007398:	6363      	str	r3, [r4, #52]	@ 0x34
 800739a:	e00d      	b.n	80073b8 <__sflush_r+0xac>
 800739c:	2301      	movs	r3, #1
 800739e:	4628      	mov	r0, r5
 80073a0:	47b0      	blx	r6
 80073a2:	4602      	mov	r2, r0
 80073a4:	1c50      	adds	r0, r2, #1
 80073a6:	d1c9      	bne.n	800733c <__sflush_r+0x30>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0c6      	beq.n	800733c <__sflush_r+0x30>
 80073ae:	2b1d      	cmp	r3, #29
 80073b0:	d001      	beq.n	80073b6 <__sflush_r+0xaa>
 80073b2:	2b16      	cmp	r3, #22
 80073b4:	d11d      	bne.n	80073f2 <__sflush_r+0xe6>
 80073b6:	602f      	str	r7, [r5, #0]
 80073b8:	2000      	movs	r0, #0
 80073ba:	e021      	b.n	8007400 <__sflush_r+0xf4>
 80073bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073c0:	b21b      	sxth	r3, r3
 80073c2:	e01a      	b.n	80073fa <__sflush_r+0xee>
 80073c4:	690f      	ldr	r7, [r1, #16]
 80073c6:	2f00      	cmp	r7, #0
 80073c8:	d0f6      	beq.n	80073b8 <__sflush_r+0xac>
 80073ca:	0793      	lsls	r3, r2, #30
 80073cc:	680e      	ldr	r6, [r1, #0]
 80073ce:	bf08      	it	eq
 80073d0:	694b      	ldreq	r3, [r1, #20]
 80073d2:	600f      	str	r7, [r1, #0]
 80073d4:	bf18      	it	ne
 80073d6:	2300      	movne	r3, #0
 80073d8:	1bf6      	subs	r6, r6, r7
 80073da:	608b      	str	r3, [r1, #8]
 80073dc:	2e00      	cmp	r6, #0
 80073de:	ddeb      	ble.n	80073b8 <__sflush_r+0xac>
 80073e0:	6a21      	ldr	r1, [r4, #32]
 80073e2:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80073e6:	4633      	mov	r3, r6
 80073e8:	463a      	mov	r2, r7
 80073ea:	4628      	mov	r0, r5
 80073ec:	47e0      	blx	ip
 80073ee:	2800      	cmp	r0, #0
 80073f0:	dc07      	bgt.n	8007402 <__sflush_r+0xf6>
 80073f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007402:	4407      	add	r7, r0
 8007404:	1a36      	subs	r6, r6, r0
 8007406:	e7e9      	b.n	80073dc <__sflush_r+0xd0>
 8007408:	dfbffffe 	.word	0xdfbffffe

0800740c <_fflush_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	690b      	ldr	r3, [r1, #16]
 8007410:	4605      	mov	r5, r0
 8007412:	460c      	mov	r4, r1
 8007414:	b913      	cbnz	r3, 800741c <_fflush_r+0x10>
 8007416:	2500      	movs	r5, #0
 8007418:	4628      	mov	r0, r5
 800741a:	bd38      	pop	{r3, r4, r5, pc}
 800741c:	b118      	cbz	r0, 8007426 <_fflush_r+0x1a>
 800741e:	6a03      	ldr	r3, [r0, #32]
 8007420:	b90b      	cbnz	r3, 8007426 <_fflush_r+0x1a>
 8007422:	f7fd fa89 	bl	8004938 <__sinit>
 8007426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0f3      	beq.n	8007416 <_fflush_r+0xa>
 800742e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007430:	07d0      	lsls	r0, r2, #31
 8007432:	d404      	bmi.n	800743e <_fflush_r+0x32>
 8007434:	0599      	lsls	r1, r3, #22
 8007436:	d402      	bmi.n	800743e <_fflush_r+0x32>
 8007438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800743a:	f7fd fb94 	bl	8004b66 <__retarget_lock_acquire_recursive>
 800743e:	4628      	mov	r0, r5
 8007440:	4621      	mov	r1, r4
 8007442:	f7ff ff63 	bl	800730c <__sflush_r>
 8007446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007448:	07da      	lsls	r2, r3, #31
 800744a:	4605      	mov	r5, r0
 800744c:	d4e4      	bmi.n	8007418 <_fflush_r+0xc>
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	059b      	lsls	r3, r3, #22
 8007452:	d4e1      	bmi.n	8007418 <_fflush_r+0xc>
 8007454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007456:	f7fd fb87 	bl	8004b68 <__retarget_lock_release_recursive>
 800745a:	e7dd      	b.n	8007418 <_fflush_r+0xc>

0800745c <memmove>:
 800745c:	4288      	cmp	r0, r1
 800745e:	b510      	push	{r4, lr}
 8007460:	eb01 0402 	add.w	r4, r1, r2
 8007464:	d902      	bls.n	800746c <memmove+0x10>
 8007466:	4284      	cmp	r4, r0
 8007468:	4623      	mov	r3, r4
 800746a:	d807      	bhi.n	800747c <memmove+0x20>
 800746c:	1e43      	subs	r3, r0, #1
 800746e:	42a1      	cmp	r1, r4
 8007470:	d008      	beq.n	8007484 <memmove+0x28>
 8007472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007476:	f803 2f01 	strb.w	r2, [r3, #1]!
 800747a:	e7f8      	b.n	800746e <memmove+0x12>
 800747c:	4402      	add	r2, r0
 800747e:	4601      	mov	r1, r0
 8007480:	428a      	cmp	r2, r1
 8007482:	d100      	bne.n	8007486 <memmove+0x2a>
 8007484:	bd10      	pop	{r4, pc}
 8007486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800748a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800748e:	e7f7      	b.n	8007480 <memmove+0x24>

08007490 <strncmp>:
 8007490:	b510      	push	{r4, lr}
 8007492:	b16a      	cbz	r2, 80074b0 <strncmp+0x20>
 8007494:	3901      	subs	r1, #1
 8007496:	1884      	adds	r4, r0, r2
 8007498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800749c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d103      	bne.n	80074ac <strncmp+0x1c>
 80074a4:	42a0      	cmp	r0, r4
 80074a6:	d001      	beq.n	80074ac <strncmp+0x1c>
 80074a8:	2a00      	cmp	r2, #0
 80074aa:	d1f5      	bne.n	8007498 <strncmp+0x8>
 80074ac:	1ad0      	subs	r0, r2, r3
 80074ae:	bd10      	pop	{r4, pc}
 80074b0:	4610      	mov	r0, r2
 80074b2:	e7fc      	b.n	80074ae <strncmp+0x1e>

080074b4 <_sbrk_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d06      	ldr	r5, [pc, #24]	@ (80074d0 <_sbrk_r+0x1c>)
 80074b8:	2300      	movs	r3, #0
 80074ba:	4604      	mov	r4, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	602b      	str	r3, [r5, #0]
 80074c0:	f7fa faf4 	bl	8001aac <_sbrk>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_sbrk_r+0x1a>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_sbrk_r+0x1a>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	200003fc 	.word	0x200003fc

080074d4 <memcpy>:
 80074d4:	440a      	add	r2, r1
 80074d6:	4291      	cmp	r1, r2
 80074d8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80074dc:	d100      	bne.n	80074e0 <memcpy+0xc>
 80074de:	4770      	bx	lr
 80074e0:	b510      	push	{r4, lr}
 80074e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ea:	4291      	cmp	r1, r2
 80074ec:	d1f9      	bne.n	80074e2 <memcpy+0xe>
 80074ee:	bd10      	pop	{r4, pc}

080074f0 <nan>:
 80074f0:	4901      	ldr	r1, [pc, #4]	@ (80074f8 <nan+0x8>)
 80074f2:	2000      	movs	r0, #0
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	7ff80000 	.word	0x7ff80000

080074fc <__assert_func>:
 80074fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074fe:	4614      	mov	r4, r2
 8007500:	461a      	mov	r2, r3
 8007502:	4b09      	ldr	r3, [pc, #36]	@ (8007528 <__assert_func+0x2c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4605      	mov	r5, r0
 8007508:	68d8      	ldr	r0, [r3, #12]
 800750a:	b954      	cbnz	r4, 8007522 <__assert_func+0x26>
 800750c:	4b07      	ldr	r3, [pc, #28]	@ (800752c <__assert_func+0x30>)
 800750e:	461c      	mov	r4, r3
 8007510:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007514:	9100      	str	r1, [sp, #0]
 8007516:	462b      	mov	r3, r5
 8007518:	4905      	ldr	r1, [pc, #20]	@ (8007530 <__assert_func+0x34>)
 800751a:	f000 fba7 	bl	8007c6c <fiprintf>
 800751e:	f000 fbb7 	bl	8007c90 <abort>
 8007522:	4b04      	ldr	r3, [pc, #16]	@ (8007534 <__assert_func+0x38>)
 8007524:	e7f4      	b.n	8007510 <__assert_func+0x14>
 8007526:	bf00      	nop
 8007528:	20000018 	.word	0x20000018
 800752c:	0800860d 	.word	0x0800860d
 8007530:	080085df 	.word	0x080085df
 8007534:	080085d2 	.word	0x080085d2

08007538 <_calloc_r>:
 8007538:	b570      	push	{r4, r5, r6, lr}
 800753a:	fba1 5402 	umull	r5, r4, r1, r2
 800753e:	b93c      	cbnz	r4, 8007550 <_calloc_r+0x18>
 8007540:	4629      	mov	r1, r5
 8007542:	f7fe f9dd 	bl	8005900 <_malloc_r>
 8007546:	4606      	mov	r6, r0
 8007548:	b928      	cbnz	r0, 8007556 <_calloc_r+0x1e>
 800754a:	2600      	movs	r6, #0
 800754c:	4630      	mov	r0, r6
 800754e:	bd70      	pop	{r4, r5, r6, pc}
 8007550:	220c      	movs	r2, #12
 8007552:	6002      	str	r2, [r0, #0]
 8007554:	e7f9      	b.n	800754a <_calloc_r+0x12>
 8007556:	462a      	mov	r2, r5
 8007558:	4621      	mov	r1, r4
 800755a:	f7fd fa86 	bl	8004a6a <memset>
 800755e:	e7f5      	b.n	800754c <_calloc_r+0x14>

08007560 <rshift>:
 8007560:	6903      	ldr	r3, [r0, #16]
 8007562:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007566:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800756a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800756e:	f100 0414 	add.w	r4, r0, #20
 8007572:	dd45      	ble.n	8007600 <rshift+0xa0>
 8007574:	f011 011f 	ands.w	r1, r1, #31
 8007578:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800757c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007580:	d10c      	bne.n	800759c <rshift+0x3c>
 8007582:	f100 0710 	add.w	r7, r0, #16
 8007586:	4629      	mov	r1, r5
 8007588:	42b1      	cmp	r1, r6
 800758a:	d334      	bcc.n	80075f6 <rshift+0x96>
 800758c:	1a9b      	subs	r3, r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	1eea      	subs	r2, r5, #3
 8007592:	4296      	cmp	r6, r2
 8007594:	bf38      	it	cc
 8007596:	2300      	movcc	r3, #0
 8007598:	4423      	add	r3, r4
 800759a:	e015      	b.n	80075c8 <rshift+0x68>
 800759c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80075a0:	f1c1 0820 	rsb	r8, r1, #32
 80075a4:	40cf      	lsrs	r7, r1
 80075a6:	f105 0e04 	add.w	lr, r5, #4
 80075aa:	46a1      	mov	r9, r4
 80075ac:	4576      	cmp	r6, lr
 80075ae:	46f4      	mov	ip, lr
 80075b0:	d815      	bhi.n	80075de <rshift+0x7e>
 80075b2:	1a9a      	subs	r2, r3, r2
 80075b4:	0092      	lsls	r2, r2, #2
 80075b6:	3a04      	subs	r2, #4
 80075b8:	3501      	adds	r5, #1
 80075ba:	42ae      	cmp	r6, r5
 80075bc:	bf38      	it	cc
 80075be:	2200      	movcc	r2, #0
 80075c0:	18a3      	adds	r3, r4, r2
 80075c2:	50a7      	str	r7, [r4, r2]
 80075c4:	b107      	cbz	r7, 80075c8 <rshift+0x68>
 80075c6:	3304      	adds	r3, #4
 80075c8:	1b1a      	subs	r2, r3, r4
 80075ca:	42a3      	cmp	r3, r4
 80075cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80075d0:	bf08      	it	eq
 80075d2:	2300      	moveq	r3, #0
 80075d4:	6102      	str	r2, [r0, #16]
 80075d6:	bf08      	it	eq
 80075d8:	6143      	streq	r3, [r0, #20]
 80075da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075de:	f8dc c000 	ldr.w	ip, [ip]
 80075e2:	fa0c fc08 	lsl.w	ip, ip, r8
 80075e6:	ea4c 0707 	orr.w	r7, ip, r7
 80075ea:	f849 7b04 	str.w	r7, [r9], #4
 80075ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075f2:	40cf      	lsrs	r7, r1
 80075f4:	e7da      	b.n	80075ac <rshift+0x4c>
 80075f6:	f851 cb04 	ldr.w	ip, [r1], #4
 80075fa:	f847 cf04 	str.w	ip, [r7, #4]!
 80075fe:	e7c3      	b.n	8007588 <rshift+0x28>
 8007600:	4623      	mov	r3, r4
 8007602:	e7e1      	b.n	80075c8 <rshift+0x68>

08007604 <__hexdig_fun>:
 8007604:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007608:	2b09      	cmp	r3, #9
 800760a:	d802      	bhi.n	8007612 <__hexdig_fun+0xe>
 800760c:	3820      	subs	r0, #32
 800760e:	b2c0      	uxtb	r0, r0
 8007610:	4770      	bx	lr
 8007612:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007616:	2b05      	cmp	r3, #5
 8007618:	d801      	bhi.n	800761e <__hexdig_fun+0x1a>
 800761a:	3847      	subs	r0, #71	@ 0x47
 800761c:	e7f7      	b.n	800760e <__hexdig_fun+0xa>
 800761e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007622:	2b05      	cmp	r3, #5
 8007624:	d801      	bhi.n	800762a <__hexdig_fun+0x26>
 8007626:	3827      	subs	r0, #39	@ 0x27
 8007628:	e7f1      	b.n	800760e <__hexdig_fun+0xa>
 800762a:	2000      	movs	r0, #0
 800762c:	4770      	bx	lr
	...

08007630 <__gethex>:
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	b085      	sub	sp, #20
 8007636:	468a      	mov	sl, r1
 8007638:	9302      	str	r3, [sp, #8]
 800763a:	680b      	ldr	r3, [r1, #0]
 800763c:	9001      	str	r0, [sp, #4]
 800763e:	4690      	mov	r8, r2
 8007640:	1c9c      	adds	r4, r3, #2
 8007642:	46a1      	mov	r9, r4
 8007644:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007648:	2830      	cmp	r0, #48	@ 0x30
 800764a:	d0fa      	beq.n	8007642 <__gethex+0x12>
 800764c:	eba9 0303 	sub.w	r3, r9, r3
 8007650:	f1a3 0b02 	sub.w	fp, r3, #2
 8007654:	f7ff ffd6 	bl	8007604 <__hexdig_fun>
 8007658:	4605      	mov	r5, r0
 800765a:	2800      	cmp	r0, #0
 800765c:	d168      	bne.n	8007730 <__gethex+0x100>
 800765e:	49a0      	ldr	r1, [pc, #640]	@ (80078e0 <__gethex+0x2b0>)
 8007660:	2201      	movs	r2, #1
 8007662:	4648      	mov	r0, r9
 8007664:	f7ff ff14 	bl	8007490 <strncmp>
 8007668:	4607      	mov	r7, r0
 800766a:	2800      	cmp	r0, #0
 800766c:	d167      	bne.n	800773e <__gethex+0x10e>
 800766e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007672:	4626      	mov	r6, r4
 8007674:	f7ff ffc6 	bl	8007604 <__hexdig_fun>
 8007678:	2800      	cmp	r0, #0
 800767a:	d062      	beq.n	8007742 <__gethex+0x112>
 800767c:	4623      	mov	r3, r4
 800767e:	7818      	ldrb	r0, [r3, #0]
 8007680:	2830      	cmp	r0, #48	@ 0x30
 8007682:	4699      	mov	r9, r3
 8007684:	f103 0301 	add.w	r3, r3, #1
 8007688:	d0f9      	beq.n	800767e <__gethex+0x4e>
 800768a:	f7ff ffbb 	bl	8007604 <__hexdig_fun>
 800768e:	fab0 f580 	clz	r5, r0
 8007692:	096d      	lsrs	r5, r5, #5
 8007694:	f04f 0b01 	mov.w	fp, #1
 8007698:	464a      	mov	r2, r9
 800769a:	4616      	mov	r6, r2
 800769c:	3201      	adds	r2, #1
 800769e:	7830      	ldrb	r0, [r6, #0]
 80076a0:	f7ff ffb0 	bl	8007604 <__hexdig_fun>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d1f8      	bne.n	800769a <__gethex+0x6a>
 80076a8:	498d      	ldr	r1, [pc, #564]	@ (80078e0 <__gethex+0x2b0>)
 80076aa:	2201      	movs	r2, #1
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7ff feef 	bl	8007490 <strncmp>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d13f      	bne.n	8007736 <__gethex+0x106>
 80076b6:	b944      	cbnz	r4, 80076ca <__gethex+0x9a>
 80076b8:	1c74      	adds	r4, r6, #1
 80076ba:	4622      	mov	r2, r4
 80076bc:	4616      	mov	r6, r2
 80076be:	3201      	adds	r2, #1
 80076c0:	7830      	ldrb	r0, [r6, #0]
 80076c2:	f7ff ff9f 	bl	8007604 <__hexdig_fun>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d1f8      	bne.n	80076bc <__gethex+0x8c>
 80076ca:	1ba4      	subs	r4, r4, r6
 80076cc:	00a7      	lsls	r7, r4, #2
 80076ce:	7833      	ldrb	r3, [r6, #0]
 80076d0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80076d4:	2b50      	cmp	r3, #80	@ 0x50
 80076d6:	d13e      	bne.n	8007756 <__gethex+0x126>
 80076d8:	7873      	ldrb	r3, [r6, #1]
 80076da:	2b2b      	cmp	r3, #43	@ 0x2b
 80076dc:	d033      	beq.n	8007746 <__gethex+0x116>
 80076de:	2b2d      	cmp	r3, #45	@ 0x2d
 80076e0:	d034      	beq.n	800774c <__gethex+0x11c>
 80076e2:	1c71      	adds	r1, r6, #1
 80076e4:	2400      	movs	r4, #0
 80076e6:	7808      	ldrb	r0, [r1, #0]
 80076e8:	f7ff ff8c 	bl	8007604 <__hexdig_fun>
 80076ec:	1e43      	subs	r3, r0, #1
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b18      	cmp	r3, #24
 80076f2:	d830      	bhi.n	8007756 <__gethex+0x126>
 80076f4:	f1a0 0210 	sub.w	r2, r0, #16
 80076f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076fc:	f7ff ff82 	bl	8007604 <__hexdig_fun>
 8007700:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8007704:	fa5f fc8c 	uxtb.w	ip, ip
 8007708:	f1bc 0f18 	cmp.w	ip, #24
 800770c:	f04f 030a 	mov.w	r3, #10
 8007710:	d91e      	bls.n	8007750 <__gethex+0x120>
 8007712:	b104      	cbz	r4, 8007716 <__gethex+0xe6>
 8007714:	4252      	negs	r2, r2
 8007716:	4417      	add	r7, r2
 8007718:	f8ca 1000 	str.w	r1, [sl]
 800771c:	b1ed      	cbz	r5, 800775a <__gethex+0x12a>
 800771e:	f1bb 0f00 	cmp.w	fp, #0
 8007722:	bf0c      	ite	eq
 8007724:	2506      	moveq	r5, #6
 8007726:	2500      	movne	r5, #0
 8007728:	4628      	mov	r0, r5
 800772a:	b005      	add	sp, #20
 800772c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007730:	2500      	movs	r5, #0
 8007732:	462c      	mov	r4, r5
 8007734:	e7b0      	b.n	8007698 <__gethex+0x68>
 8007736:	2c00      	cmp	r4, #0
 8007738:	d1c7      	bne.n	80076ca <__gethex+0x9a>
 800773a:	4627      	mov	r7, r4
 800773c:	e7c7      	b.n	80076ce <__gethex+0x9e>
 800773e:	464e      	mov	r6, r9
 8007740:	462f      	mov	r7, r5
 8007742:	2501      	movs	r5, #1
 8007744:	e7c3      	b.n	80076ce <__gethex+0x9e>
 8007746:	2400      	movs	r4, #0
 8007748:	1cb1      	adds	r1, r6, #2
 800774a:	e7cc      	b.n	80076e6 <__gethex+0xb6>
 800774c:	2401      	movs	r4, #1
 800774e:	e7fb      	b.n	8007748 <__gethex+0x118>
 8007750:	fb03 0002 	mla	r0, r3, r2, r0
 8007754:	e7ce      	b.n	80076f4 <__gethex+0xc4>
 8007756:	4631      	mov	r1, r6
 8007758:	e7de      	b.n	8007718 <__gethex+0xe8>
 800775a:	eba6 0309 	sub.w	r3, r6, r9
 800775e:	3b01      	subs	r3, #1
 8007760:	4629      	mov	r1, r5
 8007762:	2b07      	cmp	r3, #7
 8007764:	dc0a      	bgt.n	800777c <__gethex+0x14c>
 8007766:	9801      	ldr	r0, [sp, #4]
 8007768:	f7fe f956 	bl	8005a18 <_Balloc>
 800776c:	4604      	mov	r4, r0
 800776e:	b940      	cbnz	r0, 8007782 <__gethex+0x152>
 8007770:	4b5c      	ldr	r3, [pc, #368]	@ (80078e4 <__gethex+0x2b4>)
 8007772:	4602      	mov	r2, r0
 8007774:	21e4      	movs	r1, #228	@ 0xe4
 8007776:	485c      	ldr	r0, [pc, #368]	@ (80078e8 <__gethex+0x2b8>)
 8007778:	f7ff fec0 	bl	80074fc <__assert_func>
 800777c:	3101      	adds	r1, #1
 800777e:	105b      	asrs	r3, r3, #1
 8007780:	e7ef      	b.n	8007762 <__gethex+0x132>
 8007782:	f100 0a14 	add.w	sl, r0, #20
 8007786:	2300      	movs	r3, #0
 8007788:	4655      	mov	r5, sl
 800778a:	469b      	mov	fp, r3
 800778c:	45b1      	cmp	r9, r6
 800778e:	d337      	bcc.n	8007800 <__gethex+0x1d0>
 8007790:	f845 bb04 	str.w	fp, [r5], #4
 8007794:	eba5 050a 	sub.w	r5, r5, sl
 8007798:	10ad      	asrs	r5, r5, #2
 800779a:	6125      	str	r5, [r4, #16]
 800779c:	4658      	mov	r0, fp
 800779e:	f7fe fa2d 	bl	8005bfc <__hi0bits>
 80077a2:	016d      	lsls	r5, r5, #5
 80077a4:	f8d8 6000 	ldr.w	r6, [r8]
 80077a8:	1a2d      	subs	r5, r5, r0
 80077aa:	42b5      	cmp	r5, r6
 80077ac:	dd54      	ble.n	8007858 <__gethex+0x228>
 80077ae:	1bad      	subs	r5, r5, r6
 80077b0:	4629      	mov	r1, r5
 80077b2:	4620      	mov	r0, r4
 80077b4:	f7fe fdb7 	bl	8006326 <__any_on>
 80077b8:	4681      	mov	r9, r0
 80077ba:	b178      	cbz	r0, 80077dc <__gethex+0x1ac>
 80077bc:	1e6b      	subs	r3, r5, #1
 80077be:	1159      	asrs	r1, r3, #5
 80077c0:	f003 021f 	and.w	r2, r3, #31
 80077c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80077c8:	f04f 0901 	mov.w	r9, #1
 80077cc:	fa09 f202 	lsl.w	r2, r9, r2
 80077d0:	420a      	tst	r2, r1
 80077d2:	d003      	beq.n	80077dc <__gethex+0x1ac>
 80077d4:	454b      	cmp	r3, r9
 80077d6:	dc36      	bgt.n	8007846 <__gethex+0x216>
 80077d8:	f04f 0902 	mov.w	r9, #2
 80077dc:	4629      	mov	r1, r5
 80077de:	4620      	mov	r0, r4
 80077e0:	f7ff febe 	bl	8007560 <rshift>
 80077e4:	442f      	add	r7, r5
 80077e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077ea:	42bb      	cmp	r3, r7
 80077ec:	da42      	bge.n	8007874 <__gethex+0x244>
 80077ee:	9801      	ldr	r0, [sp, #4]
 80077f0:	4621      	mov	r1, r4
 80077f2:	f7fe f951 	bl	8005a98 <_Bfree>
 80077f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077f8:	2300      	movs	r3, #0
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	25a3      	movs	r5, #163	@ 0xa3
 80077fe:	e793      	b.n	8007728 <__gethex+0xf8>
 8007800:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007804:	2a2e      	cmp	r2, #46	@ 0x2e
 8007806:	d012      	beq.n	800782e <__gethex+0x1fe>
 8007808:	2b20      	cmp	r3, #32
 800780a:	d104      	bne.n	8007816 <__gethex+0x1e6>
 800780c:	f845 bb04 	str.w	fp, [r5], #4
 8007810:	f04f 0b00 	mov.w	fp, #0
 8007814:	465b      	mov	r3, fp
 8007816:	7830      	ldrb	r0, [r6, #0]
 8007818:	9303      	str	r3, [sp, #12]
 800781a:	f7ff fef3 	bl	8007604 <__hexdig_fun>
 800781e:	9b03      	ldr	r3, [sp, #12]
 8007820:	f000 000f 	and.w	r0, r0, #15
 8007824:	4098      	lsls	r0, r3
 8007826:	ea4b 0b00 	orr.w	fp, fp, r0
 800782a:	3304      	adds	r3, #4
 800782c:	e7ae      	b.n	800778c <__gethex+0x15c>
 800782e:	45b1      	cmp	r9, r6
 8007830:	d8ea      	bhi.n	8007808 <__gethex+0x1d8>
 8007832:	492b      	ldr	r1, [pc, #172]	@ (80078e0 <__gethex+0x2b0>)
 8007834:	9303      	str	r3, [sp, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	4630      	mov	r0, r6
 800783a:	f7ff fe29 	bl	8007490 <strncmp>
 800783e:	9b03      	ldr	r3, [sp, #12]
 8007840:	2800      	cmp	r0, #0
 8007842:	d1e1      	bne.n	8007808 <__gethex+0x1d8>
 8007844:	e7a2      	b.n	800778c <__gethex+0x15c>
 8007846:	1ea9      	subs	r1, r5, #2
 8007848:	4620      	mov	r0, r4
 800784a:	f7fe fd6c 	bl	8006326 <__any_on>
 800784e:	2800      	cmp	r0, #0
 8007850:	d0c2      	beq.n	80077d8 <__gethex+0x1a8>
 8007852:	f04f 0903 	mov.w	r9, #3
 8007856:	e7c1      	b.n	80077dc <__gethex+0x1ac>
 8007858:	da09      	bge.n	800786e <__gethex+0x23e>
 800785a:	1b75      	subs	r5, r6, r5
 800785c:	4621      	mov	r1, r4
 800785e:	9801      	ldr	r0, [sp, #4]
 8007860:	462a      	mov	r2, r5
 8007862:	f7fe fb31 	bl	8005ec8 <__lshift>
 8007866:	1b7f      	subs	r7, r7, r5
 8007868:	4604      	mov	r4, r0
 800786a:	f100 0a14 	add.w	sl, r0, #20
 800786e:	f04f 0900 	mov.w	r9, #0
 8007872:	e7b8      	b.n	80077e6 <__gethex+0x1b6>
 8007874:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007878:	42bd      	cmp	r5, r7
 800787a:	dd6f      	ble.n	800795c <__gethex+0x32c>
 800787c:	1bed      	subs	r5, r5, r7
 800787e:	42ae      	cmp	r6, r5
 8007880:	dc34      	bgt.n	80078ec <__gethex+0x2bc>
 8007882:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d022      	beq.n	80078d0 <__gethex+0x2a0>
 800788a:	2b03      	cmp	r3, #3
 800788c:	d024      	beq.n	80078d8 <__gethex+0x2a8>
 800788e:	2b01      	cmp	r3, #1
 8007890:	d115      	bne.n	80078be <__gethex+0x28e>
 8007892:	42ae      	cmp	r6, r5
 8007894:	d113      	bne.n	80078be <__gethex+0x28e>
 8007896:	2e01      	cmp	r6, #1
 8007898:	d10b      	bne.n	80078b2 <__gethex+0x282>
 800789a:	9a02      	ldr	r2, [sp, #8]
 800789c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	2301      	movs	r3, #1
 80078a4:	6123      	str	r3, [r4, #16]
 80078a6:	f8ca 3000 	str.w	r3, [sl]
 80078aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078ac:	2562      	movs	r5, #98	@ 0x62
 80078ae:	601c      	str	r4, [r3, #0]
 80078b0:	e73a      	b.n	8007728 <__gethex+0xf8>
 80078b2:	1e71      	subs	r1, r6, #1
 80078b4:	4620      	mov	r0, r4
 80078b6:	f7fe fd36 	bl	8006326 <__any_on>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d1ed      	bne.n	800789a <__gethex+0x26a>
 80078be:	9801      	ldr	r0, [sp, #4]
 80078c0:	4621      	mov	r1, r4
 80078c2:	f7fe f8e9 	bl	8005a98 <_Bfree>
 80078c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078c8:	2300      	movs	r3, #0
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	2550      	movs	r5, #80	@ 0x50
 80078ce:	e72b      	b.n	8007728 <__gethex+0xf8>
 80078d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1f3      	bne.n	80078be <__gethex+0x28e>
 80078d6:	e7e0      	b.n	800789a <__gethex+0x26a>
 80078d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1dd      	bne.n	800789a <__gethex+0x26a>
 80078de:	e7ee      	b.n	80078be <__gethex+0x28e>
 80078e0:	08008460 	.word	0x08008460
 80078e4:	080082f5 	.word	0x080082f5
 80078e8:	0800860e 	.word	0x0800860e
 80078ec:	1e6f      	subs	r7, r5, #1
 80078ee:	f1b9 0f00 	cmp.w	r9, #0
 80078f2:	d130      	bne.n	8007956 <__gethex+0x326>
 80078f4:	b127      	cbz	r7, 8007900 <__gethex+0x2d0>
 80078f6:	4639      	mov	r1, r7
 80078f8:	4620      	mov	r0, r4
 80078fa:	f7fe fd14 	bl	8006326 <__any_on>
 80078fe:	4681      	mov	r9, r0
 8007900:	117a      	asrs	r2, r7, #5
 8007902:	2301      	movs	r3, #1
 8007904:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007908:	f007 071f 	and.w	r7, r7, #31
 800790c:	40bb      	lsls	r3, r7
 800790e:	4213      	tst	r3, r2
 8007910:	4629      	mov	r1, r5
 8007912:	4620      	mov	r0, r4
 8007914:	bf18      	it	ne
 8007916:	f049 0902 	orrne.w	r9, r9, #2
 800791a:	f7ff fe21 	bl	8007560 <rshift>
 800791e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007922:	1b76      	subs	r6, r6, r5
 8007924:	2502      	movs	r5, #2
 8007926:	f1b9 0f00 	cmp.w	r9, #0
 800792a:	d047      	beq.n	80079bc <__gethex+0x38c>
 800792c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007930:	2b02      	cmp	r3, #2
 8007932:	d015      	beq.n	8007960 <__gethex+0x330>
 8007934:	2b03      	cmp	r3, #3
 8007936:	d017      	beq.n	8007968 <__gethex+0x338>
 8007938:	2b01      	cmp	r3, #1
 800793a:	d109      	bne.n	8007950 <__gethex+0x320>
 800793c:	f019 0f02 	tst.w	r9, #2
 8007940:	d006      	beq.n	8007950 <__gethex+0x320>
 8007942:	f8da 3000 	ldr.w	r3, [sl]
 8007946:	ea49 0903 	orr.w	r9, r9, r3
 800794a:	f019 0f01 	tst.w	r9, #1
 800794e:	d10e      	bne.n	800796e <__gethex+0x33e>
 8007950:	f045 0510 	orr.w	r5, r5, #16
 8007954:	e032      	b.n	80079bc <__gethex+0x38c>
 8007956:	f04f 0901 	mov.w	r9, #1
 800795a:	e7d1      	b.n	8007900 <__gethex+0x2d0>
 800795c:	2501      	movs	r5, #1
 800795e:	e7e2      	b.n	8007926 <__gethex+0x2f6>
 8007960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007962:	f1c3 0301 	rsb	r3, r3, #1
 8007966:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007968:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0f0      	beq.n	8007950 <__gethex+0x320>
 800796e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007972:	f104 0314 	add.w	r3, r4, #20
 8007976:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800797a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800797e:	f04f 0c00 	mov.w	ip, #0
 8007982:	4618      	mov	r0, r3
 8007984:	f853 2b04 	ldr.w	r2, [r3], #4
 8007988:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800798c:	d01b      	beq.n	80079c6 <__gethex+0x396>
 800798e:	3201      	adds	r2, #1
 8007990:	6002      	str	r2, [r0, #0]
 8007992:	2d02      	cmp	r5, #2
 8007994:	f104 0314 	add.w	r3, r4, #20
 8007998:	d13c      	bne.n	8007a14 <__gethex+0x3e4>
 800799a:	f8d8 2000 	ldr.w	r2, [r8]
 800799e:	3a01      	subs	r2, #1
 80079a0:	42b2      	cmp	r2, r6
 80079a2:	d109      	bne.n	80079b8 <__gethex+0x388>
 80079a4:	1171      	asrs	r1, r6, #5
 80079a6:	2201      	movs	r2, #1
 80079a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079ac:	f006 061f 	and.w	r6, r6, #31
 80079b0:	fa02 f606 	lsl.w	r6, r2, r6
 80079b4:	421e      	tst	r6, r3
 80079b6:	d13a      	bne.n	8007a2e <__gethex+0x3fe>
 80079b8:	f045 0520 	orr.w	r5, r5, #32
 80079bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079be:	601c      	str	r4, [r3, #0]
 80079c0:	9b02      	ldr	r3, [sp, #8]
 80079c2:	601f      	str	r7, [r3, #0]
 80079c4:	e6b0      	b.n	8007728 <__gethex+0xf8>
 80079c6:	4299      	cmp	r1, r3
 80079c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80079cc:	d8d9      	bhi.n	8007982 <__gethex+0x352>
 80079ce:	68a3      	ldr	r3, [r4, #8]
 80079d0:	459b      	cmp	fp, r3
 80079d2:	db17      	blt.n	8007a04 <__gethex+0x3d4>
 80079d4:	6861      	ldr	r1, [r4, #4]
 80079d6:	9801      	ldr	r0, [sp, #4]
 80079d8:	3101      	adds	r1, #1
 80079da:	f7fe f81d 	bl	8005a18 <_Balloc>
 80079de:	4681      	mov	r9, r0
 80079e0:	b918      	cbnz	r0, 80079ea <__gethex+0x3ba>
 80079e2:	4b1a      	ldr	r3, [pc, #104]	@ (8007a4c <__gethex+0x41c>)
 80079e4:	4602      	mov	r2, r0
 80079e6:	2184      	movs	r1, #132	@ 0x84
 80079e8:	e6c5      	b.n	8007776 <__gethex+0x146>
 80079ea:	6922      	ldr	r2, [r4, #16]
 80079ec:	3202      	adds	r2, #2
 80079ee:	f104 010c 	add.w	r1, r4, #12
 80079f2:	0092      	lsls	r2, r2, #2
 80079f4:	300c      	adds	r0, #12
 80079f6:	f7ff fd6d 	bl	80074d4 <memcpy>
 80079fa:	4621      	mov	r1, r4
 80079fc:	9801      	ldr	r0, [sp, #4]
 80079fe:	f7fe f84b 	bl	8005a98 <_Bfree>
 8007a02:	464c      	mov	r4, r9
 8007a04:	6923      	ldr	r3, [r4, #16]
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a0c:	6122      	str	r2, [r4, #16]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	615a      	str	r2, [r3, #20]
 8007a12:	e7be      	b.n	8007992 <__gethex+0x362>
 8007a14:	6922      	ldr	r2, [r4, #16]
 8007a16:	455a      	cmp	r2, fp
 8007a18:	dd0b      	ble.n	8007a32 <__gethex+0x402>
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f7ff fd9f 	bl	8007560 <rshift>
 8007a22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a26:	3701      	adds	r7, #1
 8007a28:	42bb      	cmp	r3, r7
 8007a2a:	f6ff aee0 	blt.w	80077ee <__gethex+0x1be>
 8007a2e:	2501      	movs	r5, #1
 8007a30:	e7c2      	b.n	80079b8 <__gethex+0x388>
 8007a32:	f016 061f 	ands.w	r6, r6, #31
 8007a36:	d0fa      	beq.n	8007a2e <__gethex+0x3fe>
 8007a38:	4453      	add	r3, sl
 8007a3a:	f1c6 0620 	rsb	r6, r6, #32
 8007a3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007a42:	f7fe f8db 	bl	8005bfc <__hi0bits>
 8007a46:	42b0      	cmp	r0, r6
 8007a48:	dbe7      	blt.n	8007a1a <__gethex+0x3ea>
 8007a4a:	e7f0      	b.n	8007a2e <__gethex+0x3fe>
 8007a4c:	080082f5 	.word	0x080082f5

08007a50 <L_shift>:
 8007a50:	f1c2 0208 	rsb	r2, r2, #8
 8007a54:	0092      	lsls	r2, r2, #2
 8007a56:	b570      	push	{r4, r5, r6, lr}
 8007a58:	f1c2 0620 	rsb	r6, r2, #32
 8007a5c:	6843      	ldr	r3, [r0, #4]
 8007a5e:	6804      	ldr	r4, [r0, #0]
 8007a60:	fa03 f506 	lsl.w	r5, r3, r6
 8007a64:	432c      	orrs	r4, r5
 8007a66:	40d3      	lsrs	r3, r2
 8007a68:	6004      	str	r4, [r0, #0]
 8007a6a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a6e:	4288      	cmp	r0, r1
 8007a70:	d3f4      	bcc.n	8007a5c <L_shift+0xc>
 8007a72:	bd70      	pop	{r4, r5, r6, pc}

08007a74 <__match>:
 8007a74:	b530      	push	{r4, r5, lr}
 8007a76:	6803      	ldr	r3, [r0, #0]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a7e:	b914      	cbnz	r4, 8007a86 <__match+0x12>
 8007a80:	6003      	str	r3, [r0, #0]
 8007a82:	2001      	movs	r0, #1
 8007a84:	bd30      	pop	{r4, r5, pc}
 8007a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a8a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007a8e:	2d19      	cmp	r5, #25
 8007a90:	bf98      	it	ls
 8007a92:	3220      	addls	r2, #32
 8007a94:	42a2      	cmp	r2, r4
 8007a96:	d0f0      	beq.n	8007a7a <__match+0x6>
 8007a98:	2000      	movs	r0, #0
 8007a9a:	e7f3      	b.n	8007a84 <__match+0x10>

08007a9c <__hexnan>:
 8007a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa0:	680b      	ldr	r3, [r1, #0]
 8007aa2:	6801      	ldr	r1, [r0, #0]
 8007aa4:	115e      	asrs	r6, r3, #5
 8007aa6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007aaa:	f013 031f 	ands.w	r3, r3, #31
 8007aae:	b087      	sub	sp, #28
 8007ab0:	bf18      	it	ne
 8007ab2:	3604      	addne	r6, #4
 8007ab4:	2500      	movs	r5, #0
 8007ab6:	1f37      	subs	r7, r6, #4
 8007ab8:	4682      	mov	sl, r0
 8007aba:	4690      	mov	r8, r2
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	f846 5c04 	str.w	r5, [r6, #-4]
 8007ac2:	46b9      	mov	r9, r7
 8007ac4:	463c      	mov	r4, r7
 8007ac6:	9502      	str	r5, [sp, #8]
 8007ac8:	46ab      	mov	fp, r5
 8007aca:	784a      	ldrb	r2, [r1, #1]
 8007acc:	1c4b      	adds	r3, r1, #1
 8007ace:	9303      	str	r3, [sp, #12]
 8007ad0:	b342      	cbz	r2, 8007b24 <__hexnan+0x88>
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	9105      	str	r1, [sp, #20]
 8007ad6:	9204      	str	r2, [sp, #16]
 8007ad8:	f7ff fd94 	bl	8007604 <__hexdig_fun>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d151      	bne.n	8007b84 <__hexnan+0xe8>
 8007ae0:	9a04      	ldr	r2, [sp, #16]
 8007ae2:	9905      	ldr	r1, [sp, #20]
 8007ae4:	2a20      	cmp	r2, #32
 8007ae6:	d818      	bhi.n	8007b1a <__hexnan+0x7e>
 8007ae8:	9b02      	ldr	r3, [sp, #8]
 8007aea:	459b      	cmp	fp, r3
 8007aec:	dd13      	ble.n	8007b16 <__hexnan+0x7a>
 8007aee:	454c      	cmp	r4, r9
 8007af0:	d206      	bcs.n	8007b00 <__hexnan+0x64>
 8007af2:	2d07      	cmp	r5, #7
 8007af4:	dc04      	bgt.n	8007b00 <__hexnan+0x64>
 8007af6:	462a      	mov	r2, r5
 8007af8:	4649      	mov	r1, r9
 8007afa:	4620      	mov	r0, r4
 8007afc:	f7ff ffa8 	bl	8007a50 <L_shift>
 8007b00:	4544      	cmp	r4, r8
 8007b02:	d952      	bls.n	8007baa <__hexnan+0x10e>
 8007b04:	2300      	movs	r3, #0
 8007b06:	f1a4 0904 	sub.w	r9, r4, #4
 8007b0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b0e:	f8cd b008 	str.w	fp, [sp, #8]
 8007b12:	464c      	mov	r4, r9
 8007b14:	461d      	mov	r5, r3
 8007b16:	9903      	ldr	r1, [sp, #12]
 8007b18:	e7d7      	b.n	8007aca <__hexnan+0x2e>
 8007b1a:	2a29      	cmp	r2, #41	@ 0x29
 8007b1c:	d157      	bne.n	8007bce <__hexnan+0x132>
 8007b1e:	3102      	adds	r1, #2
 8007b20:	f8ca 1000 	str.w	r1, [sl]
 8007b24:	f1bb 0f00 	cmp.w	fp, #0
 8007b28:	d051      	beq.n	8007bce <__hexnan+0x132>
 8007b2a:	454c      	cmp	r4, r9
 8007b2c:	d206      	bcs.n	8007b3c <__hexnan+0xa0>
 8007b2e:	2d07      	cmp	r5, #7
 8007b30:	dc04      	bgt.n	8007b3c <__hexnan+0xa0>
 8007b32:	462a      	mov	r2, r5
 8007b34:	4649      	mov	r1, r9
 8007b36:	4620      	mov	r0, r4
 8007b38:	f7ff ff8a 	bl	8007a50 <L_shift>
 8007b3c:	4544      	cmp	r4, r8
 8007b3e:	d936      	bls.n	8007bae <__hexnan+0x112>
 8007b40:	f1a8 0204 	sub.w	r2, r8, #4
 8007b44:	4623      	mov	r3, r4
 8007b46:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b4a:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b4e:	429f      	cmp	r7, r3
 8007b50:	d2f9      	bcs.n	8007b46 <__hexnan+0xaa>
 8007b52:	1b3b      	subs	r3, r7, r4
 8007b54:	f023 0303 	bic.w	r3, r3, #3
 8007b58:	3304      	adds	r3, #4
 8007b5a:	3401      	adds	r4, #1
 8007b5c:	3e03      	subs	r6, #3
 8007b5e:	42b4      	cmp	r4, r6
 8007b60:	bf88      	it	hi
 8007b62:	2304      	movhi	r3, #4
 8007b64:	4443      	add	r3, r8
 8007b66:	2200      	movs	r2, #0
 8007b68:	f843 2b04 	str.w	r2, [r3], #4
 8007b6c:	429f      	cmp	r7, r3
 8007b6e:	d2fb      	bcs.n	8007b68 <__hexnan+0xcc>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	b91b      	cbnz	r3, 8007b7c <__hexnan+0xe0>
 8007b74:	4547      	cmp	r7, r8
 8007b76:	d128      	bne.n	8007bca <__hexnan+0x12e>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	2005      	movs	r0, #5
 8007b7e:	b007      	add	sp, #28
 8007b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b84:	3501      	adds	r5, #1
 8007b86:	2d08      	cmp	r5, #8
 8007b88:	f10b 0b01 	add.w	fp, fp, #1
 8007b8c:	dd06      	ble.n	8007b9c <__hexnan+0x100>
 8007b8e:	4544      	cmp	r4, r8
 8007b90:	d9c1      	bls.n	8007b16 <__hexnan+0x7a>
 8007b92:	2300      	movs	r3, #0
 8007b94:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b98:	2501      	movs	r5, #1
 8007b9a:	3c04      	subs	r4, #4
 8007b9c:	6822      	ldr	r2, [r4, #0]
 8007b9e:	f000 000f 	and.w	r0, r0, #15
 8007ba2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007ba6:	6020      	str	r0, [r4, #0]
 8007ba8:	e7b5      	b.n	8007b16 <__hexnan+0x7a>
 8007baa:	2508      	movs	r5, #8
 8007bac:	e7b3      	b.n	8007b16 <__hexnan+0x7a>
 8007bae:	9b01      	ldr	r3, [sp, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d0dd      	beq.n	8007b70 <__hexnan+0xd4>
 8007bb4:	f1c3 0320 	rsb	r3, r3, #32
 8007bb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bbc:	40da      	lsrs	r2, r3
 8007bbe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	f846 3c04 	str.w	r3, [r6, #-4]
 8007bc8:	e7d2      	b.n	8007b70 <__hexnan+0xd4>
 8007bca:	3f04      	subs	r7, #4
 8007bcc:	e7d0      	b.n	8007b70 <__hexnan+0xd4>
 8007bce:	2004      	movs	r0, #4
 8007bd0:	e7d5      	b.n	8007b7e <__hexnan+0xe2>

08007bd2 <__ascii_mbtowc>:
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	b901      	cbnz	r1, 8007bd8 <__ascii_mbtowc+0x6>
 8007bd6:	a901      	add	r1, sp, #4
 8007bd8:	b142      	cbz	r2, 8007bec <__ascii_mbtowc+0x1a>
 8007bda:	b14b      	cbz	r3, 8007bf0 <__ascii_mbtowc+0x1e>
 8007bdc:	7813      	ldrb	r3, [r2, #0]
 8007bde:	600b      	str	r3, [r1, #0]
 8007be0:	7812      	ldrb	r2, [r2, #0]
 8007be2:	1e10      	subs	r0, r2, #0
 8007be4:	bf18      	it	ne
 8007be6:	2001      	movne	r0, #1
 8007be8:	b002      	add	sp, #8
 8007bea:	4770      	bx	lr
 8007bec:	4610      	mov	r0, r2
 8007bee:	e7fb      	b.n	8007be8 <__ascii_mbtowc+0x16>
 8007bf0:	f06f 0001 	mvn.w	r0, #1
 8007bf4:	e7f8      	b.n	8007be8 <__ascii_mbtowc+0x16>

08007bf6 <_realloc_r>:
 8007bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	4615      	mov	r5, r2
 8007bfe:	460c      	mov	r4, r1
 8007c00:	b921      	cbnz	r1, 8007c0c <_realloc_r+0x16>
 8007c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c06:	4611      	mov	r1, r2
 8007c08:	f7fd be7a 	b.w	8005900 <_malloc_r>
 8007c0c:	b92a      	cbnz	r2, 8007c1a <_realloc_r+0x24>
 8007c0e:	f7fd fe03 	bl	8005818 <_free_r>
 8007c12:	2400      	movs	r4, #0
 8007c14:	4620      	mov	r0, r4
 8007c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c1a:	f000 f840 	bl	8007c9e <_malloc_usable_size_r>
 8007c1e:	4285      	cmp	r5, r0
 8007c20:	4606      	mov	r6, r0
 8007c22:	d802      	bhi.n	8007c2a <_realloc_r+0x34>
 8007c24:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c28:	d8f4      	bhi.n	8007c14 <_realloc_r+0x1e>
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	4640      	mov	r0, r8
 8007c2e:	f7fd fe67 	bl	8005900 <_malloc_r>
 8007c32:	4607      	mov	r7, r0
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d0ec      	beq.n	8007c12 <_realloc_r+0x1c>
 8007c38:	42b5      	cmp	r5, r6
 8007c3a:	462a      	mov	r2, r5
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	bf28      	it	cs
 8007c40:	4632      	movcs	r2, r6
 8007c42:	f7ff fc47 	bl	80074d4 <memcpy>
 8007c46:	4621      	mov	r1, r4
 8007c48:	4640      	mov	r0, r8
 8007c4a:	f7fd fde5 	bl	8005818 <_free_r>
 8007c4e:	463c      	mov	r4, r7
 8007c50:	e7e0      	b.n	8007c14 <_realloc_r+0x1e>

08007c52 <__ascii_wctomb>:
 8007c52:	4603      	mov	r3, r0
 8007c54:	4608      	mov	r0, r1
 8007c56:	b141      	cbz	r1, 8007c6a <__ascii_wctomb+0x18>
 8007c58:	2aff      	cmp	r2, #255	@ 0xff
 8007c5a:	d904      	bls.n	8007c66 <__ascii_wctomb+0x14>
 8007c5c:	228a      	movs	r2, #138	@ 0x8a
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c64:	4770      	bx	lr
 8007c66:	700a      	strb	r2, [r1, #0]
 8007c68:	2001      	movs	r0, #1
 8007c6a:	4770      	bx	lr

08007c6c <fiprintf>:
 8007c6c:	b40e      	push	{r1, r2, r3}
 8007c6e:	b503      	push	{r0, r1, lr}
 8007c70:	4601      	mov	r1, r0
 8007c72:	ab03      	add	r3, sp, #12
 8007c74:	4805      	ldr	r0, [pc, #20]	@ (8007c8c <fiprintf+0x20>)
 8007c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c7a:	6800      	ldr	r0, [r0, #0]
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	f000 f83d 	bl	8007cfc <_vfiprintf_r>
 8007c82:	b002      	add	sp, #8
 8007c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c88:	b003      	add	sp, #12
 8007c8a:	4770      	bx	lr
 8007c8c:	20000018 	.word	0x20000018

08007c90 <abort>:
 8007c90:	b508      	push	{r3, lr}
 8007c92:	2006      	movs	r0, #6
 8007c94:	f000 fa06 	bl	80080a4 <raise>
 8007c98:	2001      	movs	r0, #1
 8007c9a:	f7f9 fe92 	bl	80019c2 <_exit>

08007c9e <_malloc_usable_size_r>:
 8007c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ca2:	1f18      	subs	r0, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bfbc      	itt	lt
 8007ca8:	580b      	ldrlt	r3, [r1, r0]
 8007caa:	18c0      	addlt	r0, r0, r3
 8007cac:	4770      	bx	lr

08007cae <__sfputc_r>:
 8007cae:	6893      	ldr	r3, [r2, #8]
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	b410      	push	{r4}
 8007cb6:	6093      	str	r3, [r2, #8]
 8007cb8:	da07      	bge.n	8007cca <__sfputc_r+0x1c>
 8007cba:	6994      	ldr	r4, [r2, #24]
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	db01      	blt.n	8007cc4 <__sfputc_r+0x16>
 8007cc0:	290a      	cmp	r1, #10
 8007cc2:	d102      	bne.n	8007cca <__sfputc_r+0x1c>
 8007cc4:	bc10      	pop	{r4}
 8007cc6:	f000 b931 	b.w	8007f2c <__swbuf_r>
 8007cca:	6813      	ldr	r3, [r2, #0]
 8007ccc:	1c58      	adds	r0, r3, #1
 8007cce:	6010      	str	r0, [r2, #0]
 8007cd0:	7019      	strb	r1, [r3, #0]
 8007cd2:	4608      	mov	r0, r1
 8007cd4:	bc10      	pop	{r4}
 8007cd6:	4770      	bx	lr

08007cd8 <__sfputs_r>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	4606      	mov	r6, r0
 8007cdc:	460f      	mov	r7, r1
 8007cde:	4614      	mov	r4, r2
 8007ce0:	18d5      	adds	r5, r2, r3
 8007ce2:	42ac      	cmp	r4, r5
 8007ce4:	d101      	bne.n	8007cea <__sfputs_r+0x12>
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	e007      	b.n	8007cfa <__sfputs_r+0x22>
 8007cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cee:	463a      	mov	r2, r7
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f7ff ffdc 	bl	8007cae <__sfputc_r>
 8007cf6:	1c43      	adds	r3, r0, #1
 8007cf8:	d1f3      	bne.n	8007ce2 <__sfputs_r+0xa>
 8007cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007cfc <_vfiprintf_r>:
 8007cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d00:	460d      	mov	r5, r1
 8007d02:	b09d      	sub	sp, #116	@ 0x74
 8007d04:	4614      	mov	r4, r2
 8007d06:	4698      	mov	r8, r3
 8007d08:	4606      	mov	r6, r0
 8007d0a:	b118      	cbz	r0, 8007d14 <_vfiprintf_r+0x18>
 8007d0c:	6a03      	ldr	r3, [r0, #32]
 8007d0e:	b90b      	cbnz	r3, 8007d14 <_vfiprintf_r+0x18>
 8007d10:	f7fc fe12 	bl	8004938 <__sinit>
 8007d14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d16:	07d9      	lsls	r1, r3, #31
 8007d18:	d405      	bmi.n	8007d26 <_vfiprintf_r+0x2a>
 8007d1a:	89ab      	ldrh	r3, [r5, #12]
 8007d1c:	059a      	lsls	r2, r3, #22
 8007d1e:	d402      	bmi.n	8007d26 <_vfiprintf_r+0x2a>
 8007d20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d22:	f7fc ff20 	bl	8004b66 <__retarget_lock_acquire_recursive>
 8007d26:	89ab      	ldrh	r3, [r5, #12]
 8007d28:	071b      	lsls	r3, r3, #28
 8007d2a:	d501      	bpl.n	8007d30 <_vfiprintf_r+0x34>
 8007d2c:	692b      	ldr	r3, [r5, #16]
 8007d2e:	b99b      	cbnz	r3, 8007d58 <_vfiprintf_r+0x5c>
 8007d30:	4629      	mov	r1, r5
 8007d32:	4630      	mov	r0, r6
 8007d34:	f000 f938 	bl	8007fa8 <__swsetup_r>
 8007d38:	b170      	cbz	r0, 8007d58 <_vfiprintf_r+0x5c>
 8007d3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d3c:	07dc      	lsls	r4, r3, #31
 8007d3e:	d504      	bpl.n	8007d4a <_vfiprintf_r+0x4e>
 8007d40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d44:	b01d      	add	sp, #116	@ 0x74
 8007d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4a:	89ab      	ldrh	r3, [r5, #12]
 8007d4c:	0598      	lsls	r0, r3, #22
 8007d4e:	d4f7      	bmi.n	8007d40 <_vfiprintf_r+0x44>
 8007d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d52:	f7fc ff09 	bl	8004b68 <__retarget_lock_release_recursive>
 8007d56:	e7f3      	b.n	8007d40 <_vfiprintf_r+0x44>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d5c:	2320      	movs	r3, #32
 8007d5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d62:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d66:	2330      	movs	r3, #48	@ 0x30
 8007d68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f18 <_vfiprintf_r+0x21c>
 8007d6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d70:	f04f 0901 	mov.w	r9, #1
 8007d74:	4623      	mov	r3, r4
 8007d76:	469a      	mov	sl, r3
 8007d78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d7c:	b10a      	cbz	r2, 8007d82 <_vfiprintf_r+0x86>
 8007d7e:	2a25      	cmp	r2, #37	@ 0x25
 8007d80:	d1f9      	bne.n	8007d76 <_vfiprintf_r+0x7a>
 8007d82:	ebba 0b04 	subs.w	fp, sl, r4
 8007d86:	d00b      	beq.n	8007da0 <_vfiprintf_r+0xa4>
 8007d88:	465b      	mov	r3, fp
 8007d8a:	4622      	mov	r2, r4
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f7ff ffa2 	bl	8007cd8 <__sfputs_r>
 8007d94:	3001      	adds	r0, #1
 8007d96:	f000 80a7 	beq.w	8007ee8 <_vfiprintf_r+0x1ec>
 8007d9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d9c:	445a      	add	r2, fp
 8007d9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007da0:	f89a 3000 	ldrb.w	r3, [sl]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 809f 	beq.w	8007ee8 <_vfiprintf_r+0x1ec>
 8007daa:	2300      	movs	r3, #0
 8007dac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007db0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007db4:	f10a 0a01 	add.w	sl, sl, #1
 8007db8:	9304      	str	r3, [sp, #16]
 8007dba:	9307      	str	r3, [sp, #28]
 8007dbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dc2:	4654      	mov	r4, sl
 8007dc4:	2205      	movs	r2, #5
 8007dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dca:	4853      	ldr	r0, [pc, #332]	@ (8007f18 <_vfiprintf_r+0x21c>)
 8007dcc:	f7f8 fa00 	bl	80001d0 <memchr>
 8007dd0:	9a04      	ldr	r2, [sp, #16]
 8007dd2:	b9d8      	cbnz	r0, 8007e0c <_vfiprintf_r+0x110>
 8007dd4:	06d1      	lsls	r1, r2, #27
 8007dd6:	bf44      	itt	mi
 8007dd8:	2320      	movmi	r3, #32
 8007dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dde:	0713      	lsls	r3, r2, #28
 8007de0:	bf44      	itt	mi
 8007de2:	232b      	movmi	r3, #43	@ 0x2b
 8007de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007de8:	f89a 3000 	ldrb.w	r3, [sl]
 8007dec:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dee:	d015      	beq.n	8007e1c <_vfiprintf_r+0x120>
 8007df0:	9a07      	ldr	r2, [sp, #28]
 8007df2:	4654      	mov	r4, sl
 8007df4:	2000      	movs	r0, #0
 8007df6:	f04f 0c0a 	mov.w	ip, #10
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e00:	3b30      	subs	r3, #48	@ 0x30
 8007e02:	2b09      	cmp	r3, #9
 8007e04:	d94b      	bls.n	8007e9e <_vfiprintf_r+0x1a2>
 8007e06:	b1b0      	cbz	r0, 8007e36 <_vfiprintf_r+0x13a>
 8007e08:	9207      	str	r2, [sp, #28]
 8007e0a:	e014      	b.n	8007e36 <_vfiprintf_r+0x13a>
 8007e0c:	eba0 0308 	sub.w	r3, r0, r8
 8007e10:	fa09 f303 	lsl.w	r3, r9, r3
 8007e14:	4313      	orrs	r3, r2
 8007e16:	9304      	str	r3, [sp, #16]
 8007e18:	46a2      	mov	sl, r4
 8007e1a:	e7d2      	b.n	8007dc2 <_vfiprintf_r+0xc6>
 8007e1c:	9b03      	ldr	r3, [sp, #12]
 8007e1e:	1d19      	adds	r1, r3, #4
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	9103      	str	r1, [sp, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	bfbb      	ittet	lt
 8007e28:	425b      	neglt	r3, r3
 8007e2a:	f042 0202 	orrlt.w	r2, r2, #2
 8007e2e:	9307      	strge	r3, [sp, #28]
 8007e30:	9307      	strlt	r3, [sp, #28]
 8007e32:	bfb8      	it	lt
 8007e34:	9204      	strlt	r2, [sp, #16]
 8007e36:	7823      	ldrb	r3, [r4, #0]
 8007e38:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e3a:	d10a      	bne.n	8007e52 <_vfiprintf_r+0x156>
 8007e3c:	7863      	ldrb	r3, [r4, #1]
 8007e3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e40:	d132      	bne.n	8007ea8 <_vfiprintf_r+0x1ac>
 8007e42:	9b03      	ldr	r3, [sp, #12]
 8007e44:	1d1a      	adds	r2, r3, #4
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	9203      	str	r2, [sp, #12]
 8007e4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e4e:	3402      	adds	r4, #2
 8007e50:	9305      	str	r3, [sp, #20]
 8007e52:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007f1c <_vfiprintf_r+0x220>
 8007e56:	7821      	ldrb	r1, [r4, #0]
 8007e58:	2203      	movs	r2, #3
 8007e5a:	4650      	mov	r0, sl
 8007e5c:	f7f8 f9b8 	bl	80001d0 <memchr>
 8007e60:	b138      	cbz	r0, 8007e72 <_vfiprintf_r+0x176>
 8007e62:	9b04      	ldr	r3, [sp, #16]
 8007e64:	eba0 000a 	sub.w	r0, r0, sl
 8007e68:	2240      	movs	r2, #64	@ 0x40
 8007e6a:	4082      	lsls	r2, r0
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	3401      	adds	r4, #1
 8007e70:	9304      	str	r3, [sp, #16]
 8007e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e76:	482a      	ldr	r0, [pc, #168]	@ (8007f20 <_vfiprintf_r+0x224>)
 8007e78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e7c:	2206      	movs	r2, #6
 8007e7e:	f7f8 f9a7 	bl	80001d0 <memchr>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d03f      	beq.n	8007f06 <_vfiprintf_r+0x20a>
 8007e86:	4b27      	ldr	r3, [pc, #156]	@ (8007f24 <_vfiprintf_r+0x228>)
 8007e88:	bb1b      	cbnz	r3, 8007ed2 <_vfiprintf_r+0x1d6>
 8007e8a:	9b03      	ldr	r3, [sp, #12]
 8007e8c:	3307      	adds	r3, #7
 8007e8e:	f023 0307 	bic.w	r3, r3, #7
 8007e92:	3308      	adds	r3, #8
 8007e94:	9303      	str	r3, [sp, #12]
 8007e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e98:	443b      	add	r3, r7
 8007e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e9c:	e76a      	b.n	8007d74 <_vfiprintf_r+0x78>
 8007e9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	2001      	movs	r0, #1
 8007ea6:	e7a8      	b.n	8007dfa <_vfiprintf_r+0xfe>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	3401      	adds	r4, #1
 8007eac:	9305      	str	r3, [sp, #20]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	f04f 0c0a 	mov.w	ip, #10
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eba:	3a30      	subs	r2, #48	@ 0x30
 8007ebc:	2a09      	cmp	r2, #9
 8007ebe:	d903      	bls.n	8007ec8 <_vfiprintf_r+0x1cc>
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0c6      	beq.n	8007e52 <_vfiprintf_r+0x156>
 8007ec4:	9105      	str	r1, [sp, #20]
 8007ec6:	e7c4      	b.n	8007e52 <_vfiprintf_r+0x156>
 8007ec8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ecc:	4604      	mov	r4, r0
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e7f0      	b.n	8007eb4 <_vfiprintf_r+0x1b8>
 8007ed2:	ab03      	add	r3, sp, #12
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	462a      	mov	r2, r5
 8007ed8:	4b13      	ldr	r3, [pc, #76]	@ (8007f28 <_vfiprintf_r+0x22c>)
 8007eda:	a904      	add	r1, sp, #16
 8007edc:	4630      	mov	r0, r6
 8007ede:	f7fb fed7 	bl	8003c90 <_printf_float>
 8007ee2:	4607      	mov	r7, r0
 8007ee4:	1c78      	adds	r0, r7, #1
 8007ee6:	d1d6      	bne.n	8007e96 <_vfiprintf_r+0x19a>
 8007ee8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007eea:	07d9      	lsls	r1, r3, #31
 8007eec:	d405      	bmi.n	8007efa <_vfiprintf_r+0x1fe>
 8007eee:	89ab      	ldrh	r3, [r5, #12]
 8007ef0:	059a      	lsls	r2, r3, #22
 8007ef2:	d402      	bmi.n	8007efa <_vfiprintf_r+0x1fe>
 8007ef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ef6:	f7fc fe37 	bl	8004b68 <__retarget_lock_release_recursive>
 8007efa:	89ab      	ldrh	r3, [r5, #12]
 8007efc:	065b      	lsls	r3, r3, #25
 8007efe:	f53f af1f 	bmi.w	8007d40 <_vfiprintf_r+0x44>
 8007f02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f04:	e71e      	b.n	8007d44 <_vfiprintf_r+0x48>
 8007f06:	ab03      	add	r3, sp, #12
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	462a      	mov	r2, r5
 8007f0c:	4b06      	ldr	r3, [pc, #24]	@ (8007f28 <_vfiprintf_r+0x22c>)
 8007f0e:	a904      	add	r1, sp, #16
 8007f10:	4630      	mov	r0, r6
 8007f12:	f7fc f957 	bl	80041c4 <_printf_i>
 8007f16:	e7e4      	b.n	8007ee2 <_vfiprintf_r+0x1e6>
 8007f18:	080085b9 	.word	0x080085b9
 8007f1c:	080085bf 	.word	0x080085bf
 8007f20:	080085c3 	.word	0x080085c3
 8007f24:	08003c91 	.word	0x08003c91
 8007f28:	08007cd9 	.word	0x08007cd9

08007f2c <__swbuf_r>:
 8007f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2e:	460e      	mov	r6, r1
 8007f30:	4614      	mov	r4, r2
 8007f32:	4605      	mov	r5, r0
 8007f34:	b118      	cbz	r0, 8007f3e <__swbuf_r+0x12>
 8007f36:	6a03      	ldr	r3, [r0, #32]
 8007f38:	b90b      	cbnz	r3, 8007f3e <__swbuf_r+0x12>
 8007f3a:	f7fc fcfd 	bl	8004938 <__sinit>
 8007f3e:	69a3      	ldr	r3, [r4, #24]
 8007f40:	60a3      	str	r3, [r4, #8]
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	071a      	lsls	r2, r3, #28
 8007f46:	d501      	bpl.n	8007f4c <__swbuf_r+0x20>
 8007f48:	6923      	ldr	r3, [r4, #16]
 8007f4a:	b943      	cbnz	r3, 8007f5e <__swbuf_r+0x32>
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	4628      	mov	r0, r5
 8007f50:	f000 f82a 	bl	8007fa8 <__swsetup_r>
 8007f54:	b118      	cbz	r0, 8007f5e <__swbuf_r+0x32>
 8007f56:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	6922      	ldr	r2, [r4, #16]
 8007f62:	1a98      	subs	r0, r3, r2
 8007f64:	6963      	ldr	r3, [r4, #20]
 8007f66:	b2f6      	uxtb	r6, r6
 8007f68:	4283      	cmp	r3, r0
 8007f6a:	4637      	mov	r7, r6
 8007f6c:	dc05      	bgt.n	8007f7a <__swbuf_r+0x4e>
 8007f6e:	4621      	mov	r1, r4
 8007f70:	4628      	mov	r0, r5
 8007f72:	f7ff fa4b 	bl	800740c <_fflush_r>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d1ed      	bne.n	8007f56 <__swbuf_r+0x2a>
 8007f7a:	68a3      	ldr	r3, [r4, #8]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	60a3      	str	r3, [r4, #8]
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	6022      	str	r2, [r4, #0]
 8007f86:	701e      	strb	r6, [r3, #0]
 8007f88:	6962      	ldr	r2, [r4, #20]
 8007f8a:	1c43      	adds	r3, r0, #1
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d004      	beq.n	8007f9a <__swbuf_r+0x6e>
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	07db      	lsls	r3, r3, #31
 8007f94:	d5e1      	bpl.n	8007f5a <__swbuf_r+0x2e>
 8007f96:	2e0a      	cmp	r6, #10
 8007f98:	d1df      	bne.n	8007f5a <__swbuf_r+0x2e>
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f7ff fa35 	bl	800740c <_fflush_r>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d0d9      	beq.n	8007f5a <__swbuf_r+0x2e>
 8007fa6:	e7d6      	b.n	8007f56 <__swbuf_r+0x2a>

08007fa8 <__swsetup_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4b29      	ldr	r3, [pc, #164]	@ (8008050 <__swsetup_r+0xa8>)
 8007fac:	4605      	mov	r5, r0
 8007fae:	6818      	ldr	r0, [r3, #0]
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	b118      	cbz	r0, 8007fbc <__swsetup_r+0x14>
 8007fb4:	6a03      	ldr	r3, [r0, #32]
 8007fb6:	b90b      	cbnz	r3, 8007fbc <__swsetup_r+0x14>
 8007fb8:	f7fc fcbe 	bl	8004938 <__sinit>
 8007fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fc0:	0719      	lsls	r1, r3, #28
 8007fc2:	d422      	bmi.n	800800a <__swsetup_r+0x62>
 8007fc4:	06da      	lsls	r2, r3, #27
 8007fc6:	d407      	bmi.n	8007fd8 <__swsetup_r+0x30>
 8007fc8:	2209      	movs	r2, #9
 8007fca:	602a      	str	r2, [r5, #0]
 8007fcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fd6:	e033      	b.n	8008040 <__swsetup_r+0x98>
 8007fd8:	0758      	lsls	r0, r3, #29
 8007fda:	d512      	bpl.n	8008002 <__swsetup_r+0x5a>
 8007fdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fde:	b141      	cbz	r1, 8007ff2 <__swsetup_r+0x4a>
 8007fe0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fe4:	4299      	cmp	r1, r3
 8007fe6:	d002      	beq.n	8007fee <__swsetup_r+0x46>
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f7fd fc15 	bl	8005818 <_free_r>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	6063      	str	r3, [r4, #4]
 8007ffe:	6923      	ldr	r3, [r4, #16]
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	f043 0308 	orr.w	r3, r3, #8
 8008008:	81a3      	strh	r3, [r4, #12]
 800800a:	6923      	ldr	r3, [r4, #16]
 800800c:	b94b      	cbnz	r3, 8008022 <__swsetup_r+0x7a>
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008018:	d003      	beq.n	8008022 <__swsetup_r+0x7a>
 800801a:	4621      	mov	r1, r4
 800801c:	4628      	mov	r0, r5
 800801e:	f000 f883 	bl	8008128 <__smakebuf_r>
 8008022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008026:	f013 0201 	ands.w	r2, r3, #1
 800802a:	d00a      	beq.n	8008042 <__swsetup_r+0x9a>
 800802c:	2200      	movs	r2, #0
 800802e:	60a2      	str	r2, [r4, #8]
 8008030:	6962      	ldr	r2, [r4, #20]
 8008032:	4252      	negs	r2, r2
 8008034:	61a2      	str	r2, [r4, #24]
 8008036:	6922      	ldr	r2, [r4, #16]
 8008038:	b942      	cbnz	r2, 800804c <__swsetup_r+0xa4>
 800803a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800803e:	d1c5      	bne.n	8007fcc <__swsetup_r+0x24>
 8008040:	bd38      	pop	{r3, r4, r5, pc}
 8008042:	0799      	lsls	r1, r3, #30
 8008044:	bf58      	it	pl
 8008046:	6962      	ldrpl	r2, [r4, #20]
 8008048:	60a2      	str	r2, [r4, #8]
 800804a:	e7f4      	b.n	8008036 <__swsetup_r+0x8e>
 800804c:	2000      	movs	r0, #0
 800804e:	e7f7      	b.n	8008040 <__swsetup_r+0x98>
 8008050:	20000018 	.word	0x20000018

08008054 <_raise_r>:
 8008054:	291f      	cmp	r1, #31
 8008056:	b538      	push	{r3, r4, r5, lr}
 8008058:	4605      	mov	r5, r0
 800805a:	460c      	mov	r4, r1
 800805c:	d904      	bls.n	8008068 <_raise_r+0x14>
 800805e:	2316      	movs	r3, #22
 8008060:	6003      	str	r3, [r0, #0]
 8008062:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800806a:	b112      	cbz	r2, 8008072 <_raise_r+0x1e>
 800806c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008070:	b94b      	cbnz	r3, 8008086 <_raise_r+0x32>
 8008072:	4628      	mov	r0, r5
 8008074:	f000 f830 	bl	80080d8 <_getpid_r>
 8008078:	4622      	mov	r2, r4
 800807a:	4601      	mov	r1, r0
 800807c:	4628      	mov	r0, r5
 800807e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008082:	f000 b817 	b.w	80080b4 <_kill_r>
 8008086:	2b01      	cmp	r3, #1
 8008088:	d00a      	beq.n	80080a0 <_raise_r+0x4c>
 800808a:	1c59      	adds	r1, r3, #1
 800808c:	d103      	bne.n	8008096 <_raise_r+0x42>
 800808e:	2316      	movs	r3, #22
 8008090:	6003      	str	r3, [r0, #0]
 8008092:	2001      	movs	r0, #1
 8008094:	e7e7      	b.n	8008066 <_raise_r+0x12>
 8008096:	2100      	movs	r1, #0
 8008098:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800809c:	4620      	mov	r0, r4
 800809e:	4798      	blx	r3
 80080a0:	2000      	movs	r0, #0
 80080a2:	e7e0      	b.n	8008066 <_raise_r+0x12>

080080a4 <raise>:
 80080a4:	4b02      	ldr	r3, [pc, #8]	@ (80080b0 <raise+0xc>)
 80080a6:	4601      	mov	r1, r0
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	f7ff bfd3 	b.w	8008054 <_raise_r>
 80080ae:	bf00      	nop
 80080b0:	20000018 	.word	0x20000018

080080b4 <_kill_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4d07      	ldr	r5, [pc, #28]	@ (80080d4 <_kill_r+0x20>)
 80080b8:	2300      	movs	r3, #0
 80080ba:	4604      	mov	r4, r0
 80080bc:	4608      	mov	r0, r1
 80080be:	4611      	mov	r1, r2
 80080c0:	602b      	str	r3, [r5, #0]
 80080c2:	f7f9 fc6e 	bl	80019a2 <_kill>
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	d102      	bne.n	80080d0 <_kill_r+0x1c>
 80080ca:	682b      	ldr	r3, [r5, #0]
 80080cc:	b103      	cbz	r3, 80080d0 <_kill_r+0x1c>
 80080ce:	6023      	str	r3, [r4, #0]
 80080d0:	bd38      	pop	{r3, r4, r5, pc}
 80080d2:	bf00      	nop
 80080d4:	200003fc 	.word	0x200003fc

080080d8 <_getpid_r>:
 80080d8:	f7f9 bc5c 	b.w	8001994 <_getpid>

080080dc <__swhatbuf_r>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	460c      	mov	r4, r1
 80080e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e4:	2900      	cmp	r1, #0
 80080e6:	b096      	sub	sp, #88	@ 0x58
 80080e8:	4615      	mov	r5, r2
 80080ea:	461e      	mov	r6, r3
 80080ec:	da0d      	bge.n	800810a <__swhatbuf_r+0x2e>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80080f4:	f04f 0100 	mov.w	r1, #0
 80080f8:	bf14      	ite	ne
 80080fa:	2340      	movne	r3, #64	@ 0x40
 80080fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008100:	2000      	movs	r0, #0
 8008102:	6031      	str	r1, [r6, #0]
 8008104:	602b      	str	r3, [r5, #0]
 8008106:	b016      	add	sp, #88	@ 0x58
 8008108:	bd70      	pop	{r4, r5, r6, pc}
 800810a:	466a      	mov	r2, sp
 800810c:	f000 f848 	bl	80081a0 <_fstat_r>
 8008110:	2800      	cmp	r0, #0
 8008112:	dbec      	blt.n	80080ee <__swhatbuf_r+0x12>
 8008114:	9901      	ldr	r1, [sp, #4]
 8008116:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800811a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800811e:	4259      	negs	r1, r3
 8008120:	4159      	adcs	r1, r3
 8008122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008126:	e7eb      	b.n	8008100 <__swhatbuf_r+0x24>

08008128 <__smakebuf_r>:
 8008128:	898b      	ldrh	r3, [r1, #12]
 800812a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800812c:	079d      	lsls	r5, r3, #30
 800812e:	4606      	mov	r6, r0
 8008130:	460c      	mov	r4, r1
 8008132:	d507      	bpl.n	8008144 <__smakebuf_r+0x1c>
 8008134:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	6123      	str	r3, [r4, #16]
 800813c:	2301      	movs	r3, #1
 800813e:	6163      	str	r3, [r4, #20]
 8008140:	b003      	add	sp, #12
 8008142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008144:	ab01      	add	r3, sp, #4
 8008146:	466a      	mov	r2, sp
 8008148:	f7ff ffc8 	bl	80080dc <__swhatbuf_r>
 800814c:	9f00      	ldr	r7, [sp, #0]
 800814e:	4605      	mov	r5, r0
 8008150:	4639      	mov	r1, r7
 8008152:	4630      	mov	r0, r6
 8008154:	f7fd fbd4 	bl	8005900 <_malloc_r>
 8008158:	b948      	cbnz	r0, 800816e <__smakebuf_r+0x46>
 800815a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800815e:	059a      	lsls	r2, r3, #22
 8008160:	d4ee      	bmi.n	8008140 <__smakebuf_r+0x18>
 8008162:	f023 0303 	bic.w	r3, r3, #3
 8008166:	f043 0302 	orr.w	r3, r3, #2
 800816a:	81a3      	strh	r3, [r4, #12]
 800816c:	e7e2      	b.n	8008134 <__smakebuf_r+0xc>
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	6020      	str	r0, [r4, #0]
 8008172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008176:	81a3      	strh	r3, [r4, #12]
 8008178:	9b01      	ldr	r3, [sp, #4]
 800817a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800817e:	b15b      	cbz	r3, 8008198 <__smakebuf_r+0x70>
 8008180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008184:	4630      	mov	r0, r6
 8008186:	f000 f81d 	bl	80081c4 <_isatty_r>
 800818a:	b128      	cbz	r0, 8008198 <__smakebuf_r+0x70>
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	f023 0303 	bic.w	r3, r3, #3
 8008192:	f043 0301 	orr.w	r3, r3, #1
 8008196:	81a3      	strh	r3, [r4, #12]
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	431d      	orrs	r5, r3
 800819c:	81a5      	strh	r5, [r4, #12]
 800819e:	e7cf      	b.n	8008140 <__smakebuf_r+0x18>

080081a0 <_fstat_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4d07      	ldr	r5, [pc, #28]	@ (80081c0 <_fstat_r+0x20>)
 80081a4:	2300      	movs	r3, #0
 80081a6:	4604      	mov	r4, r0
 80081a8:	4608      	mov	r0, r1
 80081aa:	4611      	mov	r1, r2
 80081ac:	602b      	str	r3, [r5, #0]
 80081ae:	f7f9 fc57 	bl	8001a60 <_fstat>
 80081b2:	1c43      	adds	r3, r0, #1
 80081b4:	d102      	bne.n	80081bc <_fstat_r+0x1c>
 80081b6:	682b      	ldr	r3, [r5, #0]
 80081b8:	b103      	cbz	r3, 80081bc <_fstat_r+0x1c>
 80081ba:	6023      	str	r3, [r4, #0]
 80081bc:	bd38      	pop	{r3, r4, r5, pc}
 80081be:	bf00      	nop
 80081c0:	200003fc 	.word	0x200003fc

080081c4 <_isatty_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4d06      	ldr	r5, [pc, #24]	@ (80081e0 <_isatty_r+0x1c>)
 80081c8:	2300      	movs	r3, #0
 80081ca:	4604      	mov	r4, r0
 80081cc:	4608      	mov	r0, r1
 80081ce:	602b      	str	r3, [r5, #0]
 80081d0:	f7f9 fc55 	bl	8001a7e <_isatty>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d102      	bne.n	80081de <_isatty_r+0x1a>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	b103      	cbz	r3, 80081de <_isatty_r+0x1a>
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	bd38      	pop	{r3, r4, r5, pc}
 80081e0:	200003fc 	.word	0x200003fc

080081e4 <_init>:
 80081e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e6:	bf00      	nop
 80081e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ea:	bc08      	pop	{r3}
 80081ec:	469e      	mov	lr, r3
 80081ee:	4770      	bx	lr

080081f0 <_fini>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	bf00      	nop
 80081f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f6:	bc08      	pop	{r3}
 80081f8:	469e      	mov	lr, r3
 80081fa:	4770      	bx	lr
